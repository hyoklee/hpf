#!/usr/bin/env python3
"""
Process benchmark data.js from github-action-benchmark and create grouped comparison plots.
This script reads the data.js file, extracts benchmark data with series information,
and creates plots comparing HDF5 develop vs 1.14 for each benchmark.
"""

import json
import re
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import pandas as pd
import sys
import os
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime


def parse_data_js(data_js_path: str) -> Dict[str, Any]:
    """Parse the data.js file generated by github-action-benchmark."""
    try:
        with open(data_js_path, 'r') as f:
            content = f.read()

        # The data.js file starts with "window.BENCHMARK_DATA = " followed by JSON
        # Extract the JSON part
        match = re.search(r'window\.BENCHMARK_DATA\s*=\s*({.*});?\s*$', content, re.DOTALL)
        if match:
            json_str = match.group(1)
            data = json.loads(json_str)
            return data
        else:
            print("Error: Could not parse data.js format")
            return {}
    except FileNotFoundError:
        print(f"Error: {data_js_path} not found")
        return {}
    except Exception as e:
        print(f"Error parsing {data_js_path}: {e}")
        return {}


def extract_benchmark_history(data: Dict[str, Any]) -> Dict[str, List[Dict[str, Any]]]:
    """
    Extract benchmark history grouped by benchmark name.
    Returns: Dict mapping benchmark name to list of historical data points.
    """
    if 'entries' not in data:
        print("Warning: No 'entries' key in benchmark data")
        return {}

    # Group by benchmark name
    grouped = {}

    for benchmark_name, history_list in data['entries'].items():
        if not history_list:
            continue

        # Each item in history_list is a data point with timestamp
        grouped[benchmark_name] = history_list

    return grouped


def create_comparison_plots(grouped_data: Dict[str, List[Dict[str, Any]]],
                           output_dir: Path):
    """
    Create comparison plots for each benchmark showing develop vs 1.14 over time.
    """
    if not grouped_data:
        print("No benchmark data to plot")
        return

    output_dir.mkdir(parents=True, exist_ok=True)

    for benchmark_name, history in grouped_data.items():
        if not history:
            continue

        # Group data points by version (from series)
        develop_points = []
        v1_14_points = []

        for data_point in history:
            # Each data_point should have 'commit', 'date', 'tool', 'benches'
            if 'benches' not in data_point:
                continue

            # Extract date
            date = None
            if 'date' in data_point:
                date = datetime.fromtimestamp(data_point['date'] / 1000)  # Convert from ms

            # Process each benchmark entry
            for bench in data_point['benches']:
                if bench.get('name') != benchmark_name:
                    continue

                # Check if this benchmark has series data
                if 'series' in bench and bench['series']:
                    # This is a grouped benchmark with develop and 1.14 data
                    for series_item in bench['series']:
                        series_name = series_item.get('name', '')
                        value = series_item.get('value')

                        if value is None:
                            continue

                        point = {
                            'date': date,
                            'value': value,
                            'commit': data_point.get('commit', {}).get('id', '')
                        }

                        if 'develop' in series_name.lower():
                            develop_points.append(point)
                        elif '1.14' in series_name or '1_14' in series_name:
                            v1_14_points.append(point)
                else:
                    # Single value benchmark (older format or single version)
                    value = bench.get('value')
                    if value is not None and date:
                        point = {
                            'date': date,
                            'value': value,
                            'commit': data_point.get('commit', {}).get('id', '')
                        }
                        # Try to determine version from benchmark name
                        if 'develop' in benchmark_name.lower():
                            develop_points.append(point)
                        elif '1.14' in benchmark_name or '1_14' in benchmark_name:
                            v1_14_points.append(point)

        # Create plot if we have data
        if not develop_points and not v1_14_points:
            print(f"No data points for {benchmark_name}")
            continue

        fig, ax = plt.subplots(figsize=(14, 8))

        plotted = False

        # Plot develop timeline
        if develop_points:
            develop_points.sort(key=lambda x: x['date'])
            df_dev = pd.DataFrame(develop_points)
            ax.plot(df_dev['date'], df_dev['value'], 'o-',
                   label='HDF5 develop', linewidth=2.5, markersize=8,
                   color='#0066cc', alpha=0.8)
            plotted = True

        # Plot 1.14 timeline
        if v1_14_points:
            v1_14_points.sort(key=lambda x: x['date'])
            df_114 = pd.DataFrame(v1_14_points)
            ax.plot(df_114['date'], df_114['value'], 's-',
                   label='HDF5 1.14', linewidth=2.5, markersize=8,
                   color='#00aa00', alpha=0.8)
            plotted = True

        if plotted:
            ax.set_ylabel('Time (seconds)', fontsize=13, fontweight='bold')
            ax.set_xlabel('Date', fontsize=13, fontweight='bold')
            ax.set_title(f'{benchmark_name}\nPerformance Comparison (Lower is Better)',
                        fontsize=15, fontweight='bold', pad=20)
            ax.grid(True, alpha=0.3, linestyle='--')
            ax.legend(fontsize=12, loc='best', framealpha=0.9)

            # Format x-axis
            ax.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d'))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45, ha='right')

            # Add some padding to y-axis
            y_min, y_max = ax.get_ylim()
            y_range = y_max - y_min
            ax.set_ylim(y_min - 0.05 * y_range, y_max + 0.05 * y_range)

            plt.tight_layout()

            # Save with sanitized filename
            safe_name = benchmark_name.replace(' ', '_').replace('/', '_').replace(':', '_')
            output_file = output_dir / f"{safe_name}_comparison.png"
            plt.savefig(output_file, dpi=300, bbox_inches='tight')
            print(f"Created comparison plot: {output_file}")
            plt.close()
        else:
            plt.close()


def main():
    if len(sys.argv) != 3:
        print("Usage: create_grouped_plots.py <data.js> <output_dir>")
        sys.exit(1)

    data_js_path = sys.argv[1]
    output_dir = Path(sys.argv[2])

    print(f"Processing benchmark data from: {data_js_path}")
    print(f"Output directory: {output_dir}")

    # Parse the data.js file
    data = parse_data_js(data_js_path)

    if not data:
        print("Error: Failed to parse benchmark data")
        sys.exit(1)

    # Extract and group benchmark history
    grouped_data = extract_benchmark_history(data)

    print(f"Found {len(grouped_data)} unique benchmarks")

    # Create comparison plots
    create_comparison_plots(grouped_data, output_dir)

    print(f"All plots created in {output_dir}")


if __name__ == "__main__":
    main()
