<?xml version="1.0"?>
<fot>
<a name="0"/>
<a name="DOCBOOK"/>
<a name="2"/>
<text>
</text>
<text>;; $Id: docbook.dsl,v 1.7 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(define if-front-page
</text>
<text>  (external-procedure &quot;UNREGISTERED::James Clark//Procedure::if-front-page&quot;))
</text>
<text>
</text>
<text>(define if-first-page
</text>
<text>  (external-procedure &quot;UNREGISTERED::James Clark//Procedure::if-first-page&quot;))
</text>
<text>
</text>
<text>(declare-characteristic heading-level 
</text>
<text>   &quot;UNREGISTERED::James Clark//Characteristic::heading-level&quot; 0)
</text>
<text>
</text>
<text>(declare-characteristic page-number-format
</text>
<text>   &quot;UNREGISTERED::James Clark//Characteristic::page-number-format&quot; &quot;1&quot;)
</text>
<text>
</text>
<text>(declare-characteristic page-number-restart?
</text>
<text>   &quot;UNREGISTERED::James Clark//Characteristic::page-number-restart?&quot; #f)
</text>
<text>
</text>
<text>(declare-characteristic page-two-side?
</text>
<text>   &quot;UNREGISTERED::OpenJade//Characteristic::page-two-side?&quot; %two-side%)
</text>
<text>
</text>
<text>(declare-characteristic two-side-start-on-right?
</text>
<text>   &quot;UNREGISTERED::OpenJade//Characteristic::two-side-start-on-right?&quot; %two-side%)
</text>
<text>
</text>
<text>(declare-characteristic page-n-columns
</text>
<text>   &quot;UNREGISTERED::James Clark//Characteristic::page-n-columns&quot; 1)
</text>
<text>
</text>
<text>(declare-characteristic page-column-sep
</text>
<text>   &quot;UNREGISTERED::James Clark//Characteristic::page-column-sep&quot; %page-column-sep%)
</text>
<text>
</text>
<text>(declare-characteristic page-balance-columns?
</text>
<text>   &quot;UNREGISTERED::James Clark//Characteristic::page-balance-columns?&quot; %page-balance-columns?%)
</text>
<text>
</text>
<text>;; This allows bottom-of-page footnotes
</text>
<text>(declare-flow-object-class page-footnote
</text>
<text>      &quot;UNREGISTERED::Sebastian Rahtz//Flow Object Class::page-footnote&quot;)
</text>
<text>
</text>
<text>;; This allows formal objects to float
</text>
<text>(declare-flow-object-class page-float
</text>
<text>      &quot;UNREGISTERED::Sebastian Rahtz//Flow Object Class::page-float&quot;)
</text>
<text>
</text>
<text>(define read-entity
</text>
<text>  (external-procedure &quot;UNREGISTERED::James Clark//Procedure::read-entity&quot;))
</text>
<text>
</text>
<text>(define all-element</text>
<text>-number
</text>
<text>  (external-procedure &quot;UNREGISTERED::James Clark//Procedure::all-element-number&quot;))
</text>
<text>
</text>
<text>(define debug
</text>
<text>  (external-procedure &quot;UNREGISTERED::James Clark//Procedure::debug&quot;))
</text>
<text>
</text>
<text>;; Make text that comes from unimplemented tags easy to spot
</text>
<text>(default
</text>
<text>  (let* ((colr-space (color-space 
</text>
<text>		      &quot;ISO/IEC 10179:1996//Color-Space Family::Device RGB&quot;))
</text>
<text>	 (red (color colr-space 1 0 0)))
</text>
<text>    (make sequence
</text>
<text>      color: red
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>;; $Id: dbcommon.dsl,v 1.12 2003/01/15 07:17:37 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>;; This file contains general functions common to both print and HTML
</text>
<text>;; versions of the DocBook stylesheets.
</text>
<text>;;
</text>
<text>
</text>
<text>;; If **ANY** change is made to this file, you _MUST_ alter the
</text>
<text>;; following definition:
</text>
<text>
</text>
<text>(define %docbook-common-version%
</text>
<text>  &quot;Modular DocBook Stylesheet Common Functions&quot;)
</text>
<text>
</text>
<text>;; === element lists ====================================================
</text>
<text>
</text>
<text>;; these have to be functions because they have to be evaluated when
</text>
<text>;; there is a current-node so that normalize can know what declaration
</text>
<text>;; is in effect
</text>
<text>
</text>
<text>(define (set-element-list)
</text>
<text>  (list (normalize &quot;set&quot;)))
</text>
<text>
</text>
<text>(define (book-element-list)
</text>
<text>  (list (normalize &quot;book&quot;)))
</text>
<text>
</text>
<text>(define (division-element-list)
</text>
<text>  (list (normalize &quot;part&quot;)))
</text>
<text>
</text>
<text>(define (component-element-list)
</text>
<text>  (list (normalize &quot;preface&quot;)
</text>
<text>	(normalize &quot;chapter&quot;)
</text>
<text>	(normalize &quot;appendix&quot;) 
</text>
<text>	(normalize &quot;article&quot;)
</text>
<text>	(normalize &quot;glossary&quot;)
</text>
<text>	(normalize &quot;bibliography&quot;)
</text>
<text>	(normalize &quot;index&quot;)
</text>
<text>	(normalize &quot;colophon&quot;)
</text>
<text>	(normalize &quot;setindex&quot;)
</text>
<text>	(normalize &quot;reference&quot;)
</text>
<text>	(normalize &quot;refentry&quot;)
</text>
<text>	(normalize &quot;book&quot;))) ;; just in case nothing else matches...
</text>
<text>
</text>
<text>(define (major-component-element-list)
</text>
<text>  (list (normalize &quot;preface&quot;)
</text>
<text>	(normalize &quot;chapter&quot;) 
</text>
<text>	(normalize &quot;appendix&quot;) 
</text>
<text>	(normalize &quot;article&quot;)
</text>
<text>	(normalize &quot;glossary&quot;)
</text>
<text>	(normalize &quot;bibliography&quot;)
</text>
<text>	(normalize &quot;index&quot;)
</text>
<text>	(normalize &quot;colophon&quot;)
</text>
<text>	(normalize &quot;setindex&quot;)
</text>
<text>	(normalize &quot;reference&quot;)
</text>
<text>	(normalize &quot;refentry&quot;)
</text>
<text>	(normalize &quot;part&quot;)
</text>
<text>	(normalize &quot;book&quot;))) ;; just in case nothing else matches...
</text>
<text>
</text>
<text>(define (section-element-list)
</text>
<text>  (list (normalize &quot;sect1&quot;)
</text>
<text>	(normalize &quot;sect2&quot;)
</text>
<text>	(normalize &quot;sect3&quot;) 
</text>
<text>	(normalize &quot;sect4&quot;)
</text>
<text>	(normalize &quot;sect5&quot;)
</text>
<text>	(normalize &quot;section&quot;)
</text>
<text>	(normalize &quot;simplesect&quot;)
</text>
<text>	(normalize &quot;refsect1&quot;) 
</text>
<text>	(normalize &quot;refsect2&quot;) 
</text>
<text>	(normalize &quot;refsect3&quot;)))
</text>
<text>
</text>
<text>(define (block-element-list)
</text>
<text>  (list (normalize &quot;example&quot;) 
</text>
<text>	(normalize &quot;figure&quot;) 
</text>
<text>	(normalize &quot;table&quot;) 
</text>
<text>	(normalize &quot;equation&quot;) 
</text>
<text>	(normalize &quot;procedure&quot;)))
</text>
<text>
</text>
<text>(define (outer-parent-list)
</text>
<text>  (list (normalize &quot;toc&quot;) 
</text>
<text>	(normalize &quot;lot&quot;) 
</text>
<text>	(normalize &quot;appendix&quot;) 
</text>
<text>	(normalize &quot;chapter&quot;) 
</text>
<text>	(normalize &quot;part&quot;) 
</text>
<text>	(normalize &quot;preface&quot;) 
</text>
<text>	(normalize &quot;reference&quot;)
</text>
<text>	(normalize &quot;bibliography&quot;) 
</text>
<text>	(normalize &quot;glossary&quot;) 
</text>
<text>	(normalize &quot;index&quot;) 
</text>
<text>	(normalize &quot;setindex&quot;)
</text>
<text>	(normalize &quot;sect1&quot;) 
</text>
<text>	(normalize &quot;sect2&quot;) 
</text>
<text>	(normalize &quot;sect3&quot;) 
</text>
<text>	(normalize &quot;sect4&quot;) 
</text>
<text>	(normalize &quot;sect5&quot;) 
</text>
<text>	(normalize &quot;simplesect&quot;)
</text>
<text>	(normalize &quot;partintro&quot;) 
</text>
<text>	(normalize &quot;bibliodiv&quot;) 
</text>
<text>	(normalize &quot;glossdiv&quot;) 
</text>
<text>	(normalize &quot;indexdiv&quot;)
</text>
<text>	(normalize &quot;refentry&quot;) 
</text>
<text>	(normalize &quot;refsect1&quot;) 
</text>
<text>	(normalize &quot;refsect2&quot;) 
</text>
<text>	(normalize &quot;refsect3&quot;)
</text>
<text>	(normalize &quot;msgtext&quot;) 
</text>
<text>	(normalize &quot;msgexplan&quot;)))
</text>
<text>
</text>
<text>(define (list-element-list)
</text>
<text>  (list (normalize &quot;orderedlist&quot;) 
</text>
<text>	(normalize &quot;itemizedlist&quot;) 
</text>
<text>	(normalize &quot;variablelist&quot;) 
</text>
<text>	(normalize &quot;segmentedlist&quot;)
</text>
<text>        (normalize &quot;simplelist&quot;) 
</text>
<text>	(normalize &quot;calloutlist&quot;) 
</text>
<text>	(normalize &quot;step&quot;)))
</text>
<text>
</text>
<text>(define (info-element-list)
</text>
<text>  (list (normalize &quot;appendixinfo&quot;)
</text>
<text>	(normalize &quot;articleinfo&quot;)
</text>
<text>	(normalize </text>
<text>&quot;bibliographyinfo&quot;)
</text>
<text>	(normalize &quot;bookinfo&quot;)
</text>
<text>	(normalize &quot;chapterinfo&quot;)
</text>
<text>	(normalize &quot;glossaryinfo&quot;)
</text>
<text>	(normalize &quot;indexinfo&quot;)
</text>
<text>	(normalize &quot;objectinfo&quot;)
</text>
<text>	(normalize &quot;partinfo&quot;)
</text>
<text>	(normalize &quot;prefaceinfo&quot;)
</text>
<text>	(normalize &quot;refentryinfo&quot;)
</text>
<text>	(normalize &quot;referenceinfo&quot;)
</text>
<text>	(normalize &quot;refsect1info&quot;)
</text>
<text>	(normalize &quot;refsect2info&quot;)
</text>
<text>	(normalize &quot;refsect3info&quot;)
</text>
<text>	(normalize &quot;refsynopsisdivinfo&quot;)
</text>
<text>	(normalize &quot;sect1info&quot;)
</text>
<text>	(normalize &quot;sect2info&quot;)
</text>
<text>	(normalize &quot;sect3info&quot;)
</text>
<text>	(normalize &quot;sect4info&quot;)
</text>
<text>	(normalize &quot;sect5info&quot;)
</text>
<text>	(normalize &quot;sectioninfo&quot;)
</text>
<text>	(normalize &quot;setindexinfo&quot;)
</text>
<text>	(normalize &quot;setinfo&quot;)
</text>
<text>	(normalize &quot;sidebarinfo&quot;)
</text>
<text>	;; historical
</text>
<text>	(normalize &quot;artheader&quot;)
</text>
<text>	(normalize &quot;docinfo&quot;)))
</text>
<text>
</text>
<text>;; === automatic TOC ====================================================
</text>
<text>
</text>
<text>;; Returns #t if nd should appear in the auto TOC
</text>
<text>(define (appears-in-auto-toc? nd)
</text>
<text>  (if (or (equal? (gi nd) (normalize &quot;refsect1&quot;))
</text>
<text>	  (have-ancestor? (normalize &quot;refsect1&quot;) nd))
</text>
<text>      #f
</text>
<text>      #t))
</text>
<text>
</text>
<text>;; # return elements of nl for which appears-in-auto-toc? is #t
</text>
<text>(define (toc-list-filter nodelist)
</text>
<text>  (let loop ((toclist (empty-node-list)) (nl nodelist))
</text>
<text>    (if (node-list-empty? nl)
</text>
<text>	toclist
</text>
<text>	(if (appears-in-auto-toc? (node-list-first nl))
</text>
<text>	    (loop (node-list toclist (node-list-first nl))
</text>
<text>		  (node-list-rest nl))
</text>
<text>	    (loop toclist (node-list-rest nl))))))
</text>
<text>  
</text>
<text>;; === common ===========================================================
</text>
<text>
</text>
<text>(define (INLIST?)
</text>
<text>  (has-ancestor-member? (current-node) (list-element-list)))
</text>
<text>
</text>
<text>(define (INBLOCK?)
</text>
<text>  (has-ancestor-member? (current-node) 
</text>
<text>			(list (normalize &quot;example&quot;) 
</text>
<text>			      (normalize &quot;informalexample&quot;)
</text>
<text>			      (normalize &quot;figure&quot;) 
</text>
<text>			      (normalize &quot;informalfigure&quot;)
</text>
<text>			      (normalize &quot;equation&quot;)
</text>
<text>			      (normalize &quot;informalequation&quot;)
</text>
<text>			      (normalize &quot;funcsynopsis&quot;)
</text>
<text>			      (normalize </text>
<text>&quot;programlistingco&quot;)
</text>
<text>			      (normalize &quot;screenco&quot;)
</text>
<text>			      (normalize &quot;graphicco&quot;))))
</text>
<text>
</text>
<text>(define (PARNUM)
</text>
<text>  (child-number (parent (current-node))))
</text>
<text>
</text>
<text>(define (NESTEDFNUM n fmt)
</text>
<text>  (if (number? n)
</text>
<text>      (format-number n fmt)
</text>
<text>      #f))
</text>
<text>
</text>
<text>(define (FNUM n) (NESTEDFNUM n &quot;1&quot;))
</text>
<text>
</text>
<text>(define (book-start?)
</text>
<text>  ;; Returns #t if the current-node is in the first division or 
</text>
<text>  ;; component of a book.
</text>
<text>  (let ((book (ancestor (normalize &quot;book&quot;)))
</text>
<text>	(nd   (ancestor-member 
</text>
<text>	       (current-node) 
</text>
<text>	       (append (component-element-list) (division-element-list)))))
</text>
<text>    (let loop ((ch (children book)))
</text>
<text>      (if (node-list-empty? ch)
</text>
<text>	  #f
</text>
<text>	  (if (member (gi (node-list-first ch)) 
</text>
<text>		      (append (component-element-list) (division-element-list)))
</text>
<text>	      (node-list=? (node-list-first ch) nd)
</text>
<text>	      (loop (node-list-rest ch)))))))
</text>
<text>
</text>
<text>(define (first-chapter?)
</text>
<text>  ;; Returns #t if the current-node is in the first chapter of a book
</text>
<text>  (let* ((book (ancestor (normalize &quot;book&quot;)))
</text>
<text>	 (nd   (ancestor-member 
</text>
<text>		(current-node) 
</text>
<text>		(append (component-element-list) (division-element-list))))
</text>
<text>	 (bookch (children book))
</text>
<text>	 (bookcomp (expand-children bookch (list (normalize &quot;part&quot;)))))
</text>
<text>    (let loop ((nl bookcomp))
</text>
<text>      (if (node-list-empty? nl)
</text>
<text>	  #f
</text>
<text>	  (if (equal? (gi (node-list-first nl)) (normalize &quot;chapter&quot;))
</text>
<text>	      (if (node-list=? (node-list-first nl) nd)
</text>
<text>		  #t
</text>
<text>		  #f)
</text>
<text>	      (loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>;; === bibliographic ====================================================
</text>
<text>
</text>
<text>;; Localized author-string
</text>
<text>
</text>
<text>(define (author-list-string #!optional (author (current-node)))
</text>
<text>  ;; Return a formatted string representation of the contents of AUTHOR
</text>
<text>  ;; *including appropriate punctuation* if the AUTHOR occurs in a list
</text>
<text>  ;; of AUTHORs in an AUTHORGROUP:
</text>
<text>  ;;
</text>
<text>  ;;   John Doe
</text>
<text>  ;; or
</text>
<text>  ;;   John Doe and Jane Doe
</text>
<text>  ;; or
</text>
<text>  ;;   John Doe, Jane Doe, and A. Nonymous
</text>
<text>  ;;
</text>
<text>
</text>
<text>  (let* ((author-node-list (select-elements
</text>
<text>			    (descendants 
</text>
<text>			     (ancestor (normalize &quot;authorgroup&quot;) author))
</text>
<text>			    (normalize &quot;author&quot;)))
</text>
<text>	 (corpauthor-node-list (select-elements
</text>
<text>				(descendants 
</text>
<text>				 (ancestor (normalize &quot;authorgroup&quot;) author))
</text>
<text>				(normalize &quot;corpauthor&quot;)))
</text>
<text>	 (othercredit-node-list (select-elements
</text>
<text>				 (descendants 
</text>
<text>				  (ancestor (normalize &quot;authorgroup&quot;) author))
</text>
<text>				 (normalize &quot;othercredit&quot;)))
</text>
<text>	 (editor-node-list (select-elements
</text>
<text>			    (descendants 
</text>
<text>			     (ancestor (normalize &quot;authorgroup&quot;)))
</text>
<text>			    (normalize &quot;editor&quot;)))
</text>
<text>	 (author-count (if (have-ancestor? (normalize &quot;authorgroup&quot;) author)
</text>
<text>			   (+ (node-list-length author-node-list)
</text>
<text>			      (node-list-length corpauthor-node-list)
</text>
<text>			      (node-list-length othercredit-node-list)
</text>
<text>			      (node-list-length editor-node-list))
</text>
<text>			   1))
</text>
<text>	 (this-count (if (have-ancestor? (normalize &quot;authorgroup&quot;) author)
</text>
<text>			 (+ (node-list-length (preced author)) 1)
</text>
<text>			 1)))
</text>
<text>    (string-append
</text>
<text>     (if (and (&gt; author-count 1)
</text>
<text>	      (last-sibling? author))
</text>
<text>	 (string-append (gentext-and) &quot; &quot;)
</text>
<text>	 &quot;&quot;)
</text>
<text>
</text>
<text>     (author-string author)
</text>
<text>
</text>
<text>     (if (&gt; author-count 2)
</text>
<text>	 (if (&gt; (- author-count this-count) 1)
</text>
<text>	     (gentext-listcomma)
</text>
<text>	     (if (= (- author-count this-count) 1)
</text>
<text>		 (gentext-lastlistcomma)
</text>
<text>		 &quot;&quot;))
</text>
<text>	 &quot;&quot;)
</text>
<text>     (if (and (&gt; author-count 1)
</text>
<text>	      (not (last-sibling? author)))
</text>
<text>	 &quot; &quot;
</text>
<text>	 &quot;&quot;))))
</text>
<text>
</text>
<text>;; === procedures =======================================================
</text>
<text>
</text>
<text>(define ($proc-hierarch-number-format$ depth)
</text>
<text>  (case (modulo depth 5)
</text>
<text>    ((1) &quot;1&quot;)
</text>
<text>    ((2) &quot;a&quot;)
</text>
<text>    ((3) &quot;i&quot;)
</text>
<text>    ((4) &quot;A&quot;)
</text>
<text>    (else &quot;I&quot;)))
</text>
<text>
</text>
<text>(define ($proc-hierarch-number$ nd seperator)
</text>
<text>  (if (equal? (gi nd) (normalize &quot;step&quot;))
</text>
<text>      (string-append
</text>
<text>       (format-number
</text>
<text>	(child</text>
<text>-number nd) 
</text>
<text>	($proc-hierarch-number-format$ ($proc-step-depth$ nd)))
</text>
<text>       seperator)
</text>
<text>      &quot;&quot;))
</text>
<text>
</text>
<text>(define ($proc-step-depth$ nd)
</text>
<text>  (let loop ((step nd) (depth 0))
</text>
<text>    (if (equal? (gi step) (normalize &quot;procedure&quot;))
</text>
<text>	depth
</text>
<text>	(loop (parent step) 
</text>
<text>	      (if (equal? (gi step) (normalize &quot;step&quot;))
</text>
<text>		  (+ depth 1)
</text>
<text>		  depth)))))
</text>
<text>
</text>
<text>(define ($proc-step-number$ nd)
</text>
<text>  (let* ((step (if (equal? (gi nd) (normalize &quot;step&quot;)) nd (parent nd)))
</text>
<text>	 (str ($proc-hierarch-number$ step &quot;&quot;)))
</text>
<text>    (string-append str (gentext-label-title-sep (normalize &quot;step&quot;)))))
</text>
<text>
</text>
<text>(define ($proc-step-xref-number$ nd)
</text>
<text>  (let loop ((step nd) (str &quot;&quot;) (first #t))
</text>
<text>    (if (equal? (gi step) (normalize &quot;procedure&quot;))
</text>
<text>	str
</text>
<text>	(loop (parent step) 
</text>
<text>	      (if (equal? (gi step) (normalize &quot;step&quot;))
</text>
<text>		  (string-append 
</text>
<text>		   ($proc-hierarch-number$ step
</text>
<text>				      (if first
</text>
<text>					  &quot;&quot;
</text>
<text>					  (gentext-intra-label-sep (normalize &quot;step&quot;))))
</text>
<text>		   str)
</text>
<text>		  str)
</text>
<text>	      (if (equal? (gi step) (normalize &quot;step&quot;))
</text>
<text>		  #f
</text>
<text>		  first)))))
</text>
<text>
</text>
<text>;; === sections =========================================================
</text>
<text>
</text>
<text>(define (section-level-by-gi chunked? gi)
</text>
<text>  ;; Figure out the heading level of an element by its name.  We need
</text>
<text>  ;; to distinguish between the chunked processing mode (for HTML) and
</text>
<text>  ;; the non-chunked (print or HTML).  It is important that no heading
</text>
<text>  ;; level is skipped in a document structure (e.g., sect1 = 2, sect2
</text>
<text>  ;; = 4); this results in broken PDF bookmarks.
</text>
<text>  (if chunked?
</text>
<text>      (cond
</text>
<text>       ((equal? gi (normalize &quot;sect5&quot;)) 5)
</text>
<text>       ((equal? gi (normalize &quot;sect4&quot;)) 4)
</text>
<text>       ((equal? gi (normalize &quot;sect3&quot;)) 3)
</text>
<text>       ((equal? gi (normalize &quot;sect2&quot;)) 2)
</text>
<text>       ((equal? gi (normalize &quot;sect1&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;refsect3&quot;)) 4)
</text>
<text>       ((equal? gi (normalize &quot;refsect2&quot;)) 3)
</text>
<text>       ((equal? gi (normalize &quot;refsect1&quot;)) 2)
</text>
<text>       ((equal?</text>
<text> gi (normalize &quot;refsynopsisdiv&quot;)) 2)
</text>
<text>       ((equal? gi (normalize &quot;bibliography&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;bibliodiv&quot;)) 2)
</text>
<text>       ((equal? gi (normalize &quot;index&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;setindex&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;indexdiv&quot;)) 2)
</text>
<text>       (else 1))
</text>
<text>      (cond
</text>
<text>       ((equal? gi (normalize &quot;sect5&quot;)) 6)
</text>
<text>       ((equal? gi (normalize &quot;sect4&quot;)) 5)
</text>
<text>       ((equal? gi (normalize &quot;sect3&quot;)) 4)
</text>
<text>       ((equal? gi (normalize &quot;sect2&quot;)) 3)
</text>
<text>       ((equal? gi (normalize &quot;sect1&quot;)) 2)
</text>
<text>       ;; The next four are not used by the HTML stylesheets.
</text>
<text>       ((equal? gi (normalize &quot;refsect3&quot;)) 5)
</text>
<text>       ((equal? gi (normalize &quot;refsect2&quot;)) 4)
</text>
<text>       ((equal? gi (normalize &quot;refsect1&quot;)) 3)
</text>
<text>       ((equal? gi (normalize &quot;refsynopsisdiv&quot;)) 3)
</text>
<text>       ((equal? gi (normalize &quot;bibliography&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;bibliodiv&quot;)) 2)
</text>
<text>       ((equal? gi (normalize &quot;index&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;setindex&quot;)) 1)
</text>
<text>       ((equal? gi (normalize &quot;indexdiv&quot;)) 2)
</text>
<text>       (else 1))))
</text>
<text>
</text>
<text>(define (section-level-by-node chunked? sect)
</text>
<text>  (if (equal? (gi sect) (normalize &quot;section&quot;))
</text>
<text>      ;; Section is special, it is recursive.
</text>
<text>      (let ((depth (length (hierarchical-number-recursive 
</text>
<text>			    (normalize &quot;section&quot;)))))
</text>
<text>	(if (&gt; depth 5)
</text>
<text>	    6
</text>
<text>	    (if chunked? (+ depth 1) (+ depth 2))))
</text>
<text>      (if (equal? (gi sect) (normalize &quot;simplesect&quot;))
</text>
<text>	  ;; SimpleSect is special, it should be level &quot;n+1&quot;, where &quot;n&quot; is
</text>
<text>	  ;; the level of the numbered section that contains it.  If it is
</text>
<text>	  ;; the *first* sectioning element in a chapter, make it 
</text>
<text>	  ;; %default-simplesect-level%
</text>
<text>          (cond
</text>
<text>           ((have-ancestor? (normalize &quot;sect5&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;sect5&quot;))))
</text>
<text>           ((have-ancestor? (normalize &quot;sect4&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;sect4&quot;))))
</text>
<text>           ((have</text>
<text>-ancestor? (normalize &quot;sect3&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;sect3&quot;))))
</text>
<text>           ((have-ancestor? (normalize &quot;sect2&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;sect2&quot;))))
</text>
<text>           ((have-ancestor? (normalize &quot;sect1&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;sect1&quot;))))
</text>
<text>           ((have-ancestor? (normalize &quot;refsect3&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;refsect3&quot;))))
</text>
<text>           ((have-ancestor? (normalize &quot;refsect2&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;refsect2&quot;))))
</text>
<text>           ((have-ancestor? (normalize &quot;refsect1&quot;))
</text>
<text>	    (+ 1 (section-level-by-gi chunked? (normalize &quot;refsect1&quot;))))
</text>
<text>           (else %default-simplesect-level%))
</text>
<text>	  ;; the rest of the section elements can be identified by name
</text>
<text>	  (section-level-by-gi chunked? (gi sect)))))
</text>
<text>  
</text>
<text>;; === synopsis =========================================================
</text>
<text>
</text>
<text>;; The following definitions match those given in the reference
</text>
<text>;; documentation for DocBook V3.0
</text>
<text>(define	%arg-choice-opt-open-str% &quot;[&quot;)
</text>
<text>(define	%arg-choice-opt-close-str% &quot;]&quot;)
</text>
<text>(define	%arg-choice-req-open-str% &quot;{&quot;)
</text>
<text>(define	%arg-choice-req-close-str% &quot;}&quot;)
</text>
<text>(define	%arg-choice-plain-open-str% &quot; &quot;)
</text>
<text>(define	%arg-choice-plain-close-str% &quot; &quot;)
</text>
<text>(define	%arg-choice-def-open-str% &quot;[&quot;)
</text>
<text>(define	%arg-choice-def-close-str% &quot;]&quot;)
</text>
<text>(define	%arg-rep-repeat-str% &quot;...&quot;)
</text>
<text>(define	%arg-rep-norepeat-str% &quot;&quot;)
</text>
<text>(define	%arg-rep-def-str% &quot;&quot;)
</text>
<text>(define %arg-or-sep% &quot; | &quot;)
</text>
<text>(define %cmdsynopsis-hanging-indent% 4pi)
</text>
<text>
</text>
<text>;; === linking ==========================================================
</text>
<text>
</text>
<text>;; From the DocBook V3.0 Reference entry for element XREF:
</text>
<text>;;
</text>
<text>;; Description
</text>
<text>;;
</text>
<text>;;   Cross reference link to another part of the document. XRef is empty,
</text>
<text>;;   and has common, Linkend, and Endterm attributes.
</text>
<text>;;
</text>
<text>;;   Processing Expectations
</text>
<text>;;
</text>
<text>;;   XRef must have a Linkend, but the </text>
<text>Endterm is optional. If it is used,
</text>
<text>;;   the content of the element it points to is displayed as the text of
</text>
<text>;;   the cross reference; if it is absent, the XRefLabel of the
</text>
<text>;;   cross-referenced object is displayed.
</text>
<text>;;
</text>
<text>;; If neither the ENDTERM nor the XREFLABEL is present, then the cross
</text>
<text>;; reference text is taken from the (gentext-xref-strings) function
</text>
<text>;; in the localization file, like this
</text>
<text>;; 
</text>
<text>;; A cross reference to an element, the target, begins with the
</text>
<text>;; text returned by (gentext-xref-strings (gi target)).  Within
</text>
<text>;; that text, the following substitutions are made:
</text>
<text>;; 
</text>
<text>;; %p is replaced by the number of the page on which target occurs
</text>
<text>;; %g is replaced by the (gentext-element-name)
</text>
<text>;; %n is replaced by the label
</text>
<text>;; %t is replaced by the title
</text>
<text>;;
</text>
<text>;; After the &quot;direct&quot; cross reference, a number of indirect references
</text>
<text>;; are possible.  If the target element is in a different block, section,
</text>
<text>;; component, division, or book an indirect cross reference may be made.
</text>
<text>;;
</text>
<text>;; The indirect cross reference will only be made if
</text>
<text>;;
</text>
<text>;;   (auto-xref-indirect? target ancestor) 
</text>
<text>;;
</text>
<text>;; returns #t. The indirect reference is created by appending the
</text>
<text>;; connect returned by (auto-xref-indirect-connector) to the direct
</text>
<text>;; reference and then adding a direct refernce to the ancestor.
</text>
<text>;; The process is repeated for each ancestral element.
</text>
<text>;;
</text>
<text>;; For example, if a direct reference to a section returns
</text>
<text>;;
</text>
<text>;;    &quot;the section called %t&quot;
</text>
<text>;;
</text>
<text>;; and a direct reference to a chapter returns 
</text>
<text>;;
</text>
<text>;;    &quot;Chapter %n&quot;
</text>
<text>;;
</text>
<text>;; and (auto-xref-indirect? sect1 chapter) returns #t, and 
</text>
<text>;; (auto-xref-indirect-connector chapter) returns &quot;in&quot;, then
</text>
<text>;; an xref to a section in another chapter will be:
</text>
<text>;;
</text>
<text>;;    &quot;the section called %t in Chapter %n&quot;
</text>
<text>;;
</text>
<text>;; Where %t and %n will be filled in accordingly.
</text>
<text>;;
</text>
<text>;; </text>
<text>======================================================================
</text>
<text>
</text>
<text>(define (auto-xref-indirect? target ancestor)
</text>
<text>  ;; This function answers the question: should an indirect reference
</text>
<text>  ;; to ancestor be made for target?  For example:
</text>
<text>  ;;
</text>
<text>  ;; (auto-xref-indirect? SECT1 CHAP)
</text>
<text>  ;;
</text>
<text>  ;; should return #t iff a reference of the form &quot;in [CHAP-xref]&quot; should
</text>
<text>  ;; be generated for a reference to SECT1 if SECT1 is in a different
</text>
<text>  ;; chapter than the XREF to SECT1.
</text>
<text>  ;;
</text>
<text>  ;; This function _does not_ have to consider the case of whether or
</text>
<text>  ;; not target and the xref are in the same ancestor.  
</text>
<text>  ;;
</text>
<text>  (cond
</text>
<text>   ;; Always add indirect references to another book
</text>
<text>   ((member (gi ancestor) (book-element-list))
</text>
<text>    #t)
</text>
<text>   ;; Add indirect references to the section or component a block
</text>
<text>   ;; is in iff chapters aren't autolabelled.  (Otherwise &quot;Figure 1-3&quot;
</text>
<text>   ;; is sufficient)
</text>
<text>   ((and (member (gi target) (block-element-list))
</text>
<text>	 (not %chapter-autolabel%))
</text>
<text>    #t)
</text>
<text>   ;; Add indirect references to the component a section is in if
</text>
<text>   ;; the sections are not autolabelled
</text>
<text>   ((and (member (gi target) (section-element-list))
</text>
<text>	 (member (gi ancestor) (component-element-list))
</text>
<text>	 (not %section-autolabel%))
</text>
<text>    #t)
</text>
<text>   (else #f)))
</text>
<text>
</text>
<text>(define (auto-xref-direct target 
</text>
<text>			  #!optional 
</text>
<text>			  (xref-string (gentext-xref-strings target)))
</text>
<text>  (let* ((substitute (list
</text>
<text>		      (list &quot;%g&quot;  (element-gi-sosofo target))
</text>
<text>		      (list &quot;%n&quot;  (element-label-sosofo target))
</text>
<text>		      (list &quot;%p&quot;  (element-page-number-sosofo target))
</text>
<text>		      (list &quot;%t&quot;  (element-title-xref-sosofo target))))
</text>
<text>	 (tlist   (match-split-list xref-string (assoc-objs substitute))))
</text>
<text>    (string-list-sosofo tlist substitute)))
</text>
<text>
</text>
<text>(define (auto-xref-indirect target 
</text>
<text>			    #!optional
</text>
<text>			    (xref-string (gentext-xref-strings target)))
</text>
<text>  (make sequence
</text>
<text>    (auto-xref-indirect-connector </text>
<text>target)
</text>
<text>    (auto-xref-direct target xref-string)))
</text>
<text>
</text>
<text>(define (auto-xref target 
</text>
<text>		   #!optional (xref-string (gentext-xref-strings target)))
</text>
<text>  (let ((source (current-node))
</text>
<text>	(cont-blok (ancestor-member target (block-element-list)))
</text>
<text>	(cont-sect (ancestor-member target (section-element-list)))
</text>
<text>	(cont-comp (ancestor-member target (component-element-list)))
</text>
<text>	(cont-divn (ancestor-member target (division-element-list)))
</text>
<text>	(cont-book (ancestor-member target (book-element-list))))
</text>
<text>    (make sequence
</text>
<text>      (auto-xref-direct target xref-string)
</text>
<text>      (if (or (node-list=? cont-blok 
</text>
<text>			   (ancestor-member source (block-element-list)))
</text>
<text>	      (node-list=? cont-blok target)
</text>
<text>	      (not (auto-xref-indirect? target cont-blok)))
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (auto-xref-indirect cont-blok))
</text>
<text>      (if (or (node-list=? cont-sect 
</text>
<text>			   (ancestor-member source (section-element-list)))
</text>
<text>	      (node-list=? cont-sect target)
</text>
<text>	      (not (auto-xref-indirect? target cont-sect)))
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (auto-xref-indirect cont-sect))
</text>
<text>      (if (or (node-list=? cont-comp 
</text>
<text>			   (ancestor-member source (component-element-list)))
</text>
<text>	      (node-list=? cont-comp target)
</text>
<text>	      (not (auto-xref-indirect? target cont-comp)))
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (auto-xref-indirect cont-comp))
</text>
<text>      (if (or (node-list=? cont-divn 
</text>
<text>			   (ancestor-member source (division-element-list)))
</text>
<text>	      (node-list=? cont-divn target)
</text>
<text>	      (not (auto-xref-indirect? target cont-divn)))
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (auto-xref-indirect cont-divn))
</text>
<text>      (if (or (node-list=? cont-book 
</text>
<text>			   (ancestor-member source (book-element-list)))
</text>
<text>	      (node-list=? cont-book target)
</text>
<text>	      (not (auto-xref-indirect? target cont-book)))
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (auto-xref-indirect cont-book)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (set-number-restart-list cmp)       (list </text>
<text>(normalize &quot;set&quot;)))
</text>
<text>(define (book-number-restart-list cmp)      (list (normalize &quot;set&quot;)))
</text>
<text>(define (part-number-restart-list cmp)      (list (normalize &quot;book&quot;)))
</text>
<text>(define (reference-number-restart-list cmp) (list (normalize &quot;book&quot;)))
</text>
<text>(define (preface-number-restart-list cmp)   (list (normalize &quot;book&quot;)))
</text>
<text>(define (chapter-number-restart-list cmp)   (list (normalize &quot;book&quot;)))
</text>
<text>(define (appendix-number-restart-list cmp)  (list (normalize &quot;book&quot;) 
</text>
<text>						  (normalize &quot;article&quot;)))
</text>
<text>(define (article-number-restart-list cmp)   (list (normalize &quot;book&quot;)))
</text>
<text>(define (glossary-number-restart-list cmp)  (list (normalize &quot;book&quot;)))
</text>
<text>(define (bibliography-number-restart-list cmp) (list (normalize &quot;book&quot;)))
</text>
<text>(define (index-number-restart-list cmp)     (list (normalize &quot;book&quot;)))
</text>
<text>(define (setindex-number-restart-list cmp)  (list (normalize &quot;set&quot;)))
</text>
<text>(define (refentry-number-restart-list cmp)  (list (normalize &quot;reference&quot;)))
</text>
<text>(define (default-number-restart-list cmp)   (list (normalize &quot;book&quot;)))
</text>
<text>
</text>
<text>(define (component-number-restart-list cmp)
</text>
<text>  ;; Return the list of elements at which numbering of 'cmp' should reset.
</text>
<text>  ;; For example, for CHAPTER, it might return '(&quot;BOOK&quot;) causing chapters
</text>
<text>  ;; to be sequentially numbered across a book.  If it returned
</text>
<text>  ;; '(&quot;BOOK&quot; &quot;PART&quot;) then chapter numbering would restart at each 
</text>
<text>  ;; BOOK or PART.
</text>
<text>  (let ((name (gi cmp)))
</text>
<text>    (cond
</text>
<text>     ((equal? name (normalize &quot;set&quot;))       (set-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;book&quot;))      (book-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;part&quot;))      (part-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;reference&quot;)) (reference-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;preface&quot;))   (preface-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;chapter&quot;))   (chapter-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;appendix&quot;))  (appendix-number-restart-list cmp))
</text>
<text>     </text>
<text>((equal? name (normalize &quot;article&quot;))   (article-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;glossary&quot;))  (glossary-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;bibliography&quot;)) (bibliography-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;index&quot;))     (index-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;setindex&quot;))  (setindex-number-restart-list cmp))
</text>
<text>     ((equal? name (normalize &quot;refentry&quot;))  (refentry-number-restart-list cmp))
</text>
<text>     (else (default-number-restart-list cmp)))))
</text>
<text>
</text>
<text>(define (set-number-ignore-list cmp)       '())
</text>
<text>(define (book-number-ignore-list cmp)      '())
</text>
<text>(define (part-number-ignore-list cmp)      '())
</text>
<text>(define (reference-number-ignore-list cmp) (list (normalize &quot;part&quot;)))
</text>
<text>(define (preface-number-ignore-list cmp)   (list (normalize &quot;part&quot;)))
</text>
<text>(define (chapter-number-ignore-list cmp)   (list (normalize &quot;part&quot;)))
</text>
<text>(define (appendix-number-ignore-list cmp)  (list (normalize &quot;part&quot;)))
</text>
<text>(define (article-number-ignore-list cmp)   (list (normalize &quot;part&quot;)))
</text>
<text>(define (glossary-number-ignore-list cmp)  (list (normalize &quot;part&quot;)))
</text>
<text>(define (bibliography-number-ignore-list cmp) (list (normalize &quot;part&quot;)))
</text>
<text>(define (index-number-ignore-list cmp)     (list (normalize &quot;part&quot;)))
</text>
<text>(define (setindex-number-ignore-list cmp)  (list (normalize &quot;part&quot;)))
</text>
<text>(define (refentry-number-ignore-list cmp)  '())
</text>
<text>(define (default-number-ignore-list cmp)   '())
</text>
<text>
</text>
<text>(define (component-number-ignore-list cmp)
</text>
<text>  ;; Return the list of elements (inside the restart list) which are
</text>
<text>  ;; hierarchy levels which should be ignored.  For example, for CHAPTER,
</text>
<text>  ;; it might return '(&quot;PART&quot;) causing chapter numbering inside books
</text>
<text>  ;; to ignore parts.
</text>
<text>  ;;
</text>
<text>  ;; Basically, if you skip up past a component/division element in
</text>
<text>  ;; the restart list, you better put the element(s) you skipped in 
</text>
<text>  ;; the ignore list or the stylesheet may never see your component
</text>
<text>  ;; when it's trying </text>
<text>to do the numbering.
</text>
<text>  (let ((name (gi cmp)))
</text>
<text>    (cond
</text>
<text>     ((equal? name (normalize &quot;set&quot;))       (set-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;book&quot;))      (book-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;part&quot;))      (part-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;reference&quot;)) (reference-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;preface&quot;))   (preface-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;chapter&quot;))   (chapter-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;appendix&quot;))  (appendix-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;article&quot;))   (article-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;glossary&quot;))  (glossary-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;bibliography&quot;)) (bibliography-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;index&quot;))     (index-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;setindex&quot;))  (setindex-number-ignore-list cmp))
</text>
<text>     ((equal? name (normalize &quot;refentry&quot;))  (refentry-number-ignore-list cmp))
</text>
<text>     (else (default-number-ignore-list cmp)))))
</text>
<text>
</text>
<text>(define (set-number-sibling-list cmp)       '())
</text>
<text>(define (book-number-sibling-list cmp)      '())
</text>
<text>(define (part-number-sibling-list cmp)      '())
</text>
<text>(define (reference-number-sibling-list cmp) '())
</text>
<text>(define (preface-number-sibling-list cmp)   '())
</text>
<text>(define (chapter-number-sibling-list cmp)   '())
</text>
<text>(define (appendix-number-sibling-list cmp)  '())
</text>
<text>(define (article-number-sibling-list cmp)   '())
</text>
<text>(define (glossary-number-sibling-list cmp)  '())
</text>
<text>(define (bibliography-number-sibling-list cmp) '())
</text>
<text>(define (index-number-sibling-list cmp)     '())
</text>
<text>(define (setindex-number-sibling-list cmp)  '())
</text>
<text>(define (refentry-number-sibling-list cmp)  '())
</text>
<text>(define (default-number-sibling-list cmp)   '())
</text>
<text>
</text>
<text>(define (component-number-sibling-list cmp)
</text>
<text>  ;; Return the list of elements with which 'cmp'</text>
<text> should be numbered.
</text>
<text>  ;; For example, for PART it might return '(&quot;PART&quot; &quot;REFERENCE&quot;) causing
</text>
<text>  ;; sibling parts and references to be numbered together.
</text>
<text>  (let ((name (gi cmp)))
</text>
<text>    (cond
</text>
<text>     ((equal? name (normalize &quot;set&quot;))       (set-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;book&quot;))      (book-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;part&quot;))      (part-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;reference&quot;)) (reference-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;preface&quot;))   (preface-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;chapter&quot;))   (chapter-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;appendix&quot;))  (appendix-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;article&quot;))   (article-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;glossary&quot;))  (glossary-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;bibliography&quot;)) (bibliography-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;index&quot;))     (index-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;setindex&quot;))  (setindex-number-sibling-list cmp))
</text>
<text>     ((equal? name (normalize &quot;refentry&quot;))  (refentry-number-sibling-list cmp))
</text>
<text>     (else (default-number-sibling-list cmp)))))
</text>
<text>
</text>
<text>(define (component-number component-node)
</text>
<text>  (let* ((root  (ancestor-member component-node 
</text>
<text>				 (component-number-restart-list 
</text>
<text>				  component-node)))
</text>
<text>	 (clist (expand-children (children root) 
</text>
<text>				 (component-number-ignore-list
</text>
<text>				  component-node)))
</text>
<text>	 (slist (append (list (gi component-node))
</text>
<text>			(component-number-sibling-list component-node))))
</text>
<text>    (let loop ((nl clist) (count 1))
</text>
<text>      (if (node-list-empty? nl) 
</text>
<text>	  1
</text>
<text>	  (if (node-list=? (node-list-first nl) component-node)
</text>
<text>	      count
</text>
<text>	      (if (member (gi (node-list-first nl)) slist)
</text>
<text>		  (loop (node-list-rest nl) (+ count 1))
</text>
<text>		  (loop (node-list-rest nl) </text>
<text>count)))))))
</text>
<text>
</text>
<text>;; == components and divisions == 
</text>
<text>
</text>
<text>(define (set-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (book-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (part-autolabel nd #!optional (force-label? #f))
</text>
<text>  (format-number (component-number nd) (label-number-format nd)))
</text>
<text>
</text>
<text>(define (reference-autolabel nd #!optional (force-label? #f))
</text>
<text>  (format-number (component-number nd) (label-number-format nd)))
</text>
<text>
</text>
<text>(define (preface-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (chapter-autolabel nd #!optional (force-label? #f))
</text>
<text>  (if (or force-label? %chapter-autolabel%)
</text>
<text>      (format-number (component-number nd) (label-number-format nd))
</text>
<text>      &quot;&quot;))
</text>
<text>
</text>
<text>(define (appendix-autolabel nd #!optional (force-label? #f))
</text>
<text>  ;; Abandoned special processing for appendixes in articles. Maybe
</text>
<text>  ;; it's a good idea, but it can't be done here because it screws
</text>
<text>  ;; up cross references to appendixes.
</text>
<text>  (if (or force-label? %chapter-autolabel%)
</text>
<text>      (format-number (component-number nd) (label-number-format nd))
</text>
<text>      &quot;&quot;))
</text>
<text>
</text>
<text>(define (article-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (glossary-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (bibliography-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (index-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (indexdiv-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (colophon-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (setindex-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (refentry-autolabel nd #!optional (force-label? #f))
</text>
<text>  (let* ((isep       (gentext-intra-label-sep nd))
</text>
<text>	 (refnamediv (select-elements (children nd)
</text>
<text>				      (normalize &quot;refnamediv&quot;)))
</text>
<text>	 (refd       (select-elements (children refnamediv)
</text>
<text>				      (normalize &quot;refdescriptor&quot;)))
</text>
<text>	 (refnames   (select-elements (children refnamediv)
</text>
<text>				      (normalize &quot;refname&quot;))))
</text>
<text>    &quot;&quot;))
</text>
<text>
</text>
<text>;; == /components and divisions == 
</text>
<text>
</text>
<text>(define (dedication-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (bibliodiv-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (glossdiv-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (section-autolabel-prefix nd)
</text>
<text>  (let* ((isep   (gentext-intra-label-sep nd))
</text>
<text>	 (haschn (not (node-list-empty? (ancestor (normalize &quot;chapter&quot;) nd))))
</text>
<text>	 (hasapn (not (node-list-empty? (ancestor (normalize &quot;appendix&quot;) nd)))))
</text>
<text>    (cond
</text>
<text>     (haschn (string-append 
</text>
<text>	      (element-label (ancestor (normalize &quot;chapter&quot;) nd)) isep))
</text>
<text>     (hasapn (string-append 
</text>
<text>	      (element-label (ancestor (normalize &quot;appendix&quot;) nd)) isep))
</text>
<text>     (else &quot;&quot;))))
</text>
<text>
</text>
<text>(define (section-autolabel nd #!optional (force-label? #f))
</text>
<text>  (let* ((isep (gentext-intra-label-sep nd))
</text>
<text>	 (hasprf (not (node-list-empty? (ancestor (normalize &quot;preface&quot;) nd))))
</text>
<text>	 (prefix (section-autolabel-prefix nd)))
</text>
<text>    (if (and (or force-label? %section-autolabel%)
</text>
<text>	     (or %label-preface-sections%
</text>
<text>		 (not hasprf)))
</text>
<text>	(cond
</text>
<text>	 ((equal? (gi nd) (normalize &quot;sect1&quot;))
</text>
<text>	  (string-append prefix (format-number (child-number nd) 
</text>
<text>					       (label-number-format nd))))
</text>
<text>	 ((equal? (gi nd) (normalize &quot;sect2&quot;))
</text>
<text>	  (string-append 
</text>
<text>	   (element-label (ancestor (normalize &quot;sect1&quot;) nd) force-label?)
</text>
<text>	   isep 
</text>
<text>	   (format-number (child-number nd) (label-number-format nd))))
</text>
<text>	 ((equal? (gi nd) (normalize &quot;sect3&quot;))
</text>
<text>	  (string-append
</text>
<text>	   (element-label (ancestor (normalize &quot;sect2&quot;) nd) force-label?)
</text>
<text>	   isep 
</text>
<text>	   (format-number (child-number nd) (label-number-format nd))))
</text>
<text>	 ((equal? (gi nd) (normalize &quot;sect4&quot;))
</text>
<text>	  (string-append
</text>
<text>	   (element-label (ancestor (normalize &quot;sect3&quot;) nd) force-label?)
</text>
<text>	   isep 
</text>
<text>	   (format-number (child-number </text>
<text>nd) (label-number-format nd))))
</text>
<text>	 ((equal? (gi nd) (normalize &quot;sect5&quot;))
</text>
<text>	  (string-append 
</text>
<text>	   (element-label (ancestor (normalize &quot;sect4&quot;) nd) force-label?)
</text>
<text>	   isep 
</text>
<text>	   (format-number (child-number nd) (label-number-format nd))))
</text>
<text>
</text>
<text>	 ((equal? (gi nd) (normalize &quot;simplesect&quot;))
</text>
<text>	  (let* ((possible-sect-ancestors
</text>
<text>		  (node-list (ancestor (normalize &quot;section&quot;) nd)
</text>
<text>			     (ancestor (normalize &quot;sect5&quot;) nd)
</text>
<text>			     (ancestor (normalize &quot;sect4&quot;) nd)
</text>
<text>			     (ancestor (normalize &quot;sect3&quot;) nd)
</text>
<text>			     (ancestor (normalize &quot;sect2&quot;) nd)
</text>
<text>			     (ancestor (normalize &quot;sect1&quot;) nd)))
</text>
<text>		 (section-ancestor (node-list-first possible-sect-ancestors)))
</text>
<text>	    (if (node-list-empty? section-ancestor)
</text>
<text>		(string-append prefix (format-number (child-number nd) 
</text>
<text>						     (label-number-format nd)))
</text>
<text>		(string-append 
</text>
<text>		 (element-label section-ancestor force-label?)
</text>
<text>		 isep 
</text>
<text>		 (format-number (child-number nd) (label-number-format nd))))))
</text>
<text>
</text>
<text>	 ((equal? (gi nd) (normalize &quot;section&quot;))
</text>
<text>	  (if (node-list-empty? (ancestor (normalize &quot;section&quot;) nd))
</text>
<text>	      (string-append prefix (format-number (child-number nd) 
</text>
<text>						   (label-number-format nd)))
</text>
<text>	      (string-append 
</text>
<text>	       (element-label (ancestor (normalize &quot;section&quot;) nd) force-label?)
</text>
<text>	       isep 
</text>
<text>	       (format-number (child-number nd) (label-number-format nd)))))
</text>
<text>	 (else (string-append (gi nd) &quot; IS NOT A SECTION!&quot;)))
</text>
<text>	&quot;&quot;)))
</text>
<text>  
</text>
<text>(define (refsection-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (step-autolabel nd #!optional (force-label? #f))
</text>
<text>  ($proc-step-xref-number$ nd))
</text>
<text>
</text>
<text>(define (listitem-autolabel nd #!optional (force-label? #f))
</text>
<text>  (if (equal? (gi (parent nd)) (normalize &quot;orderedlist&quot;))
</text>
<text>      (number-&gt;string (child-number nd))
</text>
<text>      &quot;[xref to LISTITEM only supported in ORDEREDLIST]&quot;))
</text>
<text>
</text>
<text>(define (sidebar-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (legalnotice</text>
<text>-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (abstract-autolabel nd #!optional (force-label? #f))
</text>
<text>  &quot;&quot;)
</text>
<text>
</text>
<text>(define (block-autolabel nd #!optional (force-label? #f))
</text>
<text>  (let* ((chn    (element-label (ancestor (normalize &quot;chapter&quot;) nd)))
</text>
<text>	 (apn    (element-label (ancestor (normalize &quot;appendix&quot;) nd)))
</text>
<text>	 (rfn    (element-label (ancestor (normalize &quot;refentry&quot;) nd)))
</text>
<text>	 ;; If the root of this document isn't in component-element-list, these
</text>
<text>	 ;; things all wind up being numbered 0. To avoid that, we force the
</text>
<text>	 ;; root element to be in the list of components if it isn't already
</text>
<text>	 ;; a component.
</text>
<text>	 (incomp (member (gi (sgml-root-element)) (component-element-list)))
</text>
<text>	 ;; In articles in books, number blocks from book not from article.
</text>
<text>	 ;; Otherwise you get 1, 1, 1, 1, etc. for the first figure in each
</text>
<text>	 ;; article.
</text>
<text>	 (artinbook (and (not (node-list-empty? (ancestor (normalize &quot;article&quot;) nd)))
</text>
<text>			 (not (node-list-empty? (ancestor (normalize &quot;book&quot;) nd)))))
</text>
<text>
</text>
<text>	 (bkn    (if artinbook
</text>
<text>		     (format-number (component-child-number
</text>
<text>				     nd
</text>
<text>				     (list (normalize &quot;book&quot;)))
</text>
<text>				    (label-number-format nd))
</text>
<text>		     (if incomp
</text>
<text>			 (format-number (component-child-number
</text>
<text>					 nd
</text>
<text>					 (component-element-list))
</text>
<text>					(label-number-format nd))
</text>
<text>			 (format-number (component-child-number
</text>
<text>					 nd
</text>
<text>					 (append (component-element-list)
</text>
<text>						 (list (gi (sgml-root-element)))))
</text>
<text>					(label-number-format nd))))))
</text>
<text>    (if (equal? chn &quot;&quot;)
</text>
<text>	(if (equal? apn &quot;&quot;)
</text>
<text>	    (if (equal? rfn &quot;&quot;)
</text>
<text>		bkn
</text>
<text>		(string-append rfn (gentext-intra-label-sep nd) bkn))
</text>
<text>	    (string-append apn (gentext-intra-label-sep nd) bkn))
</text>
<text>	(string-append chn (gentext-intra-label-sep nd) bkn))))
</text>
<text>
</text>
<text>;; For all elements, if a LABEL attribute is present, that is the label
</text>
<text>;; that they get.  Otherwise:
</text>
<text>;; BOOK gets the Book volume, by book-autolabel
</text>
<text>;; PREFACE gets &quot;&quot;, by preface-autolabel
</text>
<text>;; CHAPTER gets the Chapter number, by chapter-autolabel
</text>
<text>;; APPENDIX gets the Appendix letter, by appendix-autolabel
</text>
<text>;; REFERENCE gets &quot;&quot;, by reference-autolabel
</text>
<text>;; REFENTRY gets &quot;&quot;, by refentry-autolabel
</text>
<text>;; SECT* gets the nested section number (e.g., 1.3.5), by section-autolabel
</text>
<text>;; REFSECT* gets the nested section number, by refsection-autolabel
</text>
<text>;; everything else gets numbered by block-autolabel
</text>
<text>;;
</text>
<text>(define (element-label #!optional (nd (current-node)) (force-label? #f))
</text>
<text>  (if (node-list-empty? nd)
</text>
<text>      &quot;&quot;
</text>
<text>      (let ((label (attribute-string (normalize &quot;label&quot;) nd)))
</text>
<text>	(if label
</text>
<text>	    label
</text>
<text>	    (cond
</text>
<text>	     ;; Use a seperately defined assoc list?
</text>
<text>	     ((equal? (gi nd) (normalize &quot;abstract&quot;))
</text>
<text>	      (abstract-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;appendix&quot;))
</text>
<text>	      (appendix-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;article&quot;))
</text>
<text>	      (article-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;bibliodiv&quot;))
</text>
<text>	      (bibliodiv-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;bibliography&quot;))
</text>
<text>	      (bibliography-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;book&quot;))
</text>
<text>	      (book-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;chapter&quot;))
</text>
<text>	      (chapter-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;dedication&quot;))
</text>
<text>	      (dedication-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;glossary&quot;))
</text>
<text>	      (glossary-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;glossdiv&quot;))
</text>
<text>	      (glossdiv-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;index&quot;))
</text>
<text>	      (index-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;colophon&quot;))
</text>
<text>	      (colophon-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;indexdiv&quot;))
</text>
<text>	      (indexdiv-autolabel nd force-label?))
</text>
<text>	     </text>
<text>((equal? (gi nd) (normalize &quot;setindex&quot;))
</text>
<text>	      (setindex-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;legalnotice&quot;))
</text>
<text>	      (legalnotice-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;listitem&quot;))
</text>
<text>	      (listitem-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;part&quot;))
</text>
<text>	      (part-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;preface&quot;))
</text>
<text>	      (preface-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;refentry&quot;))
</text>
<text>	      (refentry-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;reference&quot;))
</text>
<text>	      (reference-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;refsynopsisdiv&quot;))
</text>
<text>	      (refsection-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;refsect1&quot;))
</text>
<text>	      (refsection-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;refsect2&quot;))
</text>
<text>	      (refsection-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;refsect3&quot;))
</text>
<text>	      (refsection-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;sect1&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;sect2&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;sect3&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;sect4&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;sect5&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;section&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;simplesect&quot;))
</text>
<text>	      (section-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;set&quot;))
</text>
<text>	      (set-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;sidebar&quot;))
</text>
<text>	      (sidebar-autolabel nd force-label?))
</text>
<text>	     ((equal? (gi nd) (normalize &quot;step&quot;))
</text>
<text>	      (step-autolabel nd force-label?))
</text>
<text>	     (else (block-autolabel nd force-label?)))))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>;; Returns the element label as a sosofo
</text>
<text>;;
</text>
<text>(define (element-label-sosofo nd #!optional (force-label? #f))
</text>
<text>  (if (string=? (element-label nd force-label?) &quot;&quot;)
</text>
<text>      (empty-sosofo)
</text>
<text>      (make sequence
</text>
<text>	(literal (element-label nd force-label?)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (set-title nd)
</text>
<text>  (let* ((setinfo (select-elements (children nd) (normalize &quot;setinfo&quot;)))
</text>
<text>	 (sititles (select-elements  
</text>
<text>		    (expand-children (children setinfo) 
</text>
<text>				     (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>					    (normalize &quot;bibliomisc&quot;)
</text>
<text>					    (normalize &quot;biblioset&quot;)))
</text>
<text>		    (normalize &quot;title&quot;)))
</text>
<text>	 (settitles (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? settitles)
</text>
<text>		       sititles
</text>
<text>		       settitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (book-title nd)
</text>
<text>  (let* ((bookinfo (select-elements (children nd) (normalize &quot;bookinfo&quot;)))
</text>
<text>	 (bititles (select-elements  
</text>
<text>		    (expand-children (children bookinfo) 
</text>
<text>				     (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>					   (normalize &quot;bibliomisc&quot;)
</text>
<text>					   (normalize &quot;biblioset&quot;)))
</text>
<text>		    (normalize &quot;title&quot;)))
</text>
<text>	 (chtitles (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? chtitles)
</text>
<text>		       bititles
</text>
<text>		       chtitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (part-title nd)
</text>
<text>  (let* ((docinfo  (select-elements (children nd) (normalize &quot;docinfo&quot;)))
</text>
<text>	 (dititles (select-elements  
</text>
<text>		    (expand-children (children docinfo) 
</text>
<text>				     (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>					   (normalize &quot;bibliomisc&quot;)
</text>
<text>					   (normalize &quot;biblioset&quot;)))
</text>
<text>		    (normalize </text>
<text>&quot;title&quot;)))
</text>
<text>	 (chtitles (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? chtitles)
</text>
<text>		       dititles
</text>
<text>		       chtitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (article-title nd)
</text>
<text>  (let* ((artchild  (children nd))
</text>
<text>	 (artheader (select-elements artchild (normalize &quot;artheader&quot;)))
</text>
<text>	 (articleinfo (select-elements artchild (normalize &quot;articleinfo&quot;)))
</text>
<text>	 (ahtitles  (select-elements (children artheader) 
</text>
<text>				     (normalize &quot;title&quot;)))
</text>
<text>	 (aititles  (select-elements (children articleinfo) 
</text>
<text>				     (normalize &quot;title&quot;)))
</text>
<text>	 (artitles  (select-elements artchild (normalize &quot;title&quot;)))
</text>
<text>	 (titles    (if (node-list-empty? artitles)
</text>
<text>			(if (node-list-empty? ahtitles)
</text>
<text>			    aititles
</text>
<text>			    ahtitles)
</text>
<text>			artitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (preface-title nd)
</text>
<text>  (chapter-title nd))
</text>
<text>
</text>
<text>(define (chapter-title nd)
</text>
<text>  (let* ((docinfo  (select-elements (children nd) (normalize &quot;docinfo&quot;)))
</text>
<text>	 (dititles (select-elements  
</text>
<text>		    (expand-children (children docinfo) 
</text>
<text>				     (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>					   (normalize &quot;bibliomisc&quot;)
</text>
<text>					   (normalize &quot;biblioset&quot;)))
</text>
<text>		    (normalize &quot;title&quot;)))
</text>
<text>	 (chtitles (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? chtitles)
</text>
<text>		       dititles
</text>
<text>		       chtitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (appendix-title nd)
</text>
<text>  (chapter-title nd))
</text>
<text>
</text>
<text>(define (reference-title nd)
</text>
<text>  (chapter-title nd))
</text>
<text>
</text>
<text>(define (refsynopsisdiv-title nd)
</text>
<text>  (optional-title nd))
</text>
<text>
</text>
<text>;; Returns either the REFENTRYTITLE or the first REFNAME.
</text>
<text>;;
</text>
<text>(define (refentry-title nd)
</text>
<text>  (let* ((refmeta (select-elements (descendants nd) (normalize &quot;refmeta&quot;)))
</text>
<text>	 (refttl  (select-elements (descendants refmeta) (normalize &quot;refentrytitle&quot;)))
</text>
<text>	 (refndiv (select-elements (descendants nd) (normalize &quot;refnamediv&quot;)))
</text>
<text>	 (refname (select-elements (descendants refndiv) (normalize &quot;refname&quot;))))
</text>
<text>    (if (node-list-empty? refttl)
</text>
<text>	(if (node-list-empty? refname)
</text>
<text>	    &quot;&quot;
</text>
<text>	    (node-list-first refname))
</text>
<text>	(node-list-first refttl))))
</text>
<text>
</text>
<text>(define (optional-title nd)
</text>
<text>  (let* ((docinfo  (select-elements (children nd) (normalize &quot;docinfo&quot;)))
</text>
<text>	 (dititles (select-elements (children docinfo) (normalize &quot;title&quot;)))
</text>
<text>	 (chtitles (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? chtitles)
</text>
<text>		       dititles
</text>
<text>		       chtitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	(gentext-element-name nd)
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (glossary-title nd)
</text>
<text>  (optional-title nd))
</text>
<text>
</text>
<text>(define (bibliography-title nd)
</text>
<text>  (optional-title nd))
</text>
<text>
</text>
<text>(define (index-title nd)
</text>
<text>  (optional-title nd))
</text>
<text>
</text>
<text>(define (setindex-title nd)
</text>
<text>  (optional-title nd))
</text>
<text>
</text>
<text>(define (dedication-title nd)
</text>
<text>  (optional-title nd))
</text>
<text>
</text>
<text>(define (colophon-title nd)
</text>
<text>  (gentext-element-name nd))
</text>
<text>
</text>
<text>(define (section-title nd)
</text>
<text>  (let* ((info     (select-elements (children nd) 
</text>
<text>				    (list (normalize &quot;sect1info&quot;)
</text>
<text>					  (normalize &quot;sect2info&quot;)
</text>
<text>					  (normalize &quot;sect3info&quot;)
</text>
<text>					  (normalize &quot;sect4info&quot;)
</text>
<text>					  (normalize &quot;sect5info&quot;)
</text>
<text>					  (normalize &quot;section&quot;))))
</text>
<text>	 (ititles  (select-elements (children info) (normalize &quot;title&quot;)))
</text>
<text>	 (ctitles  (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? ctitles)
</text>
<text>		       ititles
</text>
<text>		       ctitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (refsection-title nd)
</text>
<text>  (let* ((info     (select-elements (children nd) 
</text>
<text>				    (list (normalize &quot;refsect1info&quot;)
</text>
<text>					  (normalize &quot;refsect2info&quot;) 
</text>
<text>					  (normalize &quot;refsect3info&quot;))))
</text>
<text>	 (ititles  </text>
<text>(select-elements (children info) (normalize &quot;title&quot;)))
</text>
<text>	 (ctitles  (select-elements (children nd) (normalize &quot;title&quot;)))
</text>
<text>	 (titles   (if (node-list-empty? ctitles)
</text>
<text>		       ititles
</text>
<text>		       ctitles)))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>(define (block-title nd)
</text>
<text>  (let ((titles (select-elements (children nd) (normalize &quot;title&quot;))))
</text>
<text>    (if (node-list-empty? titles)
</text>
<text>	&quot;&quot;
</text>
<text>	(node-list-first titles))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (set-title-sosofo nd)
</text>
<text>  (let ((title (set-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (book-title-sosofo nd)
</text>
<text>  (let ((title (book-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (part-title-sosofo nd)
</text>
<text>  (let ((title (part-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (article-title-sosofo nd)
</text>
<text>  (let ((title (article-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (preface-title-sosofo nd)
</text>
<text>  (let ((title (preface-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (chapter-title-sosofo nd)
</text>
<text>  (let ((title (chapter-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (appendix-title-sosofo nd)
</text>
<text>  (let ((title (appendix-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (reference-title-sosofo nd)
</text>
<text>  (let ((title (reference-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (refsynopsisdiv-title-sosofo nd)
</text>
<text>  (optional-title-sosofo nd))
</text>
<text>
</text>
<text>(define (refentry-title-sosofo nd)
</text>
<text>  (let ((title (refentry-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (optional-title-sosofo nd)
</text>
<text>  (let ((title (optional-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(literal title)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (glossary-title-sosofo nd)
</text>
<text>  (optional-title-sosofo nd))
</text>
<text>
</text>
<text>(define (bibliography-title-sosofo nd)
</text>
<text>  (optional-title-sosofo nd))
</text>
<text>
</text>
<text>(define (index-title-sosofo nd)
</text>
<text>  (optional-title-sosofo nd))
</text>
<text>
</text>
<text>(define (setindex-title-sosofo nd)
</text>
<text>  (optional-title-sosofo nd))
</text>
<text>
</text>
<text>(define (dedication-title-sosofo nd)
</text>
<text>  (optional-title-sosofo nd))
</text>
<text>
</text>
<text>(define (colophon-title-sosofo nd)
</text>
<text>  (literal (gentext-element-name nd)))
</text>
<text>
</text>
<text>(define (section-title-sosofo nd)
</text>
<text>  (let ((title (section-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (refsection-title-sosofo nd)
</text>
<text>  (let ((title (refsection-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(define (block-title-sosofo nd)
</text>
<text>  (let ((title (block-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	(empty-sosofo)
</text>
<text>	(with-mode title-sosofo-mode
</text>
<text>	  (process-node-list title)))))
</text>
<text>
</text>
<text>(mode title-sosofo-mode
</text>
<text>  (element title
</text>
<text>    (process-children-trim))
</text>
<text>
</text>
<text>  (element citetitle
</text>
<text>    (process-children-trim))
</text>
<text>
</text>
<text>  (element refname
</text>
<text>    (process-children-trim))
</text>
<text>
</text>
<text>  (element refentrytitle
</text>
<text>    (process-children-trim)))
</text>
<text>
</text>
<text>;; Returns the title of the element as a </text>
<text>sosofo.
</text>
<text>;;
</text>
<text>(define (element-title-sosofo #!optional (nd (current-node)))
</text>
<text>  (if (node-list-empty? nd)
</text>
<text>      (empty-sosofo)
</text>
<text>      (cond
</text>
<text>       ;; Use a seperately defined assoc list?
</text>
<text>       ((equal? (gi nd) (normalize &quot;appendix&quot;)) (appendix-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;article&quot;)) (article-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;bibliography&quot;)) (bibliography-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;book&quot;)) (book-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;chapter&quot;)) (chapter-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;dedication&quot;)) (dedication-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;glossary&quot;)) (glossary-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;index&quot;)) (index-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;colophon&quot;)) (colophon-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;setindex&quot;)) (index-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;part&quot;)) (part-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;preface&quot;)) (preface-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refentry&quot;)) (refentry-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;reference&quot;)) (reference-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsect1&quot;)) (refsection-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsect2&quot;)) (refsection-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsect3&quot;)) (refsection-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsynopsisdiv&quot;)) (refsynopsisdiv-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect1&quot;)) (section-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect2&quot;)) (section-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect3&quot;)) (section-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect4&quot;)) (section-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect5&quot;)) (section-title-sosofo nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;set&quot;)) (set-title-sosofo nd))
</text>
<text>       (else (block-title-sosofo nd)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>;; Returns the title of the element; returns a node if possible, or a string
</text>
<text>(define (element-title nd)
</text>
<text>  (if (node-list-empty? nd)
</text>
<text>      &quot;&quot;
</text>
<text>      (cond
</text>
<text>       ;; Use a seperately defined assoc list?
</text>
<text>       ((equal? (gi nd) (normalize &quot;appendix&quot;)) (appendix-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;article&quot;)) (article-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;bibliography&quot;)) (bibliography-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;book&quot;)) (book-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;chapter&quot;)) (chapter-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;dedication&quot;)) (dedication-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;glossary&quot;)) (glossary-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;index&quot;)) (index-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;colophon&quot;)) (colophon-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;setindex&quot;)) (setindex-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;part&quot;)) (part-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;preface&quot;)) (preface-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refentry&quot;)) (refentry-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;reference&quot;)) (reference-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsect1&quot;)) (refsection-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsect2&quot;)) (refsection-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsect3&quot;)) (refsection-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;refsynopsisdiv&quot;)) (refsynopsisdiv-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect1&quot;)) (section-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect2&quot;)) (section-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect3&quot;)) (section-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;sect4&quot;)) (section-title nd))
</text>
<text>       ((equal? (gi nd) (normalize</text>
<text> &quot;sect5&quot;)) (section-title nd))
</text>
<text>       ((equal? (gi nd) (normalize &quot;set&quot;)) (set-title nd))
</text>
<text>       (else (block-title nd)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Returns the data of a node, carefully excising INDEXTERMs from 
</text>
<text>;; the data content
</text>
<text>;;
</text>
<text>
</text>
<text>(define (data-of node)
</text>
<text>  ;; return the data characters of a node, except for the content of
</text>
<text>  ;; indexterms which are suppressed.
</text>
<text>  (let loop ((nl (children node)) (result &quot;&quot;))
</text>
<text>    (if (node-list-empty? nl)
</text>
<text>	result
</text>
<text>	(if (equal? (node-property 'class-name (node-list-first nl)) 'element)
</text>
<text>	    (if (or (equal? (gi (node-list-first nl)) (normalize &quot;indexterm&quot;))
</text>
<text>		    (equal? (gi (node-list-first nl)) (normalize &quot;comment&quot;))
</text>
<text>		    (equal? (gi (node-list-first nl)) (normalize &quot;remark&quot;)))
</text>
<text>		(loop (node-list-rest nl) result)
</text>
<text>		(loop (node-list-rest nl)
</text>
<text>		      (string-append result (data-of (node-list-first nl)))))
</text>
<text>	    (if (or (equal? (node-property 'class-name (node-list-first nl))
</text>
<text>			    'data-char)
</text>
<text>		    (equal? (node-property 'class-name (node-list-first nl))
</text>
<text>			    'sdata))
</text>
<text>		(loop (node-list-rest nl)
</text>
<text>		      (string-append result (data (node-list-first nl))))
</text>
<text>		(loop (node-list-rest nl) result))))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Returns the element title data of nd
</text>
<text>;;
</text>
<text>(define (element-title-string nd)
</text>
<text>  (let ((title (element-title nd)))
</text>
<text>    (if (string? title)
</text>
<text>	title
</text>
<text>	(data-of title))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Returns the element gi as a sosofo
</text>
<text>;;
</text>
<text>(define (element-gi-sosofo nd)
</text>
<text>  (if (node-list-empty? nd)
</text>
<text>      (empty-sosofo)
</text>
<text>      (make sequence
</text>
<text>	(literal (gentext-element-name nd)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (titlepage-info-elements node info #!optional (intro (empty-node-list)))
</text>
<text>  ;; Returns a node-list of the elements that might appear on a title
</text>
<text>  ;; page.  This node-list is constructed as follows:
</text>
<text>  ;;
</text>
<text>  ;; 1. The &quot;title&quot; child of node is considered as a possibility
</text>
<text>  ;; 2. If info is not empty, then node-list starts as the children
</text>
<text>  ;;    of info.  If the children of info don't include a title, then
</text>
<text>  ;;    the title from the node is added.
</text>
<text>  ;; 3. If info is empty, then node-list starts as the children of node,
</text>
<text>  ;;    but with &quot;partintro&quot; filtered out.
</text>
<text>
</text>
<text>  (let* ((title (select-elements (children node) (normalize &quot;title&quot;)))
</text>
<text>	 (nl    (if (node-list-empty? info)
</text>
<text>		    (node-list-filter-by-not-gi (children node) 
</text>
<text>						(list (normalize &quot;partintro&quot;)))
</text>
<text>		    (children info)))
</text>
<text>	 (nltitle (node-list-filter-by-gi nl (list (normalize &quot;title&quot;)))))
</text>
<text>    (if (node-list-empty? info)
</text>
<text>	(node-list nl
</text>
<text>		   intro)
</text>
<text>	(node-list (if (node-list-empty? nltitle)
</text>
<text>		       title
</text>
<text>		       (empty-node-list))
</text>
<text>		   nl
</text>
<text>		   intro))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (info-element #!optional (nd (current-node)))
</text>
<text>  ;; Returns the *INFO element for the nd or (empty-node-list) if no
</text>
<text>  ;; such node exists...
</text>
<text>  (cond
</text>
<text>   ((equal? (gi nd) (normalize &quot;set&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;setinfo&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;book&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;bookinfo&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;section&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;sectioninfo&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;sect1&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;sect1info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;sect2&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;sect2info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;sect3&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;sect3info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;sect4&quot;))
</text>
<text>    (select-elements </text>
<text>(children nd) (normalize &quot;sect4info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;sect5&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;sect5info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;refsect1&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;refsect1info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;refsect2&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;refsect2info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;refsect3&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;refsect3info&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;refsynopsisdiv&quot;))
</text>
<text>    (select-elements (children nd) (normalize &quot;refsynopsisdivinfo&quot;)))
</text>
<text>   ((equal? (gi nd) (normalize &quot;article&quot;))
</text>
<text>    (node-list-filter-by-gi (children nd) (list
</text>
<text>					   (normalize &quot;artheader&quot;)
</text>
<text>					   (normalize &quot;articleinfo&quot;))))
</text>
<text>   (else ;; BIBLIODIV, GLOSSDIV, INDEXDIV, PARTINTRO, SIMPLESECT
</text>
<text>    (select-elements (children nd) (normalize &quot;docinfo&quot;)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;;
</text>
<text>;; Bibliography filtering...
</text>
<text>
</text>
<text>(define (biblio-filter allentries)
</text>
<text>  (let* ((all  (descendants (sgml-root-element)))
</text>
<text>	 (link (select-elements all (normalize &quot;link&quot;)))
</text>
<text>	 (xref (select-elements all (normalize &quot;xref&quot;)))
</text>
<text>	 (cite (select-elements all (normalize &quot;citation&quot;)))
</text>
<text>	 (xref-elements (node-list link xref)))
</text>
<text>    (let loop ((entries allentries) (used (empty-node-list)))
</text>
<text>      (if (node-list-empty? entries)
</text>
<text>	  used
</text>
<text>	  (if (or (cited-by-xref (node-list-first entries) xref-elements)
</text>
<text>		  (cited-by-citation (node-list-first entries) cite))
</text>
<text>	      (loop (node-list-rest entries) 
</text>
<text>		    (node-list used (node-list-first entries)))
</text>
<text>	      (loop (node-list-rest entries) used))))))
</text>
<text>
</text>
<text>(define (cited-by-xref bib xref-elements)
</text>
<text>  (let* ((id (attribute-string (normalize &quot;id&quot;) bib)))
</text>
<text>    (if id
</text>
<text>	(let loop ((links xref-elements))
</text>
<text>	  (if (node-list-empty? links)
</text>
<text>	      #f
</text>
<text>	      (if (equal? (attribute-string (normalize &quot;linkend&quot;) 
</text>
<text>					    (node-list-first links)) id)
</text>
<text>		  #t
</text>
<text>		  (loop (node-list-rest links)))))
</text>
<text>	#f)))
</text>
<text>
</text>
<text>(define (cited-by-citation bib citations)
</text>
<text>  (let loop ((links citations))
</text>
<text>    (if (node-list-empty? links)
</text>
<text>	#f
</text>
<text>	(if (citation-matches-target? (node-list-first links) bib)
</text>
<text>	    #t
</text>
<text>	    (loop (node-list-rest links))))))
</text>
<text>
</text>
<text>(define (citation-matches-target? citation target)
</text>
<text>  (let* ((fchild (node-list-first 
</text>
<text>		  (node-list-filter-out-pis 
</text>
<text>		   (children target))))
</text>
<text>	 (abbrev (if (equal? (gi fchild) (normalize &quot;abbrev&quot;))
</text>
<text>		     fchild
</text>
<text>		     (empty-node-list)))
</text>
<text>	 (cite   (data-of citation)))
</text>
<text>    (or (equal? (attribute-string &quot;id&quot; target) (normalize cite))
</text>
<text>	(equal? (attribute-string &quot;xreflabel&quot; target) (normalize cite))
</text>
<text>	(equal? (normalize cite) (normalize (data-of abbrev))))))
</text>
<text>
</text>
<text>(define (bibentry-number bibentry)
</text>
<text>  (let* ((bgraphy (ancestor-member bibentry 
</text>
<text>				   (list (normalize &quot;bibliography&quot;))))
</text>
<text>	 (comps   (expand-children (children bgraphy) 
</text>
<text>				   (list (normalize &quot;bibliodiv&quot;)))))
</text>
<text>    (let loop ((nl comps) (count 1))
</text>
<text>      (if (node-list-empty? nl) 
</text>
<text>	  0
</text>
<text>	  (if (node-list=? (node-list-first nl) bibentry)
</text>
<text>	      count
</text>
<text>	      (if (or (equal? (gi (node-list-first nl))
</text>
<text>			      (normalize &quot;biblioentry&quot;))
</text>
<text>		      (equal? (gi (node-list-first nl))
</text>
<text>			      (normalize &quot;bibliomixed&quot;)))
</text>
<text>		  (loop (node-list-rest nl) (+ count 1))
</text>
<text>		  (loop (node-list-rest nl) count)))))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (olink-resource-title pubid sysid)
</text>
<text>  ;; This version of olink-resource-title expects public identifiers
</text>
<text>  ;; with the following format:
</text>
<text>  ;;
</text>
<text>  ;;   -//owner//TEXT title Vx.x//EN
</text>
<text>  ;; 
</text>
<text>  ;; Specifically the title is the description field of the public
</text>
<text>  ;; identifier minus the first word (TEXT, the type) and the last
</text>
<text>  ;; word, in my case a version string.  Words are blank </text>
<text>delimited.
</text>
<text>  ;; The parsing will fail if a &quot;/&quot; appears anywhere in any field.
</text>
<text>  ;; The system identifier is ignored
</text>
<text>  ;; 
</text>
<text>  (let* ((pubidparts   (if pubid
</text>
<text>			   (split pubid '(#\/))
</text>
<text>			   (split &quot;-//none//type version//la&quot; '(#\/))))
</text>
<text>	 (description  (car (cdr (cdr pubidparts))))
</text>
<text>	 (descparts    (split description))
</text>
<text>	 (titleparts   (list-head (cdr descparts) (- (length descparts) 2))))
</text>
<text>    (join titleparts)))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (orderedlist-listitem-number listitem)
</text>
<text>  ;; return the number of listitem, taking continuation into account
</text>
<text>  (let* ((orderedlist (parent listitem))
</text>
<text>	 (listitems (select-elements (children orderedlist)
</text>
<text>				     (normalize &quot;listitem&quot;)))
</text>
<text>	 (continue? (equal? (attribute-string (normalize &quot;continuation&quot;)
</text>
<text>					      orderedlist)
</text>
<text>			    (normalize &quot;continues&quot;)))
</text>
<text>
</text>
<text>;; If a list is the continuation of a previous list, we must find the
</text>
<text>;; list that is continued in order to calculate the starting
</text>
<text>;; item number of this list.
</text>
<text>;;
</text>
<text>;; Of all the lists in this component, only the following are candidates:
</text>
<text>;; 1. Lists which precede this list
</text>
<text>;; 2. Lists which are not ancestors of this list
</text>
<text>;; 3. Lists that do not have ancestors that are lists which precede this one
</text>
<text>;;
</text>
<text>;; Of the candidates, the last one, in document order, is the preceding
</text>
<text>;; list
</text>
<text>	 (all-lists (select-elements
</text>
<text>		     (descendants (ancestor-member orderedlist
</text>
<text>						   (component-element-list)))
</text>
<text>		     (normalize &quot;orderedlist&quot;)))
</text>
<text>
</text>
<text>	 (cand1     (if continue?
</text>
<text>			(let loop ((nl all-lists)
</text>
<text>				   (prec (empty-node-list)))
</text>
<text>			  (if (node-list-empty? nl)
</text>
<text>			      prec
</text>
<text>			      (if (node-list=? (node-list-first nl)
</text>
<text>					       orderedlist)
</text>
<text>				  prec
</text>
<text>				  (loop (node-list-rest nl)
</text>
<text>					(node-list prec
</text>
<text>						   (node-list-first nl))))))
</text>
<text>			(empty-node-list)))
</text>
<text>
</text>
<text>	 (cand2     (let loop ((nl cand1)
</text>
<text>			       (cand2lists (empty-node-list)))
</text>
<text>		      (if (node-list-empty? nl)
</text>
<text>			  cand2lists
</text>
<text>			  (loop (node-list-rest nl)
</text>
<text>				(if (descendant-of? (node-list-first nl)
</text>
<text>						    orderedlist)
</text>
<text>				    cand2lists
</text>
<text>				    (node-list cand2lists
</text>
<text>					       (node-list-first nl)))))))
</text>
<text>
</text>
<text>	 ;; now find the last item of cand2 that is not a descendant
</text>
<text>	 ;; of some other element of the cand2 list.
</text>
<text>	 (preclist  (let loop ((nl (node-list-reverse cand2)))
</text>
<text>		      (if (node-list-empty? nl)
</text>
<text>			  (empty-node-list)
</text>
<text>			  (if (descendant-member-of?
</text>
<text>			       (node-list-first nl)
</text>
<text>			       (node-list-rest nl))
</text>
<text>			      (loop (node-list-rest nl))
</text>
<text>			      (node-list-first nl)))))
</text>
<text>
</text>
<text>	 (precitem (if (node-list-empty? preclist)
</text>
<text>		       (empty-node-list)
</text>
<text>		       (node-list-last (children preclist))))
</text>
<text>	 (precitem-number (if (and continue? (not (node-list-empty? precitem)))
</text>
<text>			      (orderedlist-listitem-number precitem)
</text>
<text>			      0)))
</text>
<text>
</text>
<text>    (+ precitem-number (child-number listitem))))
</text>
<text>
</text>
<text>(define (descendant-member-of? node node-list)
</text>
<text>  ;; return true if node is a descedant of any member of node-list
</text>
<text>  (let loop ((nl node-list))
</text>
<text>    (if (node-list-empty? nl)
</text>
<text>	#f
</text>
<text>	(if (descendant-of? (node-list-first nl) node)
</text>
<text>	    #t
</text>
<text>	    (loop (node-list-rest nl))))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (orderedlist-listitem-label listitem)
</text>
<text>  ;; return the formatted number of listitem
</text>
<text>  (let* ((number  (orderedlist-listitem-number listitem))
</text>
<text>	 (depth   (length (hierarchical-number-recursive
</text>
<text>			   (normalize &quot;orderedlist&quot;)
</text>
<text>			   listitem)))
</text>
<text>	 (numeration (inherited-attribute-string (normalize &quot;numeration&quot;)
</text>
<text>						 listitem))
</text>
<text>	 ;; rawnum allows for numbering to alternate
</text>
<text>	 (rawnum (cond
</text>
<text>		  ((equal? numeration (normalize &quot;arabic&quot;)) 1)
</text>
<text>		  ((equal? numeration (normalize </text>
<text>&quot;loweralpha&quot;)) 2)
</text>
<text>		  ((equal? numeration (normalize &quot;lowerroman&quot;)) 3)
</text>
<text>		  ((equal? numeration (normalize &quot;upperalpha&quot;)) 4)
</text>
<text>		  ((equal? numeration (normalize &quot;upperroman&quot;)) 0)
</text>
<text>		  (else (modulo depth 5)))))
</text>
<text>    (case rawnum
</text>
<text>      ((1) (format-number number &quot;1&quot;))
</text>
<text>      ((2) (format-number number &quot;a&quot;))
</text>
<text>      ((3) (format-number number &quot;i&quot;))
</text>
<text>      ((4) (format-number number &quot;A&quot;))
</text>
<text>      ((0) (format-number number &quot;I&quot;)))))
</text>
<text>
</text>
<text>(define (orderedlist-listitem-label-recursive listitem)
</text>
<text>  ;; return the recursively formatted number of the listitem.
</text>
<text>  ;; In other words, something of the form 1.2.3 for a third level
</text>
<text>  ;; nested ordered list
</text>
<text>  (let loop ((li (parent listitem)) 
</text>
<text>	     (label (orderedlist-listitem-label listitem)))
</text>
<text>    (if (or (node-list-empty? li)
</text>
<text>	    (node-list-empty? (ancestor (normalize &quot;orderedlist&quot;) li)))
</text>
<text>	label
</text>
<text>	(if (and (equal? (gi li) (normalize &quot;listitem&quot;))
</text>
<text>		 (equal? (gi (parent li)) (normalize &quot;orderedlist&quot;)))
</text>
<text>	    (loop (parent li)
</text>
<text>		  (string-append 
</text>
<text>		   (orderedlist-listitem-label li)
</text>
<text>		   (gentext-intra-label-sep li)
</text>
<text>		   label))
</text>
<text>	    (loop (parent li) label)))))
</text>
<text>
</text>
<text>(define (question-answer-label #!optional (node (current-node)))
</text>
<text>  (let* ((inhlabel (inherited-attribute-string (normalize &quot;defaultlabel&quot;)
</text>
<text>					       node))
</text>
<text>	 (deflabel (if inhlabel inhlabel (qanda-defaultlabel)))
</text>
<text>	 (label    (attribute-string (normalize &quot;label&quot;) node))
</text>
<text>	 (hnr      (hierarchical-number-recursive (normalize &quot;qandadiv&quot;)
</text>
<text>						  node))
</text>
<text>
</text>
<text>	 (parsect  (ancestor-member node (section-element-list)))
</text>
<text>
</text>
<text>	 (defnum   (if (and %qanda-inherit-numeration% 
</text>
<text>			    %section-autolabel%)
</text>
<text>		       (if (node-list-empty? parsect)
</text>
<text>			   (section-autolabel-prefix node)
</text>
<text>			   (section-autolabel parsect))
</text>
<text>		       &quot;&quot;))
</text>
<text>
</text>
<text>	 (hnumber  (let loop ((numlist hnr) (number defnum) 
</text>
<text>			      (sep (if (equal? defnum &quot;&quot;) &quot;&quot; &quot;.&quot;)))
</text>
<text>		     (if (null? numlist)
</text>
<text>			 number
</text>
<text>			 (loop (cdr numlist) 
</text>
<text>			       (string-append number
</text>
<text>					      sep
</text>
<text>					      (number-&gt;string (car numlist)))
</text>
<text>			       &quot;.&quot;))))
</text>
<text>	 (cnumber  (child-number (parent node)))
</text>
<text>	 (number   (string-append hnumber 
</text>
<text>				  (if (equal? hnumber &quot;&quot;)
</text>
<text>				      &quot;&quot;
</text>
<text>				      &quot;.&quot;)
</text>
<text>				  (number-&gt;string cnumber))))
</text>
<text>    (cond
</text>
<text>     ((equal? deflabel (normalize &quot;qanda&quot;))
</text>
<text>      (gentext-element-name node))
</text>
<text>     ((equal? deflabel (normalize &quot;label&quot;))
</text>
<text>      label)
</text>
<text>     ;; Note: only questions are numbered...
</text>
<text>     ((and (equal? deflabel (normalize &quot;number&quot;))
</text>
<text>	   (equal? (gi node) (normalize &quot;question&quot;)))
</text>
<text>      (string-append number &quot;.&quot;))
</text>
<text>     (else &quot;&quot;))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Calculate term lengths...
</text>
<text>
</text>
<text>(define (varlistentry-term-too-long? vle termlength)
</text>
<text>  (let loop ((nl (select-elements (children vle) (normalize &quot;term&quot;)))
</text>
<text>	     (too-long? #f))
</text>
<text>    (if (or too-long? (node-list-empty? nl))
</text>
<text>	too-long?
</text>
<text>	(loop (node-list-rest nl)
</text>
<text>	      (&gt; (string-length (data (node-list-first nl)))
</text>
<text>		 termlength)))))
</text>
<text>
</text>
<text>(define (variablelist-term-too-long? termlength)
</text>
<text>  (let loop ((nl (select-elements (children (current-node))
</text>
<text>				  (normalize &quot;varlistentry&quot;)))
</text>
<text>	     (too-long? #f))
</text>
<text>    (if (or too-long? (node-list-empty? nl))
</text>
<text>	too-long?
</text>
<text>	(loop (node-list-rest nl)
</text>
<text>	      (varlistentry-term-too-long? (node-list-first nl) termlength)))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; bibliography elements
</text>
<text>
</text>
<text>(define (biblioentry-inline-elements)
</text>
<text>  (list (normalize &quot;abbrev&quot;)
</text>
<text>	(normalize &quot;affiliation&quot;)
</text>
<text>	(normalize &quot;artpagenums&quot;)
</text>
<text>	(normalize &quot;author&quot;)
</text>
<text>	(normalize &quot;authorgroup&quot;)
</text>
<text>	(normalize &quot;authorinitials&quot;)
</text>
<text>	(normalize &quot;citetitle&quot;)
</text>
<text>	(normalize &quot;collab&quot;)
</text>
<text>	(normalize &quot;confgroup&quot;)
</text>
<text>	(normalize &quot;contractnum&quot;)
</text>
<text>	(normalize </text>
<text>&quot;contractsponsor&quot;)
</text>
<text>	(normalize &quot;contrib&quot;)
</text>
<text>	(normalize &quot;copyright&quot;)
</text>
<text>	(normalize &quot;corpauthor&quot;)
</text>
<text>	(normalize &quot;corpname&quot;)
</text>
<text>	(normalize &quot;date&quot;)
</text>
<text>	(normalize &quot;edition&quot;)
</text>
<text>	(normalize &quot;editor&quot;)
</text>
<text>	(normalize &quot;firstname&quot;)
</text>
<text>	(normalize &quot;honorific&quot;)
</text>
<text>	(normalize &quot;invpartnumber&quot;)
</text>
<text>	(normalize &quot;isbn&quot;)
</text>
<text>	(normalize &quot;issn&quot;)
</text>
<text>	(normalize &quot;issuenum&quot;)
</text>
<text>	(normalize &quot;lineage&quot;)
</text>
<text>	(normalize &quot;orgname&quot;)
</text>
<text>	(normalize &quot;othercredit&quot;)
</text>
<text>	(normalize &quot;othername&quot;)
</text>
<text>	(normalize &quot;pagenums&quot;)
</text>
<text>	(normalize &quot;productname&quot;)
</text>
<text>	(normalize &quot;productnumber&quot;)
</text>
<text>	(normalize &quot;pubdate&quot;)
</text>
<text>	(normalize &quot;publisher&quot;)
</text>
<text>	(normalize &quot;publishername&quot;)
</text>
<text>	(normalize &quot;pubsnumber&quot;)
</text>
<text>	(normalize &quot;releaseinfo&quot;)
</text>
<text>	(normalize &quot;seriesvolnums&quot;)
</text>
<text>	(normalize &quot;subtitle&quot;)
</text>
<text>	(normalize &quot;surname&quot;)
</text>
<text>	(normalize &quot;title&quot;)
</text>
<text>	(normalize &quot;titleabbrev&quot;)
</text>
<text>	(normalize &quot;volumenum&quot;)))
</text>
<text>
</text>
<text>(define (biblioentry-block-elements)
</text>
<text>  (list (normalize &quot;abstract&quot;)
</text>
<text>	(normalize &quot;address&quot;)
</text>
<text>	(normalize &quot;authorblurb&quot;)
</text>
<text>	(normalize &quot;printhistory&quot;)
</text>
<text>	(normalize &quot;revhistory&quot;)
</text>
<text>	(normalize &quot;seriesinfo&quot;)))
</text>
<text>
</text>
<text>(define (biblioentry-flatten-elements)
</text>
<text>  (list (normalize &quot;artheader&quot;)
</text>
<text>	(normalize &quot;biblioset&quot;)
</text>
<text>	(normalize &quot;bookbiblio&quot;)))
</text>
<text>
</text>
<text>;; === db31 common ======================================================
</text>
<text>
</text>
<text>(define (data-filename dataobj)
</text>
<text>  (let* ((entityref (attribute-string (normalize &quot;entityref&quot;) dataobj))
</text>
<text>	 (fileref   (attribute-string (normalize &quot;fileref&quot;) dataobj))
</text>
<text>	 (filename  (if fileref
</text>
<text>			fileref
</text>
<text>			(system-id-filename entityref)))
</text>
<text>	 (ext       (file-extension filename)))
</text>
<text>    (if (or (not filename)
</text>
<text>	    (not %graphic-default-extension%)
</text>
<text>	    (member ext %graphic-extensions%))
</text>
<text>	filename
</text>
<text>	(string-append filename &quot;.&quot; %graphic-default-extension%))))
</text>
<text>
</text>
<text>(define (normalized-member string string-list)
</text>
<text>  (if (string? string)
</text>
<text>      (let loop ((sl string-list))
</text>
<text>	(if (null? sl)
</text>
<text>	    #f
</text>
<text>	    (if (string=? (normalize string) (normalize (car sl)))
</text>
<text>		#t
</text>
<text>		(loop (cdr sl)))))
</text>
<text>      #f))
</text>
<text>
</text>
<text>(define (find-displayable-object objlist notlist extlist)
</text>
<text>  (let loop ((nl objlist))
</text>
<text>    (if (node-list-empty? nl)
</text>
<text>	(empty-node-list)
</text>
<text>	(let* ((objdata  (node-list-filter-by-gi
</text>
<text>			  (children (node-list-first nl))
</text>
<text>			  (list (normalize &quot;videodata&quot;)
</text>
<text>				(normalize &quot;audiodata&quot;)
</text>
<text>				(normalize &quot;imagedata&quot;))))
</text>
<text>	       (filename  (data-filename objdata))
</text>
<text>	       (extension (file-extension filename))
</text>
<text>	       (notation  (attribute-string (normalize &quot;format&quot;) objdata)))
</text>
<text>	  (if (or (normalized-member notation notlist)
</text>
<text>		  (normalized-member extension extlist)
</text>
<text>		  (and notation
</text>
<text>		       (string=? notation (normalize &quot;linespecific&quot;))))
</text>
<text>	      (node-list-first nl)
</text>
<text>	      (loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>(define (select-displayable-object objlist)
</text>
<text>  (let ((pref (find-displayable-object objlist
</text>
<text>				       preferred-mediaobject-notations
</text>
<text>				       preferred-mediaobject-extensions))
</text>
<text>	(ok   (find-displayable-object objlist
</text>
<text>				       acceptable-mediaobject-notations
</text>
<text>				       acceptable-mediaobject-extensions)))
</text>
<text>    (if (node-list-empty? pref)
</text>
<text>	ok
</text>
<text>	pref)))
</text>
<text>
</text>
<text>(define ($mediaobject$)
</text>
<text>  (let* ((objects (node-list-filter-by-gi
</text>
<text>		   (children (current-node))
</text>
<text>		   (list (normalize &quot;videoobject&quot;)
</text>
<text>			 (normalize &quot;imageobject&quot;)
</text>
<text>			 (normalize &quot;audioobject&quot;))))
</text>
<text>	 (dobject (select-displayable-object objects))
</text>
<text>	 (textobj (select-elements (children (current-node))
</text>
<text>				   (normalize &quot;textobject&quot;)))
</text>
<text>	 (caption (select-elements (children (current-node))
</text>
<text>				   (normalize &quot;caption&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (if (node-list-empty? dobject)
</text>
<text>	  (if (node-list-empty? textobj)
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (process-node-list (node-list-first textobj)))
</text>
<text>	  (process-node-list dobject))
</text>
<text>      (process-node-list caption))))
</text>
<text>
</text>
<text>;; </text>
<text>======================================================================
</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dbtable.dsl,v 1.1 2001/04/02 21:40:27 nwalsh Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>;; This file contains table functions common to both print and HTML
</text>
<text>;; versions of the DocBook stylesheets.
</text>
<text>;;
</text>
<text>
</text>
<text>;; If **ANY** change is made to this file, you _MUST_ alter the
</text>
<text>;; following definition:
</text>
<text>
</text>
<text>(define %docbook-common-table-version%
</text>
<text>  &quot;Modular DocBook Stylesheet Common Table Functions&quot;)
</text>
<text>
</text>
<text>;; == Table Support =====================================================
</text>
<text>
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>;; Functions for finding/retrieving table attributes
</text>
<text>
</text>
<text>(define (tgroup-align tgroup)
</text>
<text>  (attribute-string (normalize &quot;align&quot;) tgroup))
</text>
<text>
</text>
<text>(define (tgroup-colsep tgroup)
</text>
<text>  (attribute-string (normalize &quot;colsep&quot;) tgroup))
</text>
<text>
</text>
<text>(define (tgroup-rowsep tgroup)
</text>
<text>  (attribute-string (normalize &quot;rowsep&quot;) tgroup))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>
</text>
<text>(define (find-tgroup #!optional (nd (current-node)))
</text>
<text>  ;; for our purposes, an entrytbl functions as a tgroup.
</text>
<text>  ;; ENTRYTBL IS ONLY SUPPORTED IN THE HTML BACKEND!!!
</text>
<text>  (if (or (equal? (gi nd) (normalize &quot;tgroup&quot;))
</text>
<text>	  (equal? (gi nd) (normalize &quot;entrytbl&quot;)))
</text>
<text>      nd
</text>
<text>      (if (node-list-empty? (ancestor (normalize &quot;entrytbl&quot;) nd))
</text>
<text>	  (ancestor (normalize &quot;tgroup&quot;) nd)
</text>
<text>	  (ancestor (normalize &quot;entrytbl&quot;) nd))))
</text>
<text>
</text>
<text>(define (find-colspec colname)
</text>
<text>  (let* ((tgroup (find-tgroup))
</text>
<text>	 (colspecs (select-elements (descendants tgroup)
</text>
<text>				    (normalize &quot;colspec&quot;))))
</text>
<text>    (let loop ((nl colspecs))
</text>
<text>	(if (node-list-empty? nl)
</text>
<text>	    ;; we've run out of places to look, stop looking...
</text>
<text>	    (error (string-append &quot;Could not find COLSPEC named &quot; colname))
</text>
<text>	    (if (equal? colname
</text>
<text>			(attribute-string (normalize &quot;colname&quot;) 
</text>
<text>					  (node-list-first nl)))
</text>
<text>		(node-list-first nl)
</text>
<text>		(loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>(define (find-colspec-by-number colnum)
</text>
<text>  (let* ((tgroup (find-tgroup))
</text>
<text>	 (colspecs (select-elements (children tgroup) (normalize &quot;colspec&quot;))))
</text>
<text>    (let loop ((nl colspecs))
</text>
<text>      (if (node-list-empty? nl)
</text>
<text>	  ;; we've run out of places to look, stop looking...
</text>
<text>	  (empty-node-list)
</text>
<text>	  (if (equal? (colspec-colnum (node-list-first nl)) colnum)
</text>
<text>	      (node-list-first nl)
</text>
<text>	      (loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>(define (colspec-align colspec)
</text>
<text>  (attribute-string (normalize &quot;align&quot;) colspec))
</text>
<text>
</text>
<text>(define (colspec-char colspec)
</text>
<text>  (attribute-string (normalize &quot;char&quot;) colspec))
</text>
<text>
</text>
<text>(define (colspec-charoff colspec)
</text>
<text>  (let ((charoff (attribute-string (normalize &quot;charoff&quot;) colspec)))
</text>
<text>    (if charoff
</text>
<text>	(string-&gt;number charoff)
</text>
<text>	#f)))
</text>
<text>
</text>
<text>(define (colspec-colnum colspec)
</text>
<text>  ;; returns the column number of the associated colspec...which is 
</text>
<text>  ;; either the value of COLNUM or obtained by counting
</text>
<text>  (let* ((tgroup (find-tgroup colspec))
</text>
<text>	 (colspecs (select-elements (children tgroup) (normalize &quot;colspec&quot;))))
</text>
<text>    (if (attribute-string (normalize &quot;colnum&quot;) colspec)
</text>
<text>	(string-&gt;number (attribute-string (normalize &quot;colnum&quot;) colspec))
</text>
<text>	(let loop ((nl colspecs) (curcol 1))
</text>
<text>	  (let ((colnum (attribute-string (normalize &quot;colnum&quot;) (node-list-first nl))))
</text>
<text>	    (if (node-list=? (node-list-first nl) colspec)
</text>
<text>		curcol
</text>
<text>		(if colnum
</text>
<text>		    (loop (node-list-rest nl) (+ (string-&gt;number colnum) 1))
</text>
<text>		    (loop (node-list-rest nl) (+ curcol 1)))))))))
</text>
<text>
</text>
<text>(define (colspec-colname colspec)
</text>
<text>  (attribute-string (normalize &quot;colname&quot;) colspec))
</text>
<text>
</text>
<text>(define (colspec-colsep colspec)
</text>
<text>  (attribute-string (normalize &quot;colsep&quot;) colspec))
</text>
<text>
</text>
<text>(define (colspec-colwidth colspec)
</text>
<text>  (if (attribute-string (normalize &quot;colwidth&quot;) </text>
<text>colspec)
</text>
<text>      (attribute-string (normalize &quot;colwidth&quot;) colspec)
</text>
<text>      &quot;1*&quot;))
</text>
<text>
</text>
<text>(define (colspec-rowsep colspec)
</text>
<text>  (attribute-string (normalize &quot;rowsep&quot;) colspec))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>
</text>
<text>(define (find-spanspec spanname)
</text>
<text>  (let* ((tgroup (find-tgroup))
</text>
<text>	 (spanspecs (select-elements (descendants tgroup) 
</text>
<text>				     (normalize (normalize &quot;spanspec&quot;)))))
</text>
<text>    (let loop ((nl spanspecs))
</text>
<text>      (if (node-list-empty? nl)
</text>
<text>	  (error (string-append &quot;Could not find SPANSPEC named &quot; spanname))
</text>
<text>	  (if (equal? spanname 
</text>
<text>		      (attribute-string (normalize &quot;spanname&quot;)
</text>
<text>					(node-list-first nl)))
</text>
<text>	      (node-list-first nl)
</text>
<text>	      (loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>(define (spanspec-align spanspec)
</text>
<text>  (attribute-string (normalize &quot;align&quot;) spanspec))
</text>
<text>
</text>
<text>(define (spanspec-char spanspec)
</text>
<text>  (attribute-string (normalize &quot;char&quot;) spanspec))
</text>
<text>
</text>
<text>(define (spanspec-charoff spanspec)
</text>
<text>  (let ((charoff (attribute-string (normalize &quot;charoff&quot;) spanspec)))
</text>
<text>    (if charoff
</text>
<text>	(string-&gt;number charoff)
</text>
<text>	#f)))
</text>
<text>
</text>
<text>(define (spanspec-colsep spanspec)
</text>
<text>  (attribute-string (normalize &quot;colsep&quot;) spanspec))
</text>
<text>
</text>
<text>(define (spanspec-nameend spanspec)
</text>
<text>  (attribute-string (normalize &quot;nameend&quot;) spanspec))
</text>
<text>
</text>
<text>(define (spanspec-namest spanspec)
</text>
<text>  (attribute-string (normalize &quot;namest&quot;) spanspec))
</text>
<text>
</text>
<text>(define (spanspec-rowsep spanspec)
</text>
<text>  (attribute-string (normalize &quot;rowsep&quot;) spanspec))
</text>
<text>
</text>
<text>(define (spanspec-spanname spanspec)
</text>
<text>  (attribute-string (normalize &quot;spanname&quot;) spanspec))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>;; Calculate spans
</text>
<text>
</text>
<text>(define (hspan entry)
</text>
<text>  ;; Returns the horizontal span of an entry
</text>
<text>  (let* ((spanname (attribute-string (normalize &quot;spanname&quot;) entry))
</text>
<text>	 (namest   (if spanname
</text>
<text>		       (spanspec-namest (find-spanspec spanname))
</text>
<text>		       (attribute-string (normalize &quot;namest&quot;) entry)))
</text>
<text>	 (nameend  (if spanname
</text>
<text>		       (spanspec-nameend (find-spanspec spanname))
</text>
<text>		       (attribute-string (normalize &quot;nameend&quot;) entry)))
</text>
<text>	 (colst    (if namest
</text>
<text>		       (colspec-colnum (find-colspec namest))
</text>
<text>		       #f))
</text>
<text>	 (colend   (if nameend
</text>
<text>		       (colspec-colnum (find-colspec nameend))
</text>
<text>		       #f)))
</text>
<text>    (if (and namest nameend)
</text>
<text>	(+ (- colend colst) 1)
</text>
<text>	1)))
</text>
<text>
</text>
<text>(define (vspan entry)
</text>
<text>  ;; Returns the vertical span of an entry.  Note that this is one more
</text>
<text>  ;; than the specified MOREROWS attribute.
</text>
<text>  (let* ((morerows (attribute-string (normalize &quot;morerows&quot;) entry)))
</text>
<text>    (if morerows
</text>
<text>	(+ (string-&gt;number morerows) 1)
</text>
<text>	1)))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>;; Update the &quot;overhang&quot; list
</text>
<text>
</text>
<text>(define (adjust-overhang overhang oldoverhang entry)
</text>
<text>  (let* ((colst    (cell-column-number entry oldoverhang))
</text>
<text>	 (span     (hspan entry)))
</text>
<text>    (if (&gt; (vspan entry) 1)
</text>
<text>	(list-put overhang colst (- (vspan entry) 1) span)
</text>
<text>	overhang)))
</text>
<text>
</text>
<text>(define (overhang-skip overhang startcol)
</text>
<text>  (if (&gt; startcol (length overhang))
</text>
<text>      ;; this is a _broken_ table.  should I output a debug message!?
</text>
<text>      startcol
</text>
<text>      (let loop ((overtail (list-tail overhang (- startcol 1))) (col startcol))
</text>
<text>	(if (null? overtail)
</text>
<text>	    col
</text>
<text>	    (if (equal? (car overtail) 0)
</text>
<text>		col
</text>
<text>		(loop (cdr overtail) (+ col 1)))))))
</text>
<text>
</text>
<text>(define (update-overhang row oldoverhang)
</text>
<text>  (let loop ((overhang (decrement-list-members oldoverhang))
</text>
<text>	     (entries  (node-list-filter-out-pis (children row))))
</text>
<text>    (if (node-list-empty? entries)
</text>
<text>	overhang
</text>
<text>	(loop (adjust-overhang overhang oldoverhang 
</text>
<text>			       (node-list-first entries))
</text>
<text>	      (node-list-rest entries)))))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>;; Calculate information about cells
</text>
<text>
</text>
<text>(define (cell-prev-cell entry)
</text>
<text>  ;; Return the cell which precedes entry in the current row.
</text>
<text>  (let loop ((nd (ipreced entry)))
</text>
<text>    (if (node-list-empty? nd)
</text>
<text>	nd
</text>
<text>	(if (equal? (node-property 'class-name nd) 'element)
</text>
<text>	    nd
</text>
<text>	    (loop (ipreced nd))))))
</text>
<text>
</text>
<text>(define (cell-column-number entry overhang)
</text>
<text>  (let* ((entry     (ancestor-member entry (list (normalize &quot;entry&quot;) (normalize &quot;entrytbl&quot;))))
</text>
<text>	 (row       (ancestor (normalize &quot;row&quot;) entry))
</text>
<text>	 (preventry (cell-prev-cell entry))
</text>
<text>	 (prevspan  (if (node-list-empty? preventry) 1 (hspan preventry)))
</text>
<text>	 (colname   (attribute-string (normalize &quot;colname&quot;) entry))
</text>
<text>	 (namest    (attribute-string (normalize &quot;namest&quot;) entry))
</text>
<text>	 (nameend   (attribute-string (normalize &quot;nameend&quot;) entry))
</text>
<text>	 (spanname  (attribute-string (normalize &quot;spanname&quot;) entry)))
</text>
<text>    (if colname
</text>
<text>	(colspec-colnum (find-colspec colname))
</text>
<text>	(if spanname
</text>
<text>	    (colspec-colnum (find-colspec 
</text>
<text>			     (spanspec-namest (find-spanspec spanname))))
</text>
<text>	    (if namest
</text>
<text>		(colspec-colnum (find-colspec namest))
</text>
<text>		(if (node-list-empty? preventry)
</text>
<text>		    (overhang-skip overhang 1)
</text>
<text>		    (overhang-skip overhang 
</text>
<text>				   (+ (cell-column-number preventry overhang) 
</text>
<text>				   prevspan))))))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>  </text>
<text>
</text>
<text>
</text>
<text>;; $Id: dbl10n.dsl,v 1.6 2002/03/20 20:03:30 nwalsh Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ----------------------------- Localization -----------------------------
</text>
<text>
</text>
<text>;; If you create a new version of this file, please send it to
</text>
<text>;; Norman Walsh, ndw@nwalsh.com.  Please use the ISO 639 language
</text>
<text>;; code to identify the language.  Append a subtag as per RFC 1766,
</text>
<text>;; if necessary.
</text>
<text>
</text>
<text>;; The generated text for cross references to elements.  See dblink.dsl
</text>
<text>;; for a discussion of how substitution is performed on the %x and #x
</text>
<text>;; keywords.
</text>
<text>;;
</text>
<text>
</text>
<text>;; The following language codes from ISO 639 are recognized:
</text>
<text>;; af - Afrikaans                           1.71
</text>
<text>;; ca - Catalan
</text>
<text>;; cs - Czech
</text>
<text>;; da - Danish (previously dk)
</text>
<text>;; de - German (previously dege)
</text>
<text>;; el - Greek
</text>
<text>;; en - English (previously usen)
</text>
<text>;; es - Spanish
</text>
<text>;; et - Estonian                            1.55
</text>
<text>;; eu - Basque                              1.74
</text>
<text>;; fi - Finnish
</text>
<text>;; fr - French
</text>
<text>;; hu - Hungarian                           1.55
</text>
<text>;; id - Indonesian                          1.55
</text>
<text>;; it - Italian
</text>
<text>;; ja - Japanese
</text>
<text>;; ko - Korean                              1.59
</text>
<text>;; nl - Dutch
</text>
<text>;; nn - Nnyorsk                             1.74
</text>
<text>;; no - Norwegian (previously bmno) ???
</text>
<text>;; pl - Polish
</text>
<text>;; pt - Portuguese
</text>
<text>;; pt_br - Portuguese (Brazil)
</text>
<text>;; ro - Romanian
</text>
<text>;; ru - Russian
</text>
<text>;; sk - Slovak
</text>
<text>;; sl - Slovenian                           1.55
</text>
<text>;; sr - Serbian                             1.70
</text>
<text>;; sv - Swedish (previously svse)
</text>
<text>;; tr - Turkish                             1.71
</text>
<text>;; uk - Ukranian                            1.74
</text>
<text>;; xh - Xhosa                               1.74
</text>
<text>;; zh_cn - Chinese (Continental)            1.55
</text>
<text>;; zh_tw - Chinese (Traditional)            1.70
</text>
<text>
</text>
<text>;; The following language codes are recognized for historical reasons:
</text>
<text>
</text>
<text>;; bmno(no) - Norwegian (Norsk Bokmal) ???
</text>
<text>;; dege(de) - German
</text>
<text>;; dk(da)   - Danish
</text>
<text>;; svse(sv) - Swedish
</text>
<text>;; usen(en) - English
</text>
<text>
</text>
<text>(define %default-language% &quot;en&quot;)
</text>
<text>(define %gentext-language% #f)
</text>
<text>(define %gentext-use-xref-lang% #f)
</text>
<text>
</text>
<text>(define ($lang$ #!optional (target (current-node)) (xref-context #f))
</text>
<text>  (if %gentext-language%
</text>
<text>      (lang-fix %gentext-language%)
</text>
<text>      (if (or xref-context %gentext-use-xref-lang%)
</text>
<text>	  (let loop ((here target))
</text>
<text>	    (if (node-list-empty? here)
</text>
<text>		(lang-fix %default-language%)
</text>
<text>		(if (attribute-string (normalize</text>
<text> &quot;lang&quot;) here)
</text>
<text>		    (lang-fix (attribute-string (normalize &quot;lang&quot;) here))
</text>
<text>		    (loop (parent here)))))
</text>
<text>	  (if (inherited-attribute-string (normalize &quot;lang&quot;))
</text>
<text>	      (lang-fix (inherited-attribute-string (normalize &quot;lang&quot;)))
</text>
<text>	      (lang-fix %default-language%)))))
</text>
<text>
</text>
<text>(define (lang-fix language)
</text>
<text>  ;; Lowercase the language
</text>
<text>  ;; Translate 'xx-yy' to 'xx_yy'
</text>
<text>  (let ((fixed-lang (if (&gt; (string-index language &quot;-&quot;) 0)
</text>
<text>			(let ((pos (string-index language &quot;-&quot;)))
</text>
<text>			  (string-append
</text>
<text>			   (substring language 0 pos)
</text>
<text>			   &quot;_&quot;
</text>
<text>			   (substring language (+ pos 1)
</text>
<text>				      (string-length language))))
</text>
<text>			language)))
</text>
<text>    (case-fold-down fixed-lang)))
</text>
<text>
</text>
<text>(define (author-string #!optional (author (current-node)))
</text>
<text>  (let ((lang   (if (string? author) ($lang$) ($lang$ author))))
</text>
<text>    (case lang
</text>
<text>      ;; ISO 639/ISO 3166/RFC 1766
</text>
<text>      </text>
<text>   ((&quot;af&quot;)    (af-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;ca&quot;)    (ca-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;cs&quot;)    (cs-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;da&quot;)    (da-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;de&quot;)    (de-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;el&quot;)    (el-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;en&quot;)    (en-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;es&quot;)    (es-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;et&quot;)    (et-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;eu&quot;)    (eu-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;fi&quot;)    (fi-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;fr&quot;)    (fr-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;hu&quot;)    (hu-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;id&quot;)    (id-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;it&quot;)    (it-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;ja&quot;)    (ja-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;ko&quot;)    (ko-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;nl&quot;)    (nl-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;nn&quot;)    (nn-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;no&quot;)    (no-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;pl&quot;)    (pl-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;pt&quot;)    (pt-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;pt_br&quot;)    (ptbr-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;ro&quot;)    (ro-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;ru&quot;)    (ru-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;sk&quot;)    (sk-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;sl&quot;)    (sl-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;sr&quot;)    (sr-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;sv&quot;)    (sv-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;tr&quot;)    (tr-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;uk&quot;)    (uk-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;xh&quot;)    (xh-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;zh_cn&quot;)    (zhcn-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;zh_tw&quot;)    (zhtw-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;bmno&quot;)    (no-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;dege&quot;)    (de-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;dk&quot;)    (da-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;svse&quot;)    (sv-author-string author)) </text>
<text>
</text>
<text>      </text>
<text>   ((&quot;usen&quot;)    (en-author-string author)) </text>
<text>
</text>
<text>      (else (error (string-append &quot;L10N ERROR: author-string: &quot;
</text>
<text>				  lang))))))
</text>
<text>
</text>
<text>(define (gentext-xref-strings target)
</text>
<text>  (let ((giname (if (string? target) (normalize target) (gi target)))
</text>
<text>	(lang   (if (string? target) ($lang$) ($lang$ target))))
</text>
<text>    (case lang
</text>
<text>      </text>
<text> ((&quot;af&quot;) (gentext-af-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ca&quot;) (gentext-ca-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;cs&quot;) (gentext-cs-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;da&quot;) (gentext-da-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;de&quot;) (gentext-de-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;el&quot;) (gentext-el-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;en&quot;) (gentext-en-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;es&quot;) (gentext-es-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> </text>
<text>((&quot;et&quot;) (gentext-et-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;eu&quot;) (gentext-eu-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fi&quot;) (gentext-fi-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fr&quot;) (gentext-fr-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;hu&quot;) (gentext-hu-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;id&quot;) (gentext-id-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;it&quot;) (gentext-it-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ja&quot;) (gentext-ja-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ko&quot;) (gentext-ko-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nl&quot;) (gentext-nl-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nn&quot;) (gentext-nn-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;no&quot;) (gentext-no-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pl&quot;) (gentext-pl-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt&quot;) (gentext-pt-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ro&quot;) (gentext-ro-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ru&quot;) (gentext-ru-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sk&quot;) (gentext-sk-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sl&quot;) (gentext-sl-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sr&quot;) (gentext-sr-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sv&quot;) (gentext-sv-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;tr&quot;) (gentext-tr-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;uk&quot;) (gentext-uk-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;xh&quot;) (gentext-xh-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;bmno&quot;) (gentext-no-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dege&quot;) (gentext-de-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dk&quot;) (gentext-da-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;svse&quot;) (gentext-sv-xref-strings giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;usen&quot;) (gentext-en-xref-strings giname)) </text>
<text>
</text>
<text>      (else (error (string-append &quot;L10N ERROR: gentext-xref-strings: &quot; 
</text>
<text>				  lang))))))
</text>
<text>
</text>
<text>(define (auto-xref-indirect-connector before) 
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (af-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (ca-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (cs-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (da-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (de-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (el-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (en-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (es-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (et-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (eu-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (fi-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (fr-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (hu-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (id-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (it-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (ja-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (ko-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (nl-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (nn-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (no-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (pl-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (pt-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (ptbr-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (ro-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (ru-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (sk-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (sl-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (sr-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (sv-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (tr-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (uk-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (xh-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (zhcn-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (zhtw-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (no-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (de-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (da-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (sv-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (en-auto-xref-indirect-connector before)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: auto-xref-indirect-connector&quot;))))
</text>
<text>
</text>
<text>(define (generate-toc-in-front)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %generate-af-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %generate-ca-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %generate-cs-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %generate-da-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %generate-de-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %generate-el-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %generate-en-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %generate-es-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %generate-et-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %generate-eu-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %generate-fi-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %generate-fr-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %generate-hu-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %generate-id-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %generate-it-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %generate-ja-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %generate-ko-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %generate-nl-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %generate-nn-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %generate-no-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %generate-pl-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %generate-pt-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %generate-ptbr-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %generate-ro-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %generate-ru-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %generate-sk-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %generate-sl-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %generate-sr-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %generate-sv-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %generate-tr-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %generate-uk-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %generate-xh-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %generate-zhcn-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %generate-zhtw-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %generate-no-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %generate-de-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %generate-da-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %generate-sv-toc-in-front%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %generate-en-toc-in-front%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: generate-toc-in-front&quot;))))
</text>
<text>
</text>
<text>(define (gentext-element-name target)
</text>
<text>  (let ((giname (if (string? target) (normalize target) (gi target)))
</text>
<text>	(lang   (if (string? target) ($lang$) ($lang$ target #t))))
</text>
<text>    (case lang
</text>
<text>      </text>
<text> ((&quot;af&quot;) (gentext-af-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ca&quot;) (gentext-ca-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;cs&quot;) (gentext-cs-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;da&quot;) (gentext-da-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;de&quot;) (gentext-de-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;el&quot;) (gentext-el-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;en&quot;) (gentext-en-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;es&quot;) (gentext-es-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;et&quot;) (gentext-et-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;eu&quot;) (gentext-eu-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fi&quot;) (gentext-fi-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fr&quot;) (gentext-fr-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;hu&quot;) (gentext-hu-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;id&quot;) (gentext-id-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;it&quot;) (gentext-it-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ja&quot;) (gentext-ja-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ko&quot;) (gentext-ko-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nl&quot;) (gentext-nl-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nn&quot;) (gentext-nn-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;no&quot;) (gentext-no-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pl&quot;) (gentext-pl-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt&quot;) (gentext-pt-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ro&quot;) (gentext-ro-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ru&quot;) (gentext-ru-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sk&quot;) (gentext-sk-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sl&quot;) (gentext-sl-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sr&quot;) (gentext-sr-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sv&quot;) (gentext-sv-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;tr&quot;) (gentext-tr-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;uk&quot;) (gentext-uk-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;xh&quot;) (gentext-xh-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;bmno&quot;) (gentext-no-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dege&quot;) (gentext-de-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dk&quot;) (gentext-da-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;svse&quot;) (gentext-sv-element-name giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;usen&quot;) (gentext-en-element-name giname)) </text>
<text>
</text>
<text>      (else (error (string-append &quot;L10N ERROR: gentext-element-name: &quot;
</text>
<text>				  lang
</text>
<text>				  &quot; (&quot;
</text>
<text>				  giname
</text>
<text>				  &quot;)&quot;))))))
</text>
<text>
</text>
<text>(define (gentext-element-name-space target)
</text>
<text>  (let ((giname (if (string? target) (normalize target) (gi target)))
</text>
<text>	(lang   (if (string? target) ($lang$) ($lang$ target))))
</text>
<text>    (case lang
</text>
<text>      </text>
<text> ((&quot;af&quot;) (gentext-af-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ca&quot;) (gentext-ca-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;cs&quot;) (gentext-cs-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;da&quot;) (gentext-da-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;de&quot;) (gentext-de-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;el&quot;) (gentext-el-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;en&quot;) (gentext-en-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;es&quot;) (gentext-es-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;et&quot;) (gentext-et-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;eu&quot;) (gentext-eu-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fi&quot;) (gentext-fi-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fr&quot;) (gentext-fr-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;hu&quot;) (gentext-hu-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;id&quot;) (gentext-id-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;it&quot;) (gentext-it-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ja&quot;) (gentext-ja-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ko&quot;) (gentext-ko-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nl&quot;) (gentext-nl-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nn&quot;) (gentext-nn-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;no&quot;) (gentext-no-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pl&quot;) (gentext-pl-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt&quot;) (gentext-pt-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ro&quot;) (gentext-ro-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ru&quot;) (gentext-ru-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sk&quot;) (gentext-sk-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sl&quot;) (gentext-sl-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sr&quot;) (gentext-sr-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sv&quot;) (gentext-sv-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;tr&quot;) (gentext-tr-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;uk&quot;) (gentext-uk-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;xh&quot;) (gentext-xh-element</text>
<text>-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;bmno&quot;) (gentext-no-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dege&quot;) (gentext-de-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dk&quot;) (gentext-da-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;svse&quot;) (gentext-sv-element-name-space giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;usen&quot;) (gentext-en-element-name-space giname)) </text>
<text>
</text>
<text>      (else (error &quot;L10N ERROR: gentext-element-name-space&quot;)))))
</text>
<text>
</text>
<text>(define (gentext-intra-label-sep target)
</text>
<text>  (let ((giname (if (string? target) (normalize target) (gi target)))
</text>
<text>	(lang   (if (string? target) ($lang$) ($lang$ target))))
</text>
<text>    (case lang
</text>
<text>      </text>
<text> ((&quot;af&quot;) (gentext-af-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ca&quot;) (gentext-ca-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;cs&quot;) (gentext-cs-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;da&quot;) (gentext-da-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;de&quot;) (gentext-de-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;el&quot;) (gentext-el-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;en&quot;) (gentext-en-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;es&quot;) (gentext-es-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;et&quot;) (gentext-et-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;eu&quot;) (gentext-eu-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fi&quot;) (gentext-fi-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fr&quot;) (gentext-fr-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;hu&quot;) (gentext-hu-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;id&quot;) (gentext-id-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;it&quot;) (gentext-it-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ja&quot;) (gentext-ja-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ko&quot;) (gentext-ko-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nl&quot;) (gentext-nl-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nn&quot;) (gentext-nn-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;no&quot;) (gentext-no-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pl&quot;) (gentext-pl-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt&quot;) (gentext-pt-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ro&quot;) (gentext-ro-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ru&quot;) (gentext-ru-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sk&quot;) (gentext-sk-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sl&quot;) (gentext-sl-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sr&quot;) (gentext-sr-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sv&quot;) (gentext-sv-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;tr&quot;) (gentext-tr-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;uk&quot;) (gentext-uk-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;xh&quot;) (gentext-xh-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;bmno&quot;) (gentext-no-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dege&quot;) (gentext-de-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dk&quot;) (gentext-da-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;svse&quot;) (gentext-sv-intra-label-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;usen&quot;) (gentext-en-intra-label-sep giname)) </text>
<text>
</text>
<text>      (else (error &quot;L10N ERROR: gentext-intra-label-sep&quot;)))))
</text>
<text>
</text>
<text>(define (gentext-label-title-sep target)
</text>
<text>  (let ((giname (if (string? target) (normalize target) (gi target)))
</text>
<text>	(lang   (if (string? target) ($lang$) ($lang$ target))))
</text>
<text>    (case lang
</text>
<text>      </text>
<text> ((&quot;af&quot;) (gentext-af-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ca&quot;) (gentext-ca-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;cs&quot;) (gentext-cs-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;da&quot;) (gentext-da-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;de&quot;) (gentext-de-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;el&quot;) (gentext-el-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;en&quot;) (gentext-en-label-title-sep giname)) </text>
<text>
</text>
<text>   </text>
<text>   </text>
<text> ((&quot;es&quot;) (gentext-es-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;et&quot;) (gentext-et-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;eu&quot;) (gentext-eu-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fi&quot;) (gentext-fi-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fr&quot;) (gentext-fr-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;hu&quot;) (gentext-hu-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;id&quot;) (gentext-id-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;it&quot;) (gentext-it-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ja&quot;) (gentext-ja-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ko&quot;) (gentext-ko-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nl&quot;) (gentext-nl-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nn&quot;) (gentext-nn-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;no&quot;) (gentext-no-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pl&quot;) (gentext-pl-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt&quot;) (gentext-pt-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ro&quot;) (gentext-ro-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ru&quot;) (gentext-ru-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sk&quot;) (gentext-sk-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sl&quot;) (gentext-sl-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sr&quot;) (gentext-sr-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sv&quot;) (gentext-sv-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;tr&quot;) (gentext-tr-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;uk&quot;) (gentext-uk-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;xh&quot;) (gentext-xh-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;bmno&quot;) (gentext-no-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dege&quot;) (gentext-de-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dk&quot;) (gentext-da-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;svse&quot;) (gentext-sv-label-title-sep giname)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;usen&quot;) (gentext-en-label-title-sep giname)) </text>
<text>
</text>
<text>      (else (error &quot;L10N ERROR: gentext-label-title-sep&quot;)))))
</text>
<text>
</text>
<text>(define (label-number-format target)
</text>
<text>  (let ((giname (if (string? target) (normalize target) (gi target)))
</text>
<text>	(lang   (if (string? target) ($lang$) ($lang$ target))))
</text>
<text>    (case lang
</text>
<text>      </text>
<text> ((&quot;af&quot;) (af-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ca&quot;) (ca-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;cs&quot;) (cs-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;da&quot;) (da-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;de&quot;) (de-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;el&quot;) (el-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;en&quot;) (en-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;es&quot;) (es-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;et&quot;) (et-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;eu&quot;) (eu-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fi&quot;) (fi-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;fr&quot;) (fr-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;hu&quot;) (hu-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;id&quot;) (id-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;it&quot;) (it-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ja&quot;) (ja-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ko&quot;) (ko-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nl&quot;) (nl-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;nn&quot;) (nn-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;no&quot;) (no-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pl&quot;) (pl-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt&quot;) (pt-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;pt_br&quot;) (ptbr-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ro&quot;) (ro-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;ru&quot;) (ru-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sk&quot;) (sk-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sl&quot;) (sl-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;sr&quot;) (sr-label-number-format target)) </text>
<text>
</text>
<text>  </text>
<text>    </text>
<text> ((&quot;sv&quot;) (sv-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;tr&quot;) (tr-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;uk&quot;) (uk-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;xh&quot;) (xh-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_cn&quot;) (zhcn-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;zh_tw&quot;) (zhtw-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;bmno&quot;) (no-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dege&quot;) (de-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;dk&quot;) (da-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;svse&quot;) (sv-label-number-format target)) </text>
<text>
</text>
<text>      </text>
<text> ((&quot;usen&quot;) (en-label-number-format target)) </text>
<text>
</text>
<text>      (else (error &quot;L10N ERROR: label-number-format&quot;)))))
</text>
<text>
</text>
<text>(define ($lot-title$ lotgi)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) ($lot-title-af$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) ($lot-title-ca$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) ($lot-title-cs$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) ($lot-title-da$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) ($lot-title-de$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) ($lot-title-el$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) ($lot-title-en$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) ($lot-title-es$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) ($lot-title-et$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) ($lot-title-eu$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) ($lot-title-fi$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) ($lot-title-fr$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) ($lot-title-hu$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) ($lot-title-id$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) ($lot-title-it$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) ($lot-title-ja$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) ($lot-title-ko$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) ($lot-title-nl$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) ($lot-title-nn$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) ($lot-title-no$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) ($lot-title-pl$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) ($lot-title-pt$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) ($lot-title-ptbr$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) ($lot-title-ro$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) ($lot-title-ru$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) ($lot-title-sk$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) ($lot-title-sl$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) ($lot-title-sr$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) ($lot-title-sv$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) ($lot-title-tr$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) ($lot-title-uk$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) ($lot-title-xh$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) ($lot-title-zhcn$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) ($lot-title-zhtw$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) ($lot-title-no$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) ($lot-title-de$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) ($lot-title-da$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) ($lot-title-sv$ lotgi)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) ($lot-title-en$ lotgi)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: $lot-title$&quot;))))
</text>
<text>
</text>
<text>(define (gentext-start-quote)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-start-quote%)</text>
<text> </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-start-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-start-quote%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-start-quote&quot;))))
</text>
<text>
</text>
<text>(define (gentext-end-quote)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-end-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-end-quote%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-end-quote&quot;))))
</text>
<text>
</text>
<text>(define (gentext-start-nested-quote)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-start-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-start-nested-quote%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-start-nested-quote&quot;))))
</text>
<text>
</text>
<text>(define (gentext-end-nested-quote)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-end-nested-quote%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-end-nested-quote%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-end-nested-quote&quot;))))
</text>
<text>
</text>
<text>(define (gentext-by)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) </text>
<text>%gentext-en-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-by%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-by&quot;))))
</text>
<text>
</text>
<text>(define (gentext-edited-by)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-edited-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-edited-by%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-edited-by&quot;))))
</text>
<text>
</text>
<text>(define (gentext-revised-by)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-revised-by%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-revised-by%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-revised-by&quot;))))
</text>
<text>
</text>
<text>(define (gentext-page)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-page%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-page%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-page&quot;))))
</text>
<text>
</text>
<text>(define (gentext-and)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-and%) </text>
<text>
</text>
<text>    </text>
<text> </text>
<text>((&quot;hu&quot;) %gentext-hu-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-and%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-and%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-and&quot;))))
</text>
<text>
</text>
<text>(define (gentext-listcomma)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-listcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-listcomma%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-listcomma&quot;))))
</text>
<text>
</text>
<text>(define (gentext-lastlistcomma)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-lastlistcomma%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-lastlistcomma%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-lastlistcomma&quot;))))
</text>
<text>
</text>
<text>(define (gentext-bibl-pages)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-bibl-pages%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-bibl-pages%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-bibl-pages&quot;))))
</text>
<text>
</text>
<text>(define (gentext-endnotes)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-endnotes%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-endnotes&quot;))))
</text>
<text>
</text>
<text>(define (gentext-table-endnotes)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-table-endnotes%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-table-endnotes%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-table-endnotes&quot;))))
</text>
<text>
</text>
<text>(define (gentext-index-see)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-index-see%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-index-see%) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-index-see&quot;))))
</text>
<text>
</text>
<text>(define (gentext-index-seealso)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) %gentext-af-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) %gentext-ca-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) %gentext-cs-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) %gentext-da-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) %gentext-de-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) %gentext-el-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) %gentext-en-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) %gentext-es-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) %gentext-et-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) %gentext-eu-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) %gentext-fi-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) %gentext-fr-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) %gentext-hu-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) %gentext-id-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) %gentext-it-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) %gentext-ja-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) %gentext-ko-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) %gentext-nl-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) %gentext-nn-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) %gentext-no-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) %gentext-pl-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) %gentext-pt-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) %gentext-ptbr-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) %gentext-ro-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) %gentext-ru-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) %gentext-sk-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) %gentext-sl-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) %gentext-sr-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) %gentext-sv-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) %gentext-tr-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) %gentext-uk-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) %gentext-xh-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) %gentext-zhcn-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) %gentext-zhtw-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) %gentext-no-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) %gentext-de-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) %gentext-da-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) %gentext-sv-index-seealso%) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) %gentext-en-index-seealso%) </text>
<text>
</text>
<text>  </text>
<text>  (else (error &quot;L10N ERROR: gentext-index-seealso&quot;))))
</text>
<text>
</text>
<text>(define (gentext-nav-prev prev) 
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (gentext-af-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (gentext-ca-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (gentext-cs-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (gentext-da-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (gentext-de-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (gentext-el-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (gentext-en-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (gentext-es-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (gentext-et-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (gentext-eu-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (gentext-fi-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (gentext-fr-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (gentext-hu-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (gentext-id-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (gentext-it-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (gentext-ja-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (gentext-ko-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (gentext-nl-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (gentext-nn-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (gentext-no-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (gentext-pl-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (gentext-pt-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (gentext-ro-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (gentext-ru-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (gentext-sk-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (gentext-sl-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (gentext-sr-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (gentext-sv-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (gentext-tr-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (gentext-uk-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (gentext-xh-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (gentext-no-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (gentext-de-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (gentext-da-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (gentext-sv-nav-prev prev)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (gentext-en-nav-prev prev)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-nav-prev&quot;))))
</text>
<text>
</text>
<text>(define (gentext-nav-prev-sibling prevsib) 
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (gentext-af-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (gentext-ca-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (gentext-cs-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (gentext-da-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (gentext-de-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (gentext-el-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (gentext-en-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (gentext-es-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (gentext-et-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (gentext-eu-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (gentext-fi-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (gentext-fr-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (gentext-hu-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (gentext-id-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (gentext-it-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (gentext-ja-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (gentext-ko-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (gentext-nl-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (gentext-nn-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (gentext-no-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (gentext-pl-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (gentext-pt-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (gentext-ro-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (gentext-ru-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (gentext-sk-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (gentext-sl-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (gentext-sr-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (gentext-sv-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (gentext-tr-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (gentext-uk-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (gentext-xh-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (gentext-no-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (gentext-de-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (gentext-da-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (gentext-sv-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (gentext-en-nav-prev-sibling prevsib)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-nav-prev-sibling &quot;))))
</text>
<text>
</text>
<text>(define (gentext-nav-next-sibling nextsib)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (gentext-af-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (gentext-ca-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (gentext-cs-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (gentext-da-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (gentext-de-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (gentext-el-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (gentext-en-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (gentext-es-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (gentext-et-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (gentext-eu-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (gentext-fi-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (gentext-fr-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (gentext-hu-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (gentext-id-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (gentext-it-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (gentext-ja-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (gentext-ko-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (gentext-nl-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (gentext-nn-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (gentext-no-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (gentext-pl-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (gentext-pt-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (gentext-ro-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (gentext-ru-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (gentext-sk-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (gentext-sl-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (gentext-sr-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (gentext-sv-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (gentext-tr-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (gentext-uk-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (gentext-xh-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (gentext-no-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (gentext-de-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (gentext-da-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (gentext-sv-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (gentext-en-nav-next-sibling nextsib)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-nav-next-sibling&quot;))))
</text>
<text>
</text>
<text>(define (gentext-nav-next next)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (gentext-af-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (gentext-ca-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (gentext-cs-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (gentext-da-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (gentext-de-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (gentext-el-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (gentext-en-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (gentext-es-nav</text>
<text>-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (gentext-et-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (gentext-eu-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (gentext-fi-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (gentext-fr-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (gentext-hu-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (gentext-id-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (gentext-it-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (gentext-ja-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (gentext-ko-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (gentext-nl-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (gentext-nn-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (gentext-no-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (gentext-pl-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (gentext-pt-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (gentext-ro-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (gentext-ru-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (gentext-sk-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (gentext-sl-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (gentext-sr-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (gentext-sv-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (gentext-tr-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (gentext-uk-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (gentext-xh-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (gentext-no-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (gentext-de-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (gentext-da-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (gentext-sv-nav-next next)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (gentext-en-nav-next next)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-nav-next&quot;))))
</text>
<text>
</text>
<text>(define (gentext-nav-up up)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (gentext-af-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (gentext-ca-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (gentext-cs-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (gentext-da-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (gentext-de-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (gentext-el-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (gentext-en-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (gentext-es-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (gentext-et-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (gentext-eu-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (gentext-fi-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (gentext-fr-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (gentext-hu-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (gentext-id-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (gentext-it-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (gentext-ja-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (gentext-ko-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (gentext-nl-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (gentext-nn-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (gentext-no-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (gentext-pl-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (gentext-pt-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (gentext-ro-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (gentext-ru-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (gentext-sk-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (gentext-sl-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (gentext-sr-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (gentext-sv-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (gentext-tr-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (gentext-uk-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (gentext-xh-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (gentext-no-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (gentext-de-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (gentext-da-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (gentext-sv-nav-up up)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (gentext-en-nav-up up)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-nav-up&quot;))))
</text>
<text>
</text>
<text>(define (gentext-nav-home home)
</text>
<text>  (case ($lang$)
</text>
<text>    </text>
<text> ((&quot;af&quot;) (gentext-af-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ca&quot;) (gentext-ca-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;cs&quot;) (gentext-cs-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;da&quot;) (gentext-da-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;de&quot;) (gentext-de-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;el&quot;) (gentext-el-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;en&quot;) (gentext-en-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;es&quot;) (gentext-es-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;et&quot;) (gentext-et-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;eu&quot;) (gentext-eu-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fi&quot;) (gentext-fi-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;fr&quot;) (gentext-fr-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;hu&quot;) (gentext-hu-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;id&quot;) (gentext-id-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;it&quot;) (gentext-it-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ja&quot;) (gentext-ja-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ko&quot;) (gentext-ko-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nl&quot;) (gentext-nl-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;nn&quot;) (gentext-nn-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;no&quot;) (gentext-no-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pl&quot;) (gentext-pl-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt&quot;) (gentext-pt-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;pt_br&quot;) (gentext-ptbr-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ro&quot;) (gentext-ro-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;ru&quot;) (gentext-ru-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sk&quot;) (gentext-sk-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sl&quot;) (gentext-sl-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sr&quot;) (gentext-sr-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;sv&quot;) (gentext-sv-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;tr&quot;) (gentext-tr-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;uk&quot;) (gentext-uk-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;xh&quot;) (gentext-xh-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_cn&quot;) (gentext-zhcn-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;zh_tw&quot;) (gentext-zhtw-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;bmno&quot;) (gentext-no-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dege&quot;) (gentext-de-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;dk&quot;) (gentext-da-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;svse&quot;) (gentext-sv-nav-home home)) </text>
<text>
</text>
<text>    </text>
<text> ((&quot;usen&quot;) (gentext-en-nav-home home)) </text>
<text>
</text>
<text>    (else (error &quot;L10N ERROR: gentext-nav-home&quot;))))
</text>
<text>    </text>
<text>
</text>
<text>
</text>
<text>;; $Id: dbadmon.dsl,v 1.4 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================ ADMONITIONS =============================
</text>
<text>
</text>
<text>(define ($graphical-admonition$)
</text>
<text>  (let* ((adm       (current-node))
</text>
<text>	 (title     (select-elements (children adm) 
</text>
<text>				     (normalize &quot;title&quot;)))
</text>
<text>	 (title?    (not (node-list-empty? title)))
</text>
<text>	 (adm-title (if title?
</text>
<text>			(with-mode title-sosofo-mode
</text>
<text>			  (process-node-list (node-list-first title)))
</text>
<text>			(literal (gentext-element-name adm))))
</text>
<text>	 (graphic   (make external-graphic
</text>
<text>		      display?: #f
</text>
<text>		      entity-system-id: ($admon-graphic$)))
</text>
<text>	 (f-child   (node-list-first (children (current-node))))
</text>
<text>	 (r-child   (node-list-rest (children (current-node)))))
</text>
<text>    (make display-group
</text>
<text>      space-before: %block-sep%
</text>
<text>      space-after: %block-sep%
</text>
<text>      start-indent: (+ (inherited-start-indent) ($admon-graphic-width$))
</text>
<text>      font-family-name: %admon-font-family%
</text>
<text>      font-size: (- %bf-size% 1pt)
</text>
<text>      font-weight: 'medium
</text>
<text>      font-posture: 'upright
</text>
<text>      line-spacing: (* (- %bf-size% 1pt) %line-spacing-factor%)
</text>
<text>      (if title?
</text>
<text>	  (make display-group
</text>
<text>	    (make paragraph
</text>
<text>	      first-line-start-indent: (- ($admon-graphic-width$))
</text>
<text>	      (make line-field
</text>
<text>		field-width: ($admon-graphic-width$)
</text>
<text>		graphic)
</text>
<text>	      (make sequence
</text>
<text>		font-family-name: %title-font-family%
</text>
<text>		font-weight: 'bold
</text>
<text>		adm-title))
</text>
<text>	    (process-children))
</text>
<text>	  (make display-group
</text>
<text>	    (make paragraph
</text>
<text>	      first-line-start-indent: (- ($admon-graphic-width$))
</text>
<text>	      (make line-field
</text>
<text>		field-width: ($admon-graphic-width$)
</text>
<text>		graphic)
</text>
<text>	      (process-node-list (children f-child)))
</text>
<text>	    (process-node-list r-child))))))
</text>
<text>
</text>
<text>(define ($admonition$)
</text>
<text>  (if %admon-graphics%
</text>
<text>     </text>
<text> ($graphical-admonition$)
</text>
<text>      (make display-group
</text>
<text>	space-before: %block-sep%
</text>
<text>	space-after: %block-sep%
</text>
<text>	start-indent: (if %admon-graphics%
</text>
<text>			  (inherited-start-indent)
</text>
<text>			  (+ (inherited-start-indent) (* (ILSTEP) 2)))
</text>
<text>	font-size: (- %bf-size% 1pt)
</text>
<text>	font-weight: 'medium
</text>
<text>	font-posture: 'upright
</text>
<text>	font-family-name: %admon-font-family%
</text>
<text>	line-spacing: (* (- %bf-size% 1pt) %line-spacing-factor%)
</text>
<text>	(process-children))))
</text>
<text>
</text>
<text>(define ($admonpara$)
</text>
<text>  (let* ((title     (select-elements 
</text>
<text>		     (children (parent (current-node))) (normalize &quot;title&quot;)))
</text>
<text>	 (has-title (not (node-list-empty? title)))
</text>
<text>	 (adm-title (if has-title 
</text>
<text>			(make sequence
</text>
<text>			  (with-mode title-sosofo-mode
</text>
<text>			    (process-node-list (node-list-first title)))
</text>
<text>			  (literal (gentext-label-title-sep 
</text>
<text>				    (gi (parent (current-node))))))
</text>
<text>			(literal
</text>
<text>			 (gentext-element-name 
</text>
<text>			  (parent (current-node)))
</text>
<text>			 (gentext-label-title-sep 
</text>
<text>			  (gi (parent (current-node))))))))
</text>
<text>    (make paragraph
</text>
<text>      space-before: %para-sep%
</text>
<text>      space-after: %para-sep%
</text>
<text>      (if (and (not %admon-graphics%) (= (child-number) 1))
</text>
<text>	  (make sequence
</text>
<text>	    font-family-name: %title-font-family%
</text>
<text>	    font-weight: 'bold
</text>
<text>	    adm-title)
</text>
<text>	  (empty-sosofo))
</text>
<text>      (process-children-trim))))
</text>
<text>
</text>
<text>(element important ($admonition$))
</text>
<text>(element (important title) (empty-sosofo))
</text>
<text>(element (important para) ($admonpara$))
</text>
<text>(element (important simpara) ($admonpara$))
</text>
<text>
</text>
<text>(element note ($admonition$))
</text>
<text>(element (note title) (empty-sosofo))
</text>
<text>(element (note para) ($admonpara$))
</text>
<text>(element (note simpara) ($admonpara$))
</text>
<text>
</text>
<text>(element tip ($admonition$))
</text>
<text>(element (tip title) (empty-sosofo))
</text>
<text>(element (tip para) ($admonpara$))
</text>
<text>(element (tip simpara) ($admonpara$))
</text>
<text>
</text>
<text>;; perils are given special treatment by generating a centered title
</text>
<text>;;   and throwing a box around them
</text>
<text>;; note that the paragraph indents are set by the box characteristics
</text>
<text>;;
</text>
<text>(define ($peril$)
</text>
<text>  (let* ((title     (select-elements 
</text>
<text>		     (children (current-node)) (normalize &quot;title&quot;)))
</text>
<text>	 (has-title (not (node-list-empty? title)))
</text>
<text>	 (adm-title (if has-title 
</text>
<text>			(make sequence
</text>
<text>			  (with-mode title-sosofo-mode
</text>
<text>			    (process-node-list (node-list-first title))))
</text>
<text>			(literal
</text>
<text>			 (gentext-element-name 
</text>
<text>			  (current-node)))))
</text>
<text>	 (hs (HSIZE 2)))
</text>
<text>  (if %admon-graphics%
</text>
<text>      ($graphical-admonition$)
</text>
<text>      (make display-group
</text>
<text>	space-before: %block-sep%
</text>
<text>	space-after: %block-sep%
</text>
<text>	font-family-name: %admon-font-family%
</text>
<text>	font-size: (- %bf-size% 1pt)
</text>
<text>	font-weight: 'medium
</text>
<text>	font-posture: 'upright
</text>
<text>	line-spacing: (* (- %bf-size% 1pt) %line-spacing-factor%)
</text>
<text>	(make box
</text>
<text>	  display?: #t
</text>
<text>	  box-type: 'border
</text>
<text>	  line-thickness: 2pt
</text>
<text>	  start-indent: (+ (inherited-start-indent) (* 2 (ILSTEP)) 2pt)
</text>
<text>	  end-indent: (inherited-end-indent)
</text>
<text>	  (make paragraph
</text>
<text>	    space-before: %para-sep%
</text>
<text>	    space-after: %para-sep%
</text>
<text>	    start-indent: 1em
</text>
<text>	    end-indent: 1em
</text>
<text>	    font-family-name: %title-font-family%
</text>
<text>	    font-weight: 'bold
</text>
<text>	    font-size: hs
</text>
<text>	    line-spacing: (* hs %line-spacing-factor%)
</text>
<text>	    quadding: 'center
</text>
<text>	    keep-with-next?: #t
</text>
<text>	    adm-title)
</text>
<text>	  (process-children))))))
</text>
<text>
</text>
<text>(element caution ($peril$))
</text>
<text>(element (caution title) (empty-sosofo))
</text>
<text>
</text>
<text>(element warning ($peril$))
</text>
<text>(element (warning title) (empty-sosofo))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbautoc.dsl,v 1.4 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ========================== TABLE OF CONTENTS =========================
</text>
<text>
</text>
<text>(define %toc-indent% 2pi)
</text>
<text>(define %toc-spacing-factor% 0.4)
</text>
<text>
</text>
<text>;; Returns the depth of auto TOC that should be made at the nd-level
</text>
<text>(define (toc-depth nd)
</text>
<text>  (if (string=? (gi nd) (normalize &quot;book&quot;))
</text>
<text>      7
</text>
<text>      1))
</text>
<text>
</text>
<text>(define (format-page-number)
</text>
<text>  (current-node-page-number-sosofo))
</text>
<text>
</text>
<text>;; Prints the TOC title if first? is true, otherwise does nothing
</text>
<text>(define (toc-title first?)
</text>
<text>  (let ((hsize (if (or (equal? (gi (current-node)) (normalize &quot;article&quot;))
</text>
<text>		       (equal? (gi (current-node)) (normalize &quot;part&quot;)))
</text>
<text>		   (HSIZE 3)
</text>
<text>		   (HSIZE 4))))
</text>
<text>    (if first?
</text>
<text>	(make paragraph
</text>
<text>	  font-family-name: %title-font-family%
</text>
<text>	  font-weight: 'bold
</text>
<text>	  font-size: hsize
</text>
<text>	  line-spacing: (* hsize %line-spacing-factor%)
</text>
<text>	  space-before: (* hsize %head-before-factor%)
</text>
<text>	  space-after: (* hsize %head-after-factor%)
</text>
<text>	  start-indent: 0pt
</text>
<text>	  first-line-start-indent: 0pt
</text>
<text>	  quadding: %component-title-quadding%
</text>
<text>	  heading-level: (if %generate-heading-level% 1 0)
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal (gentext-element-name (normalize &quot;toc&quot;))))
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>;; Prints the TOC title if first? is true, otherwise does nothing
</text>
<text>(define (lot-title first? lotgi)
</text>
<text>  (if first?
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight: 'bold
</text>
<text>	font-size: (HSIZE 4)
</text>
<text>	line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>	space-after: (* (HSIZE 4) %head-after-factor%)
</text>
<text>	start-indent: 0pt
</text>
<text>	first-line-start-indent: 0pt
</text>
<text>	quadding: %component-title-quadding%
</text>
<text>	heading-level: (if %generate-heading-level% 1 0)
</text>
<text>	keep-with-next?: #t
</text>
<text>	(literal ($lot-title$ lotgi)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>;; Print the TOC entry for tocentry  
</text>
<text>(define ($toc-entry$ tocentry level)
</text>
<text>  (make paragraph
</text>
<text>    start-indent: (+ %body-start-indent%
</text>
<text>		     (* %toc-indent% level))
</text>
<text>    first-line-start-indent: (* -1 %toc-indent%)
</text>
<text>    font-weight: (if (= level 1) 'bold 'medium)
</text>
<text>    space-before: (if (= level 1) (* %toc-spacing-factor% 6pt) 0pt)
</text>
<text>    space-after: (if (= level 1) (* %toc-spacing-factor% 6pt) 0pt)
</text>
<text>    keep-with-next?: (if (= level 1) #t #f)
</text>
<text>    quadding: 'start
</text>
<text>    (make link
</text>
<text>      destination: (node-list-address tocentry)
</text>
<text>      (make sequence
</text>
<text>	(if (equal? (element-label tocentry) &quot;&quot;)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (element-label-sosofo tocentry)
</text>
<text>	      (literal (gentext-label-title-sep (gi tocentry)))))
</text>
<text>	(element-title-sosofo tocentry)))
</text>
<text>    (if (and (= level 1)
</text>
<text>	     ;; ??? %chapter-title-page-separate%
</text>
<text>	     %page-number-restart%)
</text>
<text>	(empty-sosofo)    ;; Don't need the leader etc then
</text>
<text>	(make sequence
</text>
<text>	  (make leader (literal &quot;.&quot;))
</text>
<text>	  (make link
</text>
<text>	    destination: (node-list-address tocentry)
</text>
<text>	    (make sequence
</text>
<text>	      (if %page-number-restart%
</text>
<text>		  (literal
</text>
<text>		   (string-append
</text>
<text>		    (if (= level 1)
</text>
<text>			(element-label tocentry #t)
</text>
<text>			(substring (element-label tocentry #t)
</text>
<text>				   0 (string-index (element-label tocentry #t) &quot;.&quot;)))
</text>
<text>		    (gentext-intra-label-sep &quot;_pagenumber&quot;)))
</text>
<text>		  (empty-sosofo))
</text>
<text>	      (with-mode toc-page-number-mode
</text>
<text>		(process-node-list tocentry))))))))
</text>
<text>
</text>
<text>;; Build a TOC starting at nd reaching down depth levels.
</text>
<text>;; The optional arguments are used on recursive calls to build-toc
</text>
<text>;; and shouldn't be set by the initial caller...
</text>
<text>;;
</text>
<text>(define (build-toc nd depth #!optional (first? #t) (level 1))
</text>
<text>  (let* ((toclist (toc-list-filter
</text>
<text>		   (node-list-filter-by-gi (children nd)
</text>
<text>					   (append (division-element-list)
</text>
<text>						   (component-element-list)
</text>
<text>						   (section-element-list))))))
</text>
<text>    (if (or (&lt;= depth 0)
</text>
<text>	    (node-list-empty? toclist))
</text>
<text>	(empty-sosofo)
</text>
<text>	(make sequence
</text>
<text>	  (toc-title first?)
</text>
<text>	  (let loop ((nl toclist))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(sosofo-append
</text>
<text>		  ($toc-entry$ (node-list-first nl) level)
</text>
<text>		  (build-toc (node-list-first nl) (- depth 1) #f (+ level 1))
</text>
<text>		  </text>
<text>(loop (node-list-rest nl)))))))))
</text>
<text>
</text>
<text>;; Print the LOT entry
</text>
<text>(define ($lot-entry$ tocentry)
</text>
<text>  (make paragraph
</text>
<text>    start-indent: (+ %body-start-indent% %toc-indent%)
</text>
<text>    first-line-start-indent: (* -1 %toc-indent%)
</text>
<text>    font-weight: 'medium
</text>
<text>    space-before: 0pt
</text>
<text>    space-after: 0pt
</text>
<text>    quadding: 'start
</text>
<text>    (make link
</text>
<text>      destination: (node-list-address tocentry)
</text>
<text>      (make sequence
</text>
<text>	(if (equal? (element-label tocentry) &quot;&quot;)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (element-label-sosofo tocentry #t)
</text>
<text>	      (literal (gentext-label-title-sep (gi tocentry)))))
</text>
<text>	(element-title-sosofo tocentry)))
</text>
<text>    (make leader (literal &quot;.&quot;))
</text>
<text>    (make link
</text>
<text>      destination: (node-list-address tocentry)
</text>
<text>      (make sequence
</text>
<text>	(if %page-number-restart%
</text>
<text>	    (make sequence
</text>
<text>	     (literal (substring (element-label tocentry #t)
</text>
<text>			0 (string-index (element-label tocentry #t) &quot;-&quot;)))
</text>
<text>	     (literal (gentext-intra-label-sep &quot;_pagenumber&quot;)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(with-mode toc-page-number-mode
</text>
<text>	  (process-node-list tocentry))))))
</text>
<text>
</text>
<text>;; Build a LOT starting at nd for all the lotgi's it contains.
</text>
<text>;; The optional arguments are used on recursive calls to build-toc
</text>
<text>;; and shouldn't be set by the initial caller...
</text>
<text>;;
</text>
<text>(define (build-lot nd lotgi #!optional (first? #t))
</text>
<text>  (let* ((lotlist (select-elements (descendants nd)
</text>
<text>				   (normalize lotgi))))
</text>
<text>    (if (node-list-empty? lotlist)
</text>
<text>	(empty-sosofo)
</text>
<text>	(make sequence
</text>
<text>	  (lot-title first? lotgi)
</text>
<text>	  (let loop ((nl lotlist))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (if (string=? (gi (node-list-first nl)) lotgi)
</text>
<text>		      ($lot-entry$ (node-list-first nl))
</text>
<text>		      (empty-sosofo))
</text>
<text>		  (build-lot (node-list-first nl) lotgi #f)
</text>
<text>		  (loop (node-list-rest nl)))))))))
</text>
<text>
</text>
<text>(mode toc-page-number-mode
</text>
<text>  (default
</text>
<text>    (format-page-number)))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbbibl.dsl,v 1.2 2002/06/09 12:04:09 nwalsh Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ......................... BIBLIOGRAPHY PARAMS .........................
</text>
<text>
</text>
<text>;; these should be in dbparam...
</text>
<text>(define %biblsep% &quot;, &quot;)
</text>
<text>(define %biblend% &quot;.&quot;)
</text>
<text>
</text>
<text>(define %biblioentry-in-entry-order% #t)
</text>
<text>
</text>
<text>;; .................... BIBLIOGRAPHY and BIBLIODIV ......................
</text>
<text>
</text>
<text>(define (bibliography-content)
</text>
<text>  ;; Note that the code below works for both the case where the bibliography
</text>
<text>  ;; has BIBLIODIVs and the case where it doesn't, by the slightly subtle
</text>
<text>  ;; fact that if it does, then allentries will be (empty-node-list).
</text>
<text>  (let* ((allbibcontent (children (current-node)))
</text>
<text>	 (prebibcontent (node-list-filter-by-not-gi 
</text>
<text>			 allbibcontent
</text>
<text>			 (list (normalize &quot;biblioentry&quot;)
</text>
<text>			       (normalize &quot;bibliomixed&quot;))))
</text>
<text>	 (allentries    (node-list-filter-by-gi 
</text>
<text>			 allbibcontent
</text>
<text>			 (list (normalize &quot;biblioentry&quot;)
</text>
<text>			       (normalize &quot;bibliomixed&quot;))))
</text>
<text>	 (entries       (if biblio-filter-used
</text>
<text>			    (biblio-filter allentries)
</text>
<text>			    allentries)))
</text>
<text>    (make sequence
</text>
<text>      (process-node-list prebibcontent)
</text>
<text>      (process-node-list entries))))
</text>
<text>
</text>
<text>(element (book bibliography)
</text>
<text>  (make simple-page-sequence
</text>
<text>    page-n-columns: %page-n-columns%
</text>
<text>    page-number-restart?: (or %page-number-restart% 
</text>
<text>			      (book-start?) 
</text>
<text>			      (first-chapter?))
</text>
<text>    page-number-format: ($page-number-format$)
</text>
<text>    use: default-text-style
</text>
<text>    left-header:   ($left-header$)
</text>
<text>    center-header: ($center-header$)
</text>
<text>    right-header:  ($right-header$)
</text>
<text>    left-footer:   ($left-footer$)
</text>
<text>    center-footer: ($center-footer$)
</text>
<text>    right-footer:  ($right-footer$)
</text>
<text>    start-indent: %body-start-indent%
</text>
<text>    input-whitespace-treatment: 'collapse
</text>
<text>    quadding: %default-quadding%
</text>
<text>    (make sequence
</text>
<text>      ($component-title$)
</text>
<text>      (bibliography-content))
</text>
<text>    (make-endnotes)))
</text>
<text>
</text>
<text>(element bibliography
</text>
<text>  ;; A bibliography that's inside something else...
</text>
<text>  (let* ((sect   (ancestor-member (current-node) 
</text>
<text>				  (append (section-element-list)
</text>
<text>					  (component-element-list))))
</text>
<text>	 (hlevel (+ (SECTLEVEL sect) 1))
</text>
<text>	 (hs     (HSIZE (- 4 hlevel))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight:  (if (&lt; hlevel 5) 'bold 'medium)
</text>
<text>	font-posture: (if (&lt; hlevel 5) 'upright 'italic)
</text>
<text>	font-size: hs
</text>
<text>	line-spacing: (* hs %line-spacing-factor%)
</text>
<text>	space-before: (* hs %head-before-factor%)
</text>
<text>	space-after:  (* hs %head-after-factor%)
</text>
<text>	start-indent: (if (or (&gt;= hlevel 3)
</text>
<text>			      (member (gi) (list (normalize &quot;refsect1&quot;) 
</text>
<text>						 (normalize &quot;refsect2&quot;) 
</text>
<text>						 (normalize &quot;refsect3&quot;))))
</text>
<text>			  %body-start-indent%
</text>
<text>			  0pt)
</text>
<text>	first-line-start-indent: 0pt
</text>
<text>	quadding: %section-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	heading-level: (if %generate-heading-level% (+ hlevel 1) 0)
</text>
<text>	(element-title-sosofo (current-node)))
</text>
<text>      (bibliography-content))))
</text>
<text>
</text>
<text>(element (bibliography title) (empty-sosofo))
</text>
<text>
</text>
<text>(element bibliodiv
</text>
<text>  (let* ((allentries (node-list-filter-by-gi (children (current-node))
</text>
<text>					     (list (normalize &quot;biblioentry&quot;)
</text>
<text>						   (normalize &quot;bibliomixed&quot;))))
</text>
<text>	 (entries (if biblio-filter-used
</text>
<text>		      (biblio-filter allentries)
</text>
<text>		      allentries)))
</text>
<text>    (if (and biblio-filter-used (node-list-empty? entries))
</text>
<text>	(empty-sosofo)
</text>
<text>	(make display-group
</text>
<text>	  space-before: %block-sep%
</text>
<text>	  space-after: %block-sep%
</text>
<text>	  start-indent: %body-start-indent%
</text>
<text>	  (make sequence
</text>
<text>	    ($section-title$)
</text>
<text>	    (process-node-list entries))))))
</text>
<text>
</text>
<text>(element (bibliodiv title) (empty-sosofo))
</text>
<text>
</text>
<text>;; ..................... BIBLIOGRAPHY ENTRIES .........................
</text>
<text>
</text>
<text>(define (biblioentry-inline-sep node rest)
</text>
<text>  ;; Output the character that should separate inline node from rest
</text>
<text>  (cond 
</text>
<text>   ((and (equal? (gi node) (normalize &quot;title&quot;))
</text>
<text>	 (equal? (gi (node-list-first rest)) (normalize &quot;subtitle&quot;)))
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (literal &quot;: &quot;)))
</text>
<text>   (else
</text>
<text>    (literal %biblsep%))))
</text>
<text>
</text>
<text>(define (biblioentry-inline-end blocks)
</text>
<text>  ;; Output the character that should occur at the end of inline
</text>
<text>  (literal %biblend%))
</text>
<text>
</text>
<text>(define (biblioentry-block-sep node rest)
</text>
<text>  ;; Output the character that should separate block node from rest
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (biblioentry-block-end)
</text>
<text>  ;; Output the character that should occur at the end of block
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element biblioentry
</text>
<text>  (let* ((expanded-children   (expand-children 
</text>
<text>			       (children (current-node))
</text>
<text>			       (biblioentry-flatten-elements)))
</text>
<text>	 (all-inline-children (if %biblioentry-in-entry-order%
</text>
<text>				  (titlepage-gi-list-by-nodelist
</text>
<text>				   (biblioentry-inline-elements)
</text>
<text>				   expanded-children)
</text>
<text>				  (titlepage-gi-list-by-elements
</text>
<text>				   (biblioentry-inline-elements)
</text>
<text>				   expanded-children)))
</text>
<text>	 (block-children      (if %biblioentry-in-entry-order%
</text>
<text>				  (titlepage-gi-list-by-nodelist
</text>
<text>				   (biblioentry-block-elements)
</text>
<text>				   expanded-children)
</text>
<text>				  (titlepage-gi-list-by-elements
</text>
<text>				   (biblioentry-block-elements)
</text>
<text>				   expanded-children)))
</text>
<text>	 (leading-abbrev      (if (equal? (normalize &quot;abbrev&quot;)
</text>
<text>					  (gi (node-list-first 
</text>
<text>					       all-inline-children)))
</text>
<text>				  (node-list-first all-inline-children)
</text>
<text>				  (empty-node-list)))
</text>
<text>	 (inline-children     (if (node-list-empty? leading-abbrev)
</text>
<text>				  all-inline-children
</text>
<text>				  (node-list-rest all-inline-children)))
</text>
<text>	 (has-leading-abbrev? (not (node-list-empty? leading-abbrev)))
</text>
<text>	 (xreflabel           (if (or has-leading-abbrev? biblio-number)
</text>
<text>				  #f
</text>
<text>				  (attribute-string (normalize </text>
<text>&quot;xreflabel&quot;)))))
</text>
<text>    (make display-group
</text>
<text>      (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	start-indent: (+ (inherited-start-indent) 2pi)
</text>
<text>	first-line-start-indent: -2pi
</text>
<text>
</text>
<text>	(if (or biblio-number xreflabel has-leading-abbrev?)
</text>
<text>	    (make sequence
</text>
<text>	      (literal &quot;[&quot;)
</text>
<text>
</text>
<text>	      (if biblio-number 
</text>
<text>		  (literal (number-&gt;string (bibentry-number (current-node))))
</text>
<text>		  (empty-sosofo))
</text>
<text>	
</text>
<text>	      (if xreflabel
</text>
<text>		  (literal xreflabel)
</text>
<text>		  (empty-sosofo))
</text>
<text>	
</text>
<text>	      (if has-leading-abbrev?
</text>
<text>		  (with-mode biblioentry-inline-mode 
</text>
<text>		    (process-node-list leading-abbrev))
</text>
<text>		  (empty-sosofo))
</text>
<text>
</text>
<text>	      (literal &quot;]\no-break-space;&quot;))
</text>
<text>	    (empty-sosofo))
</text>
<text>	
</text>
<text>	(let loop ((nl inline-children))
</text>
<text>	  (if (node-list-empty? nl)
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (make sequence
</text>
<text>		(with-mode biblioentry-inline-mode
</text>
<text>		  (process-node-list (node-list-first nl)))
</text>
<text>		(if (node-list-empty? (node-list-rest nl))
</text>
<text>		    (biblioentry-inline-end block-children)
</text>
<text>		    (biblioentry-inline-sep (node-list-first nl)
</text>
<text>					  (node-list-rest nl)))
</text>
<text>		(loop (node-list-rest nl))))))
</text>
<text>
</text>
<text>      (make display-group
</text>
<text>	start-indent: (+ (inherited-start-indent) 2pi)
</text>
<text>	(let loop ((nl block-children))
</text>
<text>	  (if (node-list-empty? nl)
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (make sequence
</text>
<text>		(with-mode biblioentry-block-mode
</text>
<text>		  (process-node-list (node-list-first nl)))
</text>
<text>		(if (node-list-empty? (node-list-rest nl))
</text>
<text>		    (biblioentry-block-end)
</text>
<text>		    (biblioentry-block-sep (node-list-first nl)
</text>
<text>					   (node-list-rest nl)))
</text>
<text>		(loop (node-list-rest nl)))))))))
</text>
<text>
</text>
<text>(mode biblioentry-inline-mode
</text>
<text>  (element abbrev
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (let ((inline-children (node-list-filter-by-not-gi 
</text>
<text>			    (children (current-node))
</text>
<text>			    (list (normalize &quot;address&quot;)))))
</text>
<text>      (let loop ((nl inline-children))
</text>
<text>	(if (node-list-empty? nl)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (process-node-list (node-list-first nl))
</text>
<text>	      (if (node-list-empty? (node-list-rest nl))
</text>
<text>		  (empty-sosofo)
</text>
<text>		  (literal &quot;, &quot;))
</text>
<text>	      (loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    (literal (author-list-string)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (let* ((nl (children (current-node)))
</text>
<text>	   (collabname (node-list-first nl))
</text>
<text>	   (affil (node-list-rest nl)))
</text>
<text>      (make sequence
</text>
<text>	(process-node-list collabname)
</text>
<text>	(if (node-list-empty? affil)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (let loop ((nl affil))
</text>
<text>	      (if (node-list-empty? nl)
</text>
<text>		  (empty-sosofo)
</text>
<text>		  (make sequence
</text>
<text>		    (literal &quot;, &quot;)
</text>
<text>		    (process-node-list (node-list-first nl))
</text>
<text>		    (loop (node-list-rest nl)))))))))
</text>
<text>
</text>
<text>  (element (collab collabname)
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (let ((inline-children (node-list-filter-by-not-gi 
</text>
<text>			    (children (current-node))
</text>
<text>			    (list (normalize &quot;address&quot;)))))
</text>
<text>      (let loop ((nl inline-children))
</text>
<text>	(if (node-list-empty? nl)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (process-node-list (node-list-first nl))
</text>
<text>	      (if (node-list-empty? (node-list-rest nl))
</text>
<text>		  (empty-sosofo)
</text>
<text>		  (literal &quot;, &quot;))
</text>
<text>	      (loop (node-list-rest nl)))))))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    ;; Just print the year(s)
</text>
<text>    (let ((years (select-elements (children (current-node))
</text>
<text>				  (normalize &quot;year&quot;))))
</text>
<text>      (process-node-list years)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    (make sequence
</text>
<text>      (literal (gentext-edited-by))
</text>
<text>      (literal &quot; &quot;)
</text>
<text>      (literal (author-list-string))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (literal (author-list-string)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make sequence
</text>
<text>      ($charseq$)
</text>
<text>; this is actually a problem since &quot;trade&quot; is the default value for
</text>
<text>; the class attribute. we can put this back in in DocBook 5.0, when
</text>
<text>; class becomes #IMPLIED
</text>
<text>;      (if (equal? (attribute-string &quot;class&quot;) (normalize &quot;trade&quot;))
</text>
<text>;	  (literal &quot;\trade-mark-sign;&quot;)
</text>
<text>;	  (empty-sosofo))
</text>
<text>      ))
</text>
<text>  
</text>
<text>  (element productnumber
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (let ((pubname (select-elements (children (current-node))
</text>
<text>				    (normalize &quot;publishername&quot;)))
</text>
<text>	  (cities  (select-elements (descendants (current-node))
</text>
<text>				    (normalize &quot;city&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (process-node-list pubname)
</text>
<text>      (if (node-list-empty? cities)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      (process-node-list cities))))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (publisher address city)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make sequence
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (bibliomixed title) 
</text>
<text>      (make sequence
</text>
<text>	font-posture: 'italic
</text>
<text>	(process-children)))
</text>
<text>
</text>
<text>  
</text>
<text>  (element (bibliomixed subtitle) 
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (biblioset title)
</text>
<text>    (let ((rel (case-fold-up 
</text>
<text>		(inherited-attribute-string (normalize &quot;relation&quot;)))))
</text>
<text>      (cond
</text>
<text>       ((equal? rel &quot;ARTICLE&quot;) (make sequence
</text>
<text>				 (literal (gentext-start-quote))
</text>
<text>				 (process-children)
</text>
<text>				 (literal (gentext-end-quote))))
</text>
<text>       (else (make sequence
</text>
<text>	       font-posture: 'italic
</text>
<text>	       (process-children))))))
</text>
<text>
</text>
<text>  (element (bibliomset title)
</text>
<text>    (let ((rel (case-fold-up 
</text>
<text>		(inherited-attribute-string (normalize &quot;relation&quot;)))))
</text>
<text>      (cond
</text>
<text>       ((equal? rel &quot;ARTICLE&quot;) (make sequence
</text>
<text>				 (literal (gentext-start-quote))
</text>
<text>				 (process-children)
</text>
<text>				 (literal (gentext-end-quote))))
</text>
<text>       (else        (make sequence
</text>
<text>		      font-posture: 'italic
</text>
<text>		      (process-children))))))
</text>
<text>)
</text>
<text>
</text>
<text>(mode biblioentry-block-mode
</text>
<text>  (element abstract
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (abstract title)
</text>
<text>    (make paragraph
</text>
<text>      font-weight: 'bold
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element address
</text>
<text>    ($linespecific-display$ %indent-address-lines% %number-address-lines%))
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(make table-column
</text>
<text>	  column-number: 1
</text>
<text>	  width: (/ (- %body-width% (inherited-start-indent)) 3))
</text>
<text>	(make table-column
</text>
<text>	  column-number: 2
</text>
<text>	  width: (/ (- %body-width% (inherited-start-indent)) 3))
</text>
<text>	(make table-column
</text>
<text>	  column-number: 3
</text>
<text>	  width: (/ (- %body-width% (inherited-start-indent)) 3))
</text>
<text>	(process-children))))
</text>
<text>
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (node-list-filter-by-gi
</text>
<text>		      (descendants (current-node))
</text>
<text>		      (list (normalize &quot;revremark&quot;)
</text>
<text>			    (normalize &quot;revdescription&quot;)))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  (make sequence
</text>
<text>		    (literal (gentext-element-name-space (current-node)))
</text>
<text>		    (process-node-list revnumber)))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>	      (make paragraph
</text>
<text>		(process-node-list revdate))
</text>
<text>	      (empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  (make sequence
</text>
<text>		    (literal (gentext-revised-by))
</text>
<text>		    (process-node-list revauthor)))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  space-after: %block-sep%
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo)))))))
</text>
<text>
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>  (element (revision revdescription) (process-children))
</text>
<text>
</text>
<text>  (element seriesinfo
</text>
<text>    ;; This is a nearly biblioentry recursively...
</text>
<text>    (let* ((expanded-children   (expand-children 
</text>
<text>				 (children (current-node))
</text>
<text>				 (biblioentry-flatten-elements)))
</text>
<text>	   (all-inline-children (if %biblioentry-in-entry-order%
</text>
<text>				    (titlepage-gi-list-by-nodelist
</text>
<text>				     (biblioentry-inline-elements)
</text>
<text>				     expanded-children)
</text>
<text>				    (titlepage-gi-list-by-elements
</text>
<text>				     (biblioentry-inline-elements)
</text>
<text>				     expanded-children)))
</text>
<text>	   (block-children      (if %biblioentry-in-entry-order%
</text>
<text>				    (titlepage-gi-list-by-nodelist
</text>
<text>				     (biblioentry-block-elements)
</text>
<text>				     expanded-children)
</text>
<text>				    (titlepage-gi-list-by-elements
</text>
<text>				     (biblioentry-block-elements)
</text>
<text>				     expanded-children)))
</text>
<text>	   (inline-children     all-inline-children))
</text>
<text>      (make display-group
</text>
<text>	(make paragraph
</text>
<text>	  space-before: %para-sep%
</text>
<text>	  space-after: %para-sep%
</text>
<text>	  start-indent: (+ (inherited-start-indent) 2pi)
</text>
<text>	  first-line-start-indent: -2pi
</text>
<text>	  
</text>
<text>	  (let loop ((nl inline-children))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (with-mode biblioentry-inline-mode
</text>
<text>		    (process-node-list (node-list-first nl)))
</text>
<text>		  (if (node-list-empty? (node-list-rest nl))
</text>
<text>		      (biblioentry-inline-end block-children)
</text>
<text>		      (biblioentry-inline-sep (node-list-first nl)
</text>
<text>					      (node-list-rest nl)))
</text>
<text>		  (loop (node-list-rest nl))))))
</text>
<text>	
</text>
<text>	(make display-group
</text>
<text>	  start-indent: (+ (inherited-start-indent) 2pi)
</text>
<text>	  (let loop ((nl block-children))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (with-mode biblioentry-block-mode
</text>
<text>		    (process-node-list (node-list-first nl)))
</text>
<text>		  (if (node-list-empty? (node-list-rest nl))
</text>
<text>		      (biblioentry-block-end)
</text>
<text>		      (biblioentry-block-sep (node-list-first nl)
</text>
<text>					     (node-list-rest nl)))
</text>
<text>		  (loop (node-list-rest nl)))))))))
</text>
<text>)
</text>
<text>
</text>
<text>(element bibliomixed 
</text>
<text>  (let* ((all-inline-children (children (current-node)))
</text>
<text>	 (leading-abbrev      (if (equal? (normalize &quot;abbrev&quot;)
</text>
<text>					  (gi (node-list-first 
</text>
<text>					       all-inline-children)))
</text>
<text>				  (node-list-first all-inline-children)
</text>
<text>				  (empty-node-list)))
</text>
<text>	 (inline-children     (if (node-list-empty? leading-abbrev)
</text>
<text>				  all-inline-children
</text>
<text>				  (node-list-rest all-inline-children)))
</text>
<text>	 (has-leading-abbrev? (not (node-list-empty? leading-abbrev)))
</text>
<text>	 (xreflabel           (if (or has-leading-abbrev? biblio-number)
</text>
<text>				  #f
</text>
<text>				  (attribute-string (normalize &quot;xreflabel&quot;)))))
</text>
<text>    (make paragraph
</text>
<text>      space-before: %para-sep%
</text>
<text>      space-after: %para-sep%
</text>
<text>      start-indent: (+ (inherited-start-indent) 2pi)
</text>
<text>      first-line-start-indent: -2pi
</text>
<text>
</text>
<text>      (if (or biblio-number xreflabel has-leading-abbrev?)
</text>
<text>	  (make sequence
</text>
<text>	    (literal &quot;[&quot;)
</text>
<text>
</text>
<text>	    (if biblio-number 
</text>
<text>		(literal (number-&gt;string (bibentry-number (current-node))))
</text>
<text>		(empty-sosofo))
</text>
<text>	    
</text>
<text>	    (if xreflabel
</text>
<text>		(literal xreflabel)
</text>
<text>		(empty-sosofo))
</text>
<text>	    
</text>
<text>	    (if has-leading-abbrev?
</text>
<text>		(with-mode biblioentry-inline-mode 
</text>
<text>		  (process-node-list leading-abbrev))
</text>
<text>		(empty-sosofo))
</text>
<text>	    
</text>
<text>	    (literal &quot;]\no-break-space;&quot;))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (with-mode biblioentry-inline-mode
</text>
<text>	(process-children)))))
</text>
<text>
</text>
<text>;; ....................... BIBLIOGRAPHY ELEMENTS .......................
</text>
<text>
</text>
<text>;; These are element construction rules for bibliography elements that 
</text>
<text>;; may occur outside of a BIBLIOENTRY or BIBLIOMIXED.
</text>
<text>
</text>
<text>(element bibliomisc (process-children))
</text>
<text>(element bibliomset (process-children))
</text>
<text>(element biblioset (process-children))
</text>
<text>(element bookbiblio (process-children))
</text>
<text>
</text>
<text>(element street ($charseq$))
</text>
<text>(element pob ($charseq$))
</text>
<text>(element postcode ($charseq$))
</text>
<text>(element city ($charseq$))
</text>
<text>(element state ($charseq$))
</text>
<text>(element country ($charseq$))
</text>
<text>(element phone ($charseq$))
</text>
<text>(element fax ($charseq$))
</text>
<text>(element otheraddr ($charseq$))
</text>
<text>(element affiliation ($charseq$))
</text>
<text>(element shortaffil ($charseq$))
</text>
<text>(element jobtitle ($charseq$))
</text>
<text>(element orgdiv ($charseq$))
</text>
<text>(element artpagenums ($charseq$))
</text>
<text>
</text>
<text>(element author
</text>
<text>  (make sequence
</text>
<text>    (literal (author-list-string))))
</text>
<text>
</text>
<text>(element authorgroup (process-children))
</text>
<text>
</text>
<text>(element collab (process-children))
</text>
<text>(element collabname ($charseq$))
</text>
<text>(element authorinitials ($charseq$))
</text>
<text>(element confgroup (process-children))
</text>
<text>(element confdates ($charseq$))
</text>
<text>(element conftitle ($charseq$))
</text>
<text>(element confnum ($charseq$))
</text>
<text>(element confsponsor ($charseq$))
</text>
<text>(element contractnum ($charseq$))
</text>
<text>(element contractsponsor ($charseq$))
</text>
<text>
</text>
<text>(element copyright
</text>
<text>  (make paragraph
</text>
<text>    (make sequence
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children-trim))))
</text>
<text>
</text>
<text>(element year
</text>
<text>  (make sequence
</text>
<text>    (process-children)
</text>
<text>    (if (not (last-sibling? (current-node)))
</text>
<text>	(literal &quot;, &quot;)
</text>
<text>	(literal &quot; &quot;))))
</text>
<text>
</text>
<text>(element holder ($charseq$))
</text>
<text>
</text>
<text>(element corpauthor
</text>
<text>  (make sequence
</text>
<text>    (literal (author-list-string))))
</text>
<text>
</text>
<text>(element corpname ($charseq$))
</text>
<text>(element date ($charseq$))
</text>
<text>(element edition ($charseq$))
</text>
<text>(element editor ($charseq$))
</text>
<text>(element isbn ($charseq$))
</text>
<text>(element issn ($charseq$))
</text>
<text>(element invpartnumber ($charseq$))
</text>
<text>(element issuenum ($charseq$))
</text>
<text>
</text>
<text>(element legalnotice ($semiformal-object$))
</text>
<text>(element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>(element modespec (empty-sosofo))
</text>
<text>
</text>
<text>(element orgname ($charseq$))
</text>
<text>
</text>
<text>(element othercredit
</text>
<text>  (make sequence
</text>
<text>    (literal (author-list-string))))
</text>
<text>
</text>
<text>(element pagenums ($charseq$))
</text>
<text>(element contrib ($charseq$))
</text>
<text>
</text>
<text>(element firstname ($charseq$))
</text>
<text>(element honorific ($charseq$))
</text>
<text>(element lineage ($charseq$))
</text>
<text>(element othername ($charseq$))
</text>
<text>(element surname ($charseq$))
</text>
<text>
</text>
<text>(element printhistory (empty-sosofo))
</text>
<text>
</text>
<text>(element productname
</text>
<text>  (make sequence
</text>
<text>    ($charseq$)
</text>
<text>; this is actually a problem since &quot;trade&quot; is the default value for
</text>
<text>; the class attribute. we can put this back in in DocBook 5.0, when
</text>
<text>; class becomes #IMPLIED
</text>
<text>;    (if (equal? (attribute-string &quot;class&quot;) (normalize &quot;trade&quot;))
</text>
<text>;	(literal &quot;\trade-mark-sign;&quot;)
</text>
<text>;	(empty-sosofo))
</text>
<text>))
</text>
<text>
</text>
<text>(element productnumber ($charseq$))
</text>
<text>(element pubdate ($charseq$))
</text>
<text>(element publisher (process-children))
</text>
<text>(element publishername ($charseq$))
</text>
<text>(element pubsnumber ($charseq$))
</text>
<text>(element releaseinfo (empty-sosofo))
</text>
<text>(element revision ($charseq$))
</text>
<text>(element revnumber ($charseq$))
</text>
<text>(element revremark ($charseq$))
</text>
<text>(element revdescription ($block-container$))
</text>
<text>(element seriesvolnums ($charseq$))
</text>
<text>(element volumenum ($charseq$))
</text>
<text>
</text>
<text>;; The (element (bookinfo revhistory)) construction rule is in dbinfo.dsl
</text>
<text>;; It calls $book-revhistory$...
</text>
<text>(define ($book-revhistory$)
</text>
<text>  (make sequence
</text>
<text>    (make paragraph
</text>
<text>      use: title-style
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>      space-after: (* (HSIZE 1) %head-before-factor%)
</text>
<text>      (literal (gentext-element-name (current-node))))
</text>
<text>    (make table
</text>
<text>      before-row-border: #f
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(element (revhistory revision)
</text>
<text>  (let ((revnumber (select-elements (descendants (current-node))
</text>
<text>				    (normalize &quot;revnumber&quot;)))
</text>
<text>	(revdate   (select-elements (descendants (current-node))
</text>
<text>				    (normalize &quot;date&quot;)))
</text>
<text>	(revauthor (select-elements (descendants (current-node))
</text>
<text>				    (normalize &quot;authorinitials&quot;)))
</text>
<text>	(revremark (node-list-filter-by-gi
</text>
<text>		    (descendants (current-node))
</text>
<text>		    (list (normalize &quot;revremark&quot;)
</text>
<text>			  (normalize &quot;revdescription&quot;)))))
</text>
<text>    (make sequence
</text>
<text>      (make table-row
</text>
<text>	(make table-cell
</text>
<text>	  column-number: 1
</text>
<text>	  n-columns-spanned: 1
</text>
<text>	  n-rows-spanned: 1
</text>
<text>	  (if (not (node-list-empty? revnumber))
</text>
<text>	      (make paragraph
</text>
<text>		(make sequence
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber)))
</text>
<text>	      (empty-sosofo)))
</text>
<text>	(make table-cell
</text>
<text>	  column-number: 2
</text>
<text>	  n-columns-spanned: 1
</text>
<text>	  n-rows-spanned: 1
</text>
<text>	  (if (not (node-list-empty? revdate))
</text>
<text>	      (make paragraph
</text>
<text>		(process-node-list revdate))
</text>
<text>	      (empty-sosofo)))
</text>
<text>	(make table-cell
</text>
<text>	  column-number: 3
</text>
<text>	  n-columns-spanned: 1
</text>
<text>	  n-rows-spanned: 1
</text>
<text>	  (if (not (node-list-empty? revauthor))
</text>
<text>	      (make paragraph
</text>
<text>		(make sequence
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor)))
</text>
<text>	      (empty-sosofo))))
</text>
<text>      (make table-row
</text>
<text>	cell-after-row-border: #f
</text>
<text>	(make table-cell
</text>
<text>	  column-number: 1
</text>
<text>	  n-columns-spanned: 3
</text>
<text>	  n-rows-spanned: 1
</text>
<text>	  (if (not (node-list-empty? revremark))
</text>
<text>	      (make paragraph
</text>
<text>		space-after: %block-sep%
</text>
<text>		(process-node-list revremark))
</text>
<text>	      (empty-sosofo)))))))
</text>
<text>
</text>
<text>(element (revision revnumber) (process-children-trim))
</text>
<text>(element (revision date) (process-children-trim))
</text>
<text>(element (revision authorinitials) (process-children-trim))
</text>
<text>(element (revision revremark) (process-children-trim))
</text>
<text>(element (revision revdescription) (process-children))
</text>
<text>    </text>
<text>
</text>
<text>;; $Id: dbblock.dsl,v 1.11 2003/02/17 19:42:45 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(element revhistory ($book-revhistory$))
</text>
<text>
</text>
<text>(element highlights ($block-container$))
</text>
<text>
</text>
<text>(element (para blockquote)
</text>
<text>  (let* ((attrib       (select-elements (children (current-node))
</text>
<text>					(normalize &quot;attribution&quot;)))
</text>
<text>	 (paras        (node-list-filter-by-not-gi
</text>
<text>			(children (current-node))
</text>
<text>			(list (normalize &quot;attribution&quot;)))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	first-line-start-indent: 0pt ;; workaround a bug/feature?
</text>
<text>	;; W/o the preceding line, the first-line-start-indent of the enclosing
</text>
<text>	;; paragraph will apply to the paragraphs in this blockquote which is
</text>
<text>	;; probably not wanted..
</text>
<text>	font-size: (* %bf-size% %smaller-size-factor%)
</text>
<text>	line-spacing: (* %bf-size% %line-spacing-factor%
</text>
<text>			 %smaller-size-factor%)
</text>
<text>	space-before: %para-sep%
</text>
<text>        start-indent: (+ (inherited-start-indent) %blockquote-start-indent%)
</text>
<text>        end-indent: %blockquote-end-indent%
</text>
<text>	(process-node-list paras))
</text>
<text>      (if (node-list-empty? attrib)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make paragraph
</text>
<text>	    font-size: (* %bf-size% %smaller-size-factor%)
</text>
<text>	    line-spacing: (* %bf-size% %line-spacing-factor%
</text>
<text>			   %smaller-size-factor%)
</text>
<text>	    space-before: 0pt
</text>
<text>	    end-indent: 1em
</text>
<text>	    quadding: 'end
</text>
<text>	    (make sequence
</text>
<text>	      (literal &quot;\em-dash;&quot;)
</text>
<text>	      (process-node-list attrib)))))))
</text>
<text>
</text>
<text>(element blockquote
</text>
<text>  (let* ((attrib       (select-elements (children (current-node))
</text>
<text>					(normalize &quot;attribution&quot;)))
</text>
<text>	 (paras        (node-list-filter-by-not-gi
</text>
<text>			(children (current-node))
</text>
<text>			(list (normalize &quot;attribution&quot;)))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-size: (* %bf-size% %smaller-size-factor%)
</text>
<text>	line-spacing: (* %bf-size% %line-spacing-factor%
</text>
<text>			 %smaller-size-factor%)
</text>
<text>	space-before: %para-sep%
</text>
<text>        start-indent: (+ (inherited-start-indent) %blockquote-start-indent%)
</text>
<text>        end-indent: %blockquote-end-indent%
</text>
<text>	(process-node-list paras))
</text>
<text>      (if (node-list-empty? attrib)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make paragraph
</text>
<text>	    font-size: (* %bf-size% %smaller-size-factor%)
</text>
<text>	    line-spacing: (* %bf-size% %line-spacing-factor%
</text>
<text>			     %smaller-size-factor%)
</text>
<text>	    space-before: 0pt
</text>
<text>	    end-indent: 1em
</text>
<text>	    quadding: 'end
</text>
<text>	    (make sequence
</text>
<text>	      (literal &quot;\em-dash;&quot;)
</text>
<text>	      (process-node-list attrib)))))))
</text>
<text>
</text>
<text>(element (blockquote para)
</text>
<text>  (if (absolute-last-sibling? (current-node))
</text>
<text>      (make </text>
<text>paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: 0pt
</text>
<text> 	quadding: %default-quadding%
</text>
<text>	(process-children-trim))
</text>
<text>      ($paragraph$)))
</text>
<text>
</text>
<text>(element epigraph
</text>
<text>  (let* ((addln-indent %epigraph-start-indent%)
</text>
<text>	 (attrib       (select-elements (children (current-node))
</text>
<text>					(normalize &quot;attribution&quot;)))
</text>
<text>	 (paras        (node-list-filter-by-not-gi
</text>
<text>			(children (current-node))
</text>
<text>			(list (normalize &quot;attribution&quot;)))))
</text>
<text>    (make display-group
</text>
<text>      start-indent: (+ %body-start-indent% addln-indent)
</text>
<text>      end-indent: %epigraph-end-indent%
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-node-list paras)
</text>
<text>      (if (node-list-empty? attrib)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make paragraph
</text>
<text>	    space-before: 0pt
</text>
<text>	    quadding: 'end
</text>
<text>	    (process-node-list attrib))))))
</text>
<text>
</text>
<text>(element attribution
</text>
<text>  ($charseq$))
</text>
<text>
</text>
<text>(element (epigraph para)
</text>
<text>  (if (absolute-last-sibling? (current-node))
</text>
<text>      (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: 0pt
</text>
<text> 	quadding: %default-quadding%
</text>
<text>	(process-children-trim))
</text>
<text>      ($paragraph$)))
</text>
<text>
</text>
<text>(element para ($paragraph$))
</text>
<text>(element simpara ($paragraph$))
</text>
<text>
</text>
<text>(element formalpara ($para-container$))
</text>
<text>
</text>
<text>(element (formalpara title) ($runinhead$))
</text>
<text>(element (formalpara para) (make sequence (process-children-trim)))
</text>
<text>
</text>
<text>(element sidebar 
</text>
<text>  (make box
</text>
<text>    display?: #t
</text>
<text>    box-type: 'border
</text>
<text>    line-thickness: 1pt
</text>
<text>    start-indent: (inherited-start-indent)
</text>
<text>    end-indent: (inherited-end-indent)
</text>
<text>    (if (node-list-empty? (select-elements (children (current-node))
</text>
<text>					   (normalize &quot;title&quot;)))
</text>
<text>	(make display-group
</text>
<text>	  start-indent: 2pt
</text>
<text>	  end-indent: 2pt
</text>
<text>	  space-before: %block-sep%
</text>
<text>	  space-after: %block-sep%
</text>
<text>	  (process-children))
</text>
<text>	(make display-group
</text>
<text>	  start-indent: 2pt
</text>
<text>	  end-indent: 2pt
</text>
<text>	  space-before: 0pt
</text>
<text>	  space-after: %block-sep%
</text>
<text>	  (make sequence
</text>
<text>	    (let* ((object (current-node))
</text>
<text>		   (title  (select-elements (children object) 
</text>
<text>					    (normalize &quot;title&quot;)))
</text>
<text>		   (nsep   (gentext-label-title-sep (gi object))))
</text>
<text>	      (make paragraph
</text>
<text>		font-weight: 'bold
</text>
<text>		space-before: %block-sep%
</text>
<text>		space-after: %para-sep%
</text>
<text>		keep-with-next?: #t
</text>
<text>		(literal (gentext-element-name object))
</text>
<text>		(if (string=? (element-label object) &quot;&quot;)
</text>
<text>		    (literal nsep)
</text>
<text>		    (literal &quot; &quot; (element-label object) nsep))
</text>
<text>		(process-node-list (children title))))
</text>
<text>	    (process-children))))))
</text>
<text>
</text>
<text>(element (sidebar title) (empty-sosofo))
</text>
<text>
</text>
<text>(element abstract 
</text>
<text>  (make display-group
</text>
<text>    space-before: %block-sep%
</text>
<text>    space-after: %block-sep%
</text>
<text>    start-indent: %body-start-indent%
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element authorblurb ($block-container$))
</text>
<text>
</text>
<text>(element ackno ($paragraph$))
</text>
<text>
</text>
<text>(define ($inline-object$)
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(define ($informal-object$ #!optional (rule-before? #f) (rule-after? #f))
</text>
<text>  (make display-group
</text>
<text>    start-indent: (+ %block-start-indent% (inherited-start-indent))
</text>
<text>    space-before: %block-sep%
</text>
<text>    space-after: %block-sep%
</text>
<text>    (if rule-before?
</text>
<text>	(make rule
</text>
<text>	  orientation: 'horizontal
</text>
<text>	  line-thickness: %object-rule-thickness%
</text>
<text>	  display-alignment: 'center
</text>
<text>	  space-after: (/ %block-sep% 2)
</text>
<text>	  keep-with-next?: #t)
</text>
<text>	(empty-sosofo))
</text>
<text>    (process-children)
</text>
<text>    (if rule-after?
</text>
<text>	(make rule
</text>
<text>	  orientation: 'horizontal
</text>
<text>	  line-thickness: %object-rule-thickness%
</text>
<text>	  display-alignment: 'center
</text>
<text>	  space-before: (/ %block-sep% 2)
</text>
<text>	  keep-with-previous?: #t)
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(define (object-title-after #!optional (node (current-node))) 
</text>
<text>  (if (member (gi node) ($object-titles-after$))
</text>
<text>      #t
</text>
<text>      #f))
</text>
<text>
</text>
<text>(define (float-object node)
</text>
<text>  ;; you could redefine this to make only figures float, or only tables,
</text>
<text>  ;; or whatever...
</text>
<text>  #t)
</text>
<text>
</text>
<text>(define (named-formal-objects)
</text>
<text>  (list (normalize &quot;figure&quot;)
</text>
<text>	(normalize &quot;table&quot;)
</text>
<text>	(normalize &quot;example&quot;)
</text>
<text>	(normalize &quot;equation&quot;)))
</text>
<text>
</text>
<text>(define ($formal-object$ #!optional (rule-before? #f) (rule-after? #f))
</text>
<text>  (let* ((object-sosofo (make paragraph
</text>
<text>			  space-before: 0pt
</text>
<text>			  space-after: 0pt
</text>
<text>			  start-indent: (+ %block-start-indent% 
</text>
<text>					   (inherited-start-indent))
</text>
<text>			  keep-with-next?: (object-title-after)
</text>
<text>			  (process-children)))
</text>
<text>	 (title-sosofo  (with-mode formal-object-title-mode
</text>
<text>			  (process-node-list 
</text>
<text>			   (select-elements (children (current-node))
</text>
<text>					    (normalize &quot;title&quot;)))))
</text>
<text>	 (sosofo        (make display-group
</text>
<text>			  space-before: %block-sep%
</text>
<text>			  space-after: %block-sep%
</text>
<text>			  (if rule-before?
</text>
<text>			      (make rule
</text>
<text>				orientation: 'horizontal
</text>
<text>				line-thickness: %object-rule-thickness%
</text>
<text>				display-alignment: 'center
</text>
<text>				space-after: (/ %block-sep% 2)
</text>
<text>				keep-with-next?: #t)
</text>
<text>			      (empty-sosofo))
</text>
<text>			  (if (object-title-after)
</text>
<text>			    (make sequence
</text>
<text>			      object-sosofo
</text>
<text>			      title-sosofo)
</text>
<text>			    (make sequence
</text>
<text>			      title-sosofo
</text>
<text>			      object-sosofo))
</text>
<text>			  (if rule-after?
</text>
<text>			      (make rule
</text>
<text>				orientation: 'horizontal
</text>
<text>				line-thickness: %object-rule-thickness%
</text>
<text>				display-alignment: 'center
</text>
<text>				space-before: (/ %block-sep% 2)
</text>
<text>				keep-with-previous?: #t)
</text>
<text>			      (empty-sosofo)))))
</text>
<text>    (if (and (equal? (print-backend) 'tex)
</text>
<text>	     formal-object-float
</text>
<text>	     (float-object (current-node)))
</text>
<text>	(make page-float
</text>
<text>	  sosofo)
</text>
<text>	sosofo)))
</text>
<text>
</text>
<text>(define ($semiformal-object$)
</text>
<text>  (if (node-list-empty? (select-elements (children (current-node))
</text>
<text>					 (normalize &quot;title&quot;)))
</text>
<text>      ($informal-object$)
</text>
<text>      ($formal-object$)))
</text>
<text>
</text>
<text>(mode formal-object-title-mode
</text>
<text>  (element title
</text>
<text>    (let* ((object (parent (current-node)))
</text>
<text>	   (nsep   (gentext-label-title-sep (gi object))))
</text>
<text>      (make paragraph
</text>
<text>	font-weight: %formal-object-title-font-weight%
</text>
<text>	space-before: (if (object-title-after (parent (current-node)))
</text>
<text>			  %para-sep%
</text>
<text>			  0pt)
</text>
<text>	space-after: (if (object-title-after (parent (current-node)))
</text>
<text>			 0pt
</text>
<text>			 %para-sep%)
</text>
<text>	start-indent: (+ %block-start-indent% (inherited-start-indent))
</text>
<text>	keep-with-next?: (not (object-title-after (parent (current-node))))
</text>
<text>	(if (member (gi object) (named-formal-objects))
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-element-name object))
</text>
<text>	      (if (string=? (element-label object) &quot;&quot;)
</text>
<text>		  (literal nsep)
</text>
<text>		  (literal &quot; &quot; (element-label object) nsep)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(process-children))))
</text>
<text>)
</text>
<text>
</text>
<text>(element example
</text>
<text>  ($formal-object$ %example-rules% %example-rules%))
</text>
<text>
</text>
<text>(element (example title) (empty-sosofo)) ; don't show caption below example
</text>
<text>
</text>
<text>(element informalexample
</text>
<text>  ($informal-object$ %informalexample-rules% %informalexample-rules%))
</text>
<text>
</text>
<text>(element (figure title) (empty-sosofo)) ; don't show caption below figure
</text>
<text>
</text>
<text>(element figure
</text>
<text>  ;; FIXME: this is a bit crude...
</text>
<text>  (let* ((mediaobj (select-elements (children (current-node))
</text>
<text>				    (normalize &quot;mediaobject&quot;)))
</text>
<text>	 (imageobj (select-elements (children mediaobj)
</text>
<text>				    (normalize &quot;imageobject&quot;)))
</text>
<text>	 (image    (select-elements (children imageobj)
</text>
<text>				    (normalize &quot;imagedata&quot;)))
</text>
<text>	 (graphic  (select-elements (children (current-node))
</text>
<text>				    (normalize &quot;graphic&quot;)))
</text>
<text>	 (align    (if (node-list-empty? image)
</text>
<text>		       (if (node-list-empty? graphic)
</text>
<text>			   #f
</text>
<text>			   (attribute-string (normalize &quot;align&quot;)
</text>
<text>					     (node-list-first graphic)))
</text>
<text>		       (attribute-string (normalize &quot;align&quot;) (node-list-first image))))
</text>
<text>	 (dalign  (cond ((equal? align (normalize &quot;center&quot;))
</text>
<text>			 'center)
</text>
<text>			((equal? align (normalize &quot;right&quot;))
</text>
<text>			 'end)
</text>
<text>			(else
</text>
<text>			 'start))))
</text>
<text>    (if align
</text>
<text>	(make display-group
</text>
<text>	  quadding: dalign
</text>
<text>	  ($formal-object$ %figure-rules%</text>
<text> %figure-rules%))
</text>
<text>	($formal-object$ %figure-rules% %figure-rules%))))
</text>
<text>
</text>
<text>(element informaltable 
</text>
<text>  ($informal-object$ %informaltable-rules% %informaltable-rules%))
</text>
<text>
</text>
<text>(element table 
</text>
<text>  ;; can't be a &quot;formal-object&quot; because it requires special handling for
</text>
<text>  ;; the PGWIDE attribute
</text>
<text>  (let* ((nsep   (gentext-label-title-sep (gi)))
</text>
<text>	 (pgwide (attribute-string (normalize &quot;pgwide&quot;)))
</text>
<text>	 (indent (lambda () (if (not (equal? pgwide &quot;1&quot;))
</text>
<text>				(+ %block-start-indent% 
</text>
<text>				   (inherited-start-indent))
</text>
<text>				%cals-pgwide-start-indent%)))
</text>
<text>	 (rule-before? %table-rules%)
</text>
<text>	 (rule-after? %table-rules%)
</text>
<text>	 (title-sosofo (make paragraph
</text>
<text>			 font-weight: %table-title-font-weight%
</text>
<text>			 space-before: (if (object-title-after)
</text>
<text>					   %para-sep%
</text>
<text>					   0pt)
</text>
<text>			 space-after: (if (object-title-after)
</text>
<text>					  0pt
</text>
<text>					  %para-sep%)
</text>
<text>			 start-indent: (indent)
</text>
<text>			  keep-with-next?: (not (object-title-after))
</text>
<text>			  (literal (gentext-element-name (current-node)))
</text>
<text>			  (if (string=? (element-label) &quot;&quot;)
</text>
<text>			      (literal nsep)
</text>
<text>			      (literal &quot; &quot; (element-label) nsep))
</text>
<text>			  (element-title-sosofo)))
</text>
<text>	  (table-sosofo (make display-group
</text>
<text>			  font-weight: 'bold
</text>
<text>			  space-before: 0pt
</text>
<text>			  space-after: 0pt
</text>
<text>			  start-indent: (indent)
</text>
<text>			  keep-with-next?: (object-title-after)
</text>
<text>			  (process-children)))
</text>
<text>	  (table (make display-group
</text>
<text>		   start-indent: (+ %block-start-indent%
</text>
<text>				    (inherited-start-indent))
</text>
<text>		   space-before: %block-sep%
</text>
<text>		   space-after: %block-sep%
</text>
<text>		   (if rule-before?
</text>
<text>		       (make rule
</text>
<text>			 orientation: 'horizontal
</text>
<text>			 line-thickness: %object-rule-thickness%
</text>
<text>			 display-alignment: 'center
</text>
<text>			 space-after: (/ %block-sep% 2)
</text>
<text>			 keep-with-next?: #t)
</text>
<text>		       (empty-sosofo))
</text>
<text>		   (if (object-title-after)
</text>
<text>		       (make sequence
</text>
<text>			 table-sosofo
</text>
<text>			 title-sosofo)
</text>
<text>		       (make sequence
</text>
<text>			 title-sosofo
</text>
<text>			 table-sosofo))
</text>
<text>		   (if rule-after?
</text>
<text>		       (make rule
</text>
<text>			 orientation: 'horizontal
</text>
<text>			 line-thickness: %object-rule-thickness%
</text>
<text>			 display-alignment: 'center
</text>
<text>			 space-before: (/ %block-sep% 2)
</text>
<text>			 keep-with-previous?: #t)
</text>
<text>		       (empty-sosofo)))))
</text>
<text>    (if (and (equal? (print-backend) 'tex)
</text>
<text>	     formal-object-float
</text>
<text>	     (float-object (current-node)))
</text>
<text>	(make page-float
</text>
<text>	  table)
</text>
<text>	table)))
</text>
<text>
</text>
<text>(element (table title) (empty-sosofo))
</text>
<text>
</text>
<text>(element comment
</text>
<text>  (if %show-comments%
</text>
<text>      (make paragraph
</text>
<text>	start-indent: 0pt
</text>
<text>	first-line-start-indent: -10pt
</text>
<text>	font-posture: 'italic
</text>
<text>	font-size: (* (inherited-font-size) 0.9)
</text>
<text>	(make sequence
</text>
<text>	  (make line-field 
</text>
<text>	    field-width: 10pt
</text>
<text>	    quadding: 'end
</text>
<text>	    (literal &quot;*&quot;))
</text>
<text>	  (process-children)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>;; In DocBook V4.0 comment became remark
</text>
<text>(element remark
</text>
<text>  (if %show-comments%
</text>
<text>      (make paragraph
</text>
<text>	start-indent: 0pt
</text>
<text>	first-line-start-indent: -10pt
</text>
<text>	font-posture: 'italic
</text>
<text>	font-size: (* (inherited-font-size) 0.9)
</text>
<text>	(make sequence
</text>
<text>	  (make line-field 
</text>
<text>	    field-width: 10pt
</text>
<text>	    quadding: 'end
</text>
<text>	    (literal &quot;*&quot;))
</text>
<text>	  (process-children)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Handle footnotes in the body...
</text>
<text>
</text>
<text>(define %footnote-field-width% 1.6em)
</text>
<text>(define %footnote-number-restarts% #t)
</text>
<text>(define %footnote-endnote-break% #f)
</text>
<text>
</text>
<text>(define (count-footnote? footnote)
</text>
<text>  ;; don't count footnotes in comments (unless you're showing comments)
</text>
<text>  ;; or footnotes in tables which are handled locally in the table
</text>
<text>  (if (or (and (has-ancestor-member? footnote (list (normalize &quot;comment&quot;)))
</text>
<text>	       (not %show-comments%))
</text>
<text>	  (has-ancestor-member? footnote (list (normalize &quot;tgroup&quot;))))
</text>
<text>      #f
</text>
<text>      #t))
</text>
<text>
</text>
<text>(define (footnote-number footnote)
</text>
<text>  ;; This is more complex than it at first appears because footnotes 
</text>
<text>  ;; can be in Comments which may be suppressed.
</text>
<text>  (let* ((root-list (if %footnote-number-restarts%
</text>
<text>			    (component-element-list)
</text>
<text>			    (list (normalize &quot;book&quot;))))
</text>
<text>	 (footnotes (if %footnote-ulinks%
</text>
<text>			(component-list-descendant-node-list
</text>
<text>			 footnote
</text>
<text>			 (list (normalize &quot;ulink&quot;) (normalize &quot;footnote&quot;))
</text>
<text>			 root-list)
</text>
<text>			(component-descendant-node-list
</text>
<text>			 footnote
</text>
<text>			 root-list)))
</text>
<text>	 (fn-number (let loop ((nl footnotes) (num 1))
</text>
<text>		      (if (node-list-empty? nl)
</text>
<text>			  0
</text>
<text>			  (if (node-list=? (node-list-first nl) footnote)
</text>
<text>			      num
</text>
<text>			      (if (count-footnote? (node-list-first nl))
</text>
<text>				  (loop (node-list-rest nl) (+ num 1))
</text>
<text>				  (loop (node-list-rest nl) num)))))))
</text>
<text>    (format-number fn-number &quot;1&quot;)))
</text>
<text>	      
</text>
<text>(element footnote 
</text>
<text>  (if (and (equal? (print-backend) 'tex) bop-footnotes)
</text>
<text>      (make sequence
</text>
<text>	($ss-seq$ + (literal (footnote-number (current-node))))
</text>
<text>	(make page-footnote (process-children)))
</text>
<text>      ($ss-seq$ + (literal (footnote-number (current-node))))))
</text>
<text>
</text>
<text>(element (footnote para)
</text>
<text>  ;; Note: this can only get called if the backend is 'tex
</text>
<text>  ;; If the backend is anything else, footnote never calls process
</text>
<text>  ;; children except in endnote-mode, so this doesn't get called.
</text>
<text>  (let ((fnnum	(footnote-number (parent (current-node)))))
</text>
<text>    (if (= (child-number) 1)
</text>
<text>	(make paragraph
</text>
<text>	  use: default-text-style
</text>
<text>	  font-size: (* %footnote-size-factor% %bf-size%)
</text>
<text>	  quadding: %default-quadding%
</text>
<text>	  line-spacing: (* (* %footnote-size-factor% %bf-size%)
</text>
<text>			   %line-spacing-factor%)
</text>
<text>	  space-before: %para-sep%
</text>
<text>	  space-after: %para-sep%
</text>
<text>	  start-indent: %footnote-field-width%
</text>
<text>	  first-line-start-indent: (- %footnote-field-width%)
</text>
<text>	  lines: 'wrap			; doesn't seem to work
</text>
<text>	  (make line-field
</text>
<text>	    field-width: %footnote-field-width%
</text>
<text>	    (literal fnnum 
</text>
<text>		     (gentext-label-title-sep (normalize &quot;footnote&quot;))))
</text>
<text>	  (process-children-trim))
</text>
<text>	(make paragraph
</text>
<text>	  use: default-text-style
</text>
<text>	  font-size: (* %footnote-size-factor% %bf-size%)
</text>
<text>	  quadding: %default-quadding%
</text>
<text>	  line-spacing: (* (* %footnote-size-factor% %bf-size%)
</text>
<text>			   %line-spacing-factor%)
</text>
<text>	  space-before: %para-sep%
</text>
<text>	  space-after: %para-sep%
</text>
<text>	  start-indent: %footnote-field-width%
</text>
<text>	  lines: 'wrap			; doesn't seem to work
</text>
<text>	  (process-children-trim)))))
</text>
<text>
</text>
<text>(define (non-table-footnotes footnotenl)
</text>
<text>  (let loop ((nl footnotenl) (result (empty-node-list)))
</text>
<text>    (if (node-list-empty? nl)
</text>
<text>	result
</text>
<text>	(if (has-ancestor-member? (node-list-first nl) 
</text>
<text>				  (list (normalize &quot;tgroup&quot;)))
</text>
<text>	    (loop (node-list-rest nl) 
</text>
<text>		  result)
</text>
<text>	    (loop (node-list-rest nl)
</text>
<text>		  (node-list result (node-list-first nl)))))))
</text>
<text>
</text>
<text>(define (make-endnote-header)
</text>
<text>  (let ((headsize (if (equal? (gi) (normalize &quot;refentry&quot;))
</text>
<text>		      (HSIZE 2)
</text>
<text>		      (HSIZE 3)))
</text>
<text>	(indent   (lambda () (if (equal? (gi) (normalize &quot;refentry&quot;))
</text>
<text>				 %body-start-indent%
</text>
<text>				 0pt))))
</text>
<text>    (make paragraph
</text>
<text>      break-before: %footnote-endnote-break%
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: headsize
</text>
<text>      line-spacing: (* headsize %line-spacing-factor%)
</text>
<text>      space-before: (* headsize %head-before-factor%)
</text>
<text>      space-after: (* headsize %head-after-factor%)
</text>
<text>      start-indent: (indent)
</text>
<text>      quadding: 'start
</text>
<text>      keep-with-next?: #t
</text>
<text>      (literal (gentext-endnotes)))))
</text>
<text>
</text>
<text>(define (make-endnotes #!optional (node (current-node)))
</text>
<text>  (let* ((allfootnotes (if %footnote-ulinks%
</text>
<text>			   (node-list-filter-by-gi
</text>
<text>			    (descendants node)
</text>
<text>			    (list (normalize &quot;footnote&quot;) (normalize &quot;ulink&quot;)))
</text>
<text>			   (select-elements (descendants node) 
</text>
<text>					    (normalize &quot;footnote&quot;))))
</text>
<text>	 (footnotes    (let loop ((nl (non-table-footnotes allfootnotes))
</text>
<text>				  (fnlist </text>
<text>(empty-node-list)))
</text>
<text>			 (if (node-list-empty? nl)
</text>
<text>			     fnlist
</text>
<text>			     (if (count-footnote? (node-list-first nl))
</text>
<text>				 (loop (node-list-rest nl) 
</text>
<text>				       (node-list fnlist (node-list-first nl)))
</text>
<text>				 (loop (node-list-rest nl)
</text>
<text>				       fnlist))))))
</text>
<text>    (if (or (node-list-empty? footnotes) 
</text>
<text>	    (and (equal? (print-backend) 'tex)
</text>
<text>		 bop-footnotes))
</text>
<text>	(empty-sosofo)
</text>
<text>	(if (or (equal? (gi node) (normalize &quot;reference&quot;))
</text>
<text>		(equal? (gi node) (normalize &quot;part&quot;)))
</text>
<text>	    (empty-sosofo) ;; Each RefEntry/Component does its own...
</text>
<text>	    (make sequence
</text>
<text>	      (make-endnote-header)
</text>
<text>	      (with-mode endnote-mode
</text>
<text>		(process-node-list footnotes)))))))
</text>
<text>
</text>
<text>(mode endnote-mode
</text>
<text>  (element footnote
</text>
<text>    (make sequence
</text>
<text>      start-indent: %body-start-indent%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (footnote para)
</text>
<text>    (let ((fnnum  (footnote-number (parent (current-node)))))
</text>
<text>      (if (= (child-number) 1)
</text>
<text>	  (make paragraph
</text>
<text>; I'm not sure this really makes sense in the endnote case...
</text>
<text>;	    font-size: (* %footnote-size-factor% %bf-size%)
</text>
<text>;	    line-spacing: (* (* %footnote-size-factor% %bf-size%)
</text>
<text>;			     %line-spacing-factor%)
</text>
<text>	    space-before: %para-sep%
</text>
<text>	    start-indent: (+ (inherited-start-indent) %footnote-field-width%)
</text>
<text>	    first-line-start-indent: (- %footnote-field-width%)
</text>
<text>	    (make line-field
</text>
<text>	      field-width: %footnote-field-width%
</text>
<text>	      (literal fnnum 
</text>
<text>		       (gentext-label-title-sep (normalize &quot;footnote&quot;))))
</text>
<text>	    (process-children-trim))
</text>
<text>	  (make paragraph
</text>
<text>	    font-size: (* %footnote-size-factor% %bf-size%)
</text>
<text>	    line-spacing: (* (* %footnote-size-factor% %bf-size%)
</text>
<text>			     %line-spacing-factor%)
</text>
<text>	    start-indent: (+ (inherited-start-indent) %footnote-field-width%)
</text>
<text>	    space-before: %para-sep%
</text>
<text>	    (process-children-trim)))))
</text>
<text>
</text>
<text>  (element ulink
</text>
<text>    (if %footnote-ulinks%
</text>
<text>	(let ((fnnum  (footnote-number (current-node))))
</text>
<text>	  (make paragraph
</text>
<text>;	    font-size: (* %footnote-size-factor% %bf-size%)
</text>
<text>;	    line-spacing: (* (* %footnote-size-factor% %bf-size%)
</text>
<text>;			     %line-spacing-factor%)
</text>
<text>	    space-before: %para-sep%
</text>
<text>	    start-indent: (+ (inherited-start-indent) %footnote-field-width%)
</text>
<text>	    first-line-start-indent: (- %footnote-field-width%)
</text>
<text>	    (make line-field
</text>
<text>	      field-width: %footnote-field-width%
</text>
<text>	      (literal fnnum 
</text>
<text>		       (gentext-label-title-sep (normalize &quot;footnote&quot;))))
</text>
<text>	    (literal (attribute-string &quot;url&quot;))))
</text>
<text>	(next-match))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Handle table footnotes
</text>
<text>
</text>
<text>(define (table-footnote-number footnote)
</text>
<text>  (format-number (component-child-number footnote 
</text>
<text>					 ($table-element-list$)) &quot;a&quot;))
</text>
<text>
</text>
<text>(element (entry footnote)
</text>
<text>  ($ss-seq$ + (literal (table-footnote-number (current-node)))))
</text>
<text>
</text>
<text>(element (entry para footnote)
</text>
<text>  ($ss-seq$ + (literal (table-footnote-number (current-node)))))
</text>
<text>
</text>
<text>(define (make-table-endnote-header)
</text>
<text>  (make paragraph
</text>
<text>    font-family-name: %body-font-family%
</text>
<text>    font-weight: 'medium
</text>
<text>    font-size: %bf-size%
</text>
<text>    start-indent: 0pt
</text>
<text>    quadding: 'start
</text>
<text>    (literal (gentext-table-endnotes))))
</text>
<text>
</text>
<text>(define (make-table-endnotes)
</text>
<text>  (let* ((footnotes (select-elements (descendants (current-node)) 
</text>
<text>				     (normalize &quot;footnote&quot;)))
</text>
<text>	 (headsize (HSIZE 3))
</text>
<text>	 (tgroup (ancestor-member (current-node) (list (normalize &quot;tgroup&quot;))))
</text>
<text>	 (cols   (string-&gt;number (attribute-string (normalize &quot;cols&quot;) tgroup))))
</text>
<text>    (if (node-list-empty? footnotes) 
</text>
<text>	(empty-sosofo)
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    n-columns-spanned: cols
</text>
<text>	    cell-before-row-margin: %cals-cell-before-row-margin%
</text>
<text>	    cell-after-row-margin: %cals-cell-after-row-margin%
</text>
<text>	    cell-before-column-margin: %cals-cell-before-column-margin%
</text>
<text>	    cell-after-column-margin: %cals-cell-after-column-margin%
</text>
<text>	    start-indent: %cals-cell-content-start-indent%
</text>
<text>	    end-indent: %cals-cell-content-end-indent%
</text>
<text>	    (make-table-endnote-header)
</text>
<text>	    (with-mode table-footnote-mode
</text>
<text>	      (process-node-list footnotes)))))))
</text>
<text>
</text>
<text>(mode table-footnote-mode
</text>
<text>  (element footnote
</text>
<text>    (make display-group
</text>
<text>      font-family-name: %body-font-family%
</text>
<text>      font-weight: 'medium
</text>
<text>      font-size: %bf-size%
</text>
<text>      start-indent: 0pt
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (footnote para)
</text>
<text>    (let ((fnnum (table-footnote-number (parent (current-node)))))
</text>
<text>      (if (= (child-number) 1)
</text>
<text>	  (make paragraph
</text>
<text>	    start-indent: %footnote-field-width%
</text>
<text>	    first-line-start-indent: (- %footnote-field-width%)
</text>
<text>	    (make line-field
</text>
<text>	      field-width: %footnote-field-width%
</text>
<text>	      (literal fnnum 
</text>
<text>		       (gentext-label-title-sep (normalize &quot;footnote&quot;))))
</text>
<text>	    (process-children-trim))
</text>
<text>	  (make paragraph
</text>
<text>	    start-indent: %footnote-field-width%
</text>
<text>	    (process-children-trim))))))
</text>
<text>
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbcallou.dsl,v 1.3 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; The support provided below is a little primitive because there's no way
</text>
<text>;; to do line-addressing in Jade.
</text>
<text>;;
</text>
<text>;; CO's are supported with the CO element or, in SCREENCO and 
</text>
<text>;; PROGRAMLISTINGCO only, AREAs.
</text>
<text>;;
</text>
<text>;; Notes on the use of AREAs:
</text>
<text>;;
</text>
<text>;; - Processing is very slow. Jade loops through each AREA for
</text>
<text>;;   every column on every line.
</text>
<text>;; - Only the LINECOLUMN units are supported, and they are #IMPLIED
</text>
<text>;; - If a COORDS only specifies a line, the %callout-default-col% will
</text>
<text>;;   be used for the column.
</text>
<text>;; - If the column is beyond the end of the line, that will work OK, but
</text>
<text>;;   if more than one callout has to get placed beyond the end of the same
</text>
<text>;;   line, that doesn't work so well.
</text>
<text>;; - Embedded tabs foul up the column counting.
</text>
<text>;; - Embedded markup fouls up the column counting.
</text>
<text>;; - Embedded markup with embedded line breaks fouls up the line counting.
</text>
<text>;; - The callout bugs occur immediately before the LINE COLUMN specified.
</text>
<text>;; - You can't point to an AREASET, that doesn't make any sense
</text>
<text>;;   since it would imply a one-to-many link
</text>
<text>;;
</text>
<text>;; There's still no support for a stylesheet drawing the callouts on a
</text>
<text>;; GRAPHIC, and I don't think there ever will be.
</text>
<text>;;
</text>
<text>
</text>
<text>(element areaspec (empty-sosofo))
</text>
<text>(element area (empty-sosofo))
</text>
<text>(element areaset (empty-sosofo))
</text>
<text>
</text>
<text>(element co
</text>
<text>  ($callout-mark$ (current-node)))
</text>
<text>
</text>
<text>(element programlistingco ($informal-object$))
</text>
<text>(element screenco ($informal-object$))
</text>
<text>(element graphicco ($informal-object$))
</text>
<text>
</text>
<text>(element (screenco screen) 
</text>
<text>  ($callout-verbatim-display$ %indent-screen-lines% %number-screen-lines%))
</text>
<text>
</text>
<text>(element (programlistingco programlisting) 
</text>
<text>  ($callout-verbatim-display$ %indent-programlisting-lines%
</text>
<text>			      %number-programlisting-lines%))
</text>
<text>
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>
</text>
<text>(define ($callout-bug$ conumber)
</text>
<text>  (if (and conumber %callout-fancy-bug%)
</text>
<text>      (case conumber
</text>
<text>	((1) (literal &quot;\dingbat-negative-circled-sans-serif-digit-one;&quot;))
</text>
<text>	((2) (literal &quot;\dingbat-negative-circled-sans-serif-digit-two;&quot;))
</text>
<text>	((3) (literal &quot;\dingbat-negative-circled-sans-serif-digit-three;&quot;))
</text>
<text>	((4) (literal &quot;\dingbat-negative-circled-sans-serif-digit-four;&quot;))
</text>
<text>	((5) (literal &quot;\dingbat-negative-circled-sans-serif-digit-five;&quot;))
</text>
<text>	((6) (literal &quot;\dingbat-negative-circled-sans-serif-digit-six;&quot;))
</text>
<text>	((7) (literal &quot;\dingbat-negative-circled-sans-serif-digit-seven;&quot;))
</text>
<text>	((8) (literal &quot;\dingbat-negative-circled-sans-serif-digit-eight;&quot;))
</text>
<text>	((9) (literal &quot;\dingbat-negative-circled-sans-serif-digit-nine;&quot;))
</text>
<text>	(else </text>
<text>(make sequence
</text>
<text>		font-weight: 'bold
</text>
<text>		(literal &quot;(&quot; (format-number conumber &quot;1&quot;) &quot;)&quot;))))
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(if conumber
</text>
<text>	    (literal &quot;(&quot; (format-number conumber &quot;1&quot;) &quot;)&quot;)
</text>
<text>	    (literal &quot;(??)&quot;)))))
</text>
<text>
</text>
<text>(define ($callout-mark$ co)
</text>
<text>  ;; Print the callout mark for co
</text>
<text>  (if (equal? (gi co) (normalize &quot;co&quot;))
</text>
<text>      ($callout-bug$ (if (node-list-empty? co)
</text>
<text>			 #f
</text>
<text>			 (child-number co)))
</text>
<text>      (let ((areanum (if (node-list-empty? co)
</text>
<text>			 #f
</text>
<text>			 (if (equal? (gi (parent co)) (normalize &quot;areaset&quot;))
</text>
<text>			     (absolute-child-number (parent co))
</text>
<text>			     (absolute-child-number co)))))
</text>
<text>	($callout-bug$ (if (node-list-empty? co)
</text>
<text>			   #f
</text>
<text>			   areanum)))))
</text>
<text>
</text>
<text>(define ($look-for-callout$ line col #!optional (eol? #f))
</text>
<text>  ;; Look to see if a callout should be printed at line col, and print
</text>
<text>  ;; it if it should
</text>
<text>  (let* ((areaspec (select-elements (children (parent (current-node)))
</text>
<text>				    (normalize &quot;areaspec&quot;)))
</text>
<text>	 (areas    (expand-children (children areaspec) 
</text>
<text>				    (list (normalize &quot;areaset&quot;)))))
</text>
<text>    (let loop ((areanl areas))
</text>
<text>      (if (node-list-empty? areanl)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make sequence
</text>
<text>	    (if ($callout-area-match$ (node-list-first areanl) line col eol?)
</text>
<text>		($callout-area-format$ (node-list-first areanl) line col eol?)
</text>
<text>		(empty-sosofo))
</text>
<text>	    (loop (node-list-rest areanl)))))))
</text>
<text>
</text>
<text>(define ($callout-area-match$ area line col eol?)
</text>
<text>  ;; Does AREA area match line col?
</text>
<text>  (let* ((coordlist (split (attribute-string (normalize &quot;coords&quot;) area)))
</text>
<text>	 (aline (string-&gt;number (car coordlist)))
</text>
<text>	 (acol  (if (null? (cdr coordlist))
</text>
<text>		    #f
</text>
<text>		    (string-&gt;number (car (cdr coordlist)))))
</text>
<text>	 (units (if (inherited-attribute-string (normalize &quot;units&quot;) area)
</text>
<text>		    (inherited-attribute-string (normalize &quot;units&quot;) area)
</text>
<text>		    (normalize &quot;linecolumn&quot;))))
</text>
<text>    (and (equal? units (normalize &quot;linecolumn&quot;))
</text>
<text>	 (or
</text>
<text>	  (and (equal? line aline)
</text>
<text>	       (equal? col acol))
</text>
<text>	  (and (equal? line aline)
</text>
<text>	       eol? 
</text>
<text>	       (or (not acol) (&gt; acol col)))))))
</text>
<text>
</text>
<text>(define ($callout-area-format$ area line col eol?)
</text>
<text>  ;; Format AREA area at the appropriate place
</text>
<text>  (let* ((coordlist (split (attribute-string (normalize &quot;coords&quot;) area)))
</text>
<text>	 (aline (string-&gt;number (car coordlist)))
</text>
<text>	 (acol  (if (null? (cdr coordlist))
</text>
<text>		    #f
</text>
<text>		    (string-&gt;number (car (cdr coordlist))))))
</text>
<text>    (if (and (equal? line aline)
</text>
<text>	     eol? 
</text>
<text>	     (or (not acol) (&gt; acol col)))
</text>
<text>	(make sequence
</text>
<text>	  (let loop ((atcol col))
</text>
<text>	    (if (&gt;= atcol (if acol acol %callout-default-col%))
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (literal &quot;\no-break-space;&quot;)
</text>
<text>		  (loop (+ atcol 1)))))
</text>
<text>	  ($callout-mark$ area))
</text>
<text>	($callout-mark$ area))))
</text>
<text>
</text>
<text>(define ($callout-linespecific-content$ indent line-numbers?)
</text>
<text>  ;; Print linespecific content in a callout with line numbers
</text>
<text>  (make sequence
</text>
<text>    ($line-start$ indent line-numbers? 1)
</text>
<text>    (let loop ((kl (children (current-node)))
</text>
<text>	       (linecount 1)
</text>
<text>	       (colcount 1)
</text>
<text>	       (res (empty-sosofo)))
</text>
<text>      (if (node-list-empty? kl)
</text>
<text>	  (sosofo-append res
</text>
<text>			 ($look-for-callout$ linecount colcount #t)
</text>
<text>			 (empty-sosofo))
</text>
<text>	  (loop
</text>
<text>	   (node-list-rest kl)
</text>
<text>	   (if (char=? (node-property 'char (node-list-first kl)
</text>
<text>				      default: #\U-0000) #\U-000D)
</text>
<text>	       (+ linecount 1)
</text>
<text>	       linecount)
</text>
<text>	   (if (char=? (node-property 'char (node-list-first kl)
</text>
<text>				      default: #\U-0000) #\U-000D)
</text>
<text>	       1
</text>
<text>	       (if (char=? (node-property 'char (node-list-first kl)
</text>
<text>					  default: #\U-0000) #\U-0000)
</text>
<text>		   colcount
</text>
<text>		   (+ colcount 1)))
</text>
<text>	   (let ((c (node-list-first kl)))
</text>
<text>	     (if (char=? (node-property 'char c default: #\U-0000)
</text>
<text>			 #\U-000D)
</text>
<text>		 (sosofo-append res
</text>
<text>				($look-for-callout$ linecount colcount #t)
</text>
<text>				(process-node-list c)
</text>
<text>				($line-start$ indent
</text>
<text>					      line-numbers?
</text>
<text>					      (+ linecount 1)))
</text>
<text>		 (sosofo-append res
</text>
<text>				($look-for-callout$ linecount colcount)
</text>
<text>				(process-node-list c)))))))))
</text>
<text>
</text>
<text>(define ($callout-verbatim-display$ indent line-numbers?)
</text>
<text>  (let* ((width-in-chars (if (attribute-string &quot;width&quot;)
</text>
<text>			     (string-&gt;number (attribute-string &quot;width&quot;))
</text>
<text>			     80)) ;; seems like a reasonable default...
</text>
<text>	 (fsize (lambda () (if %verbatim-size-factor%
</text>
<text>			       (* (inherited-font-size) %verbatim-size-factor%)
</text>
<text>			       (/ (/ (- %text-width% (inherited-start-indent))
</text>
<text>				     width-in-chars) 0.7)))))
</text>
<text>    (make paragraph
</text>
<text>	  space-before: (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>	  space-after:  (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>	  font-family-name: %mono-font-family%
</text>
<text>	  font-size: (fsize)
</text>
<text>	  font-weight: 'medium
</text>
<text>	  font-posture: 'upright
</text>
<text>	  line-spacing: (* (fsize) %line-spacing-factor%)
</text>
<text>	  start-indent: (inherited-start-indent)
</text>
<text>	  lines: 'asis
</text>
<text>          input-whitespace-treatment: 'preserve
</text>
<text>	  quadding: 'start
</text>
<text>	  ($callout-linespecific-content$ indent line-numbers?))))
</text>
<text>
</text>
<text>;; EOF dbcallout.dsl</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dbcompon.dsl,v 1.2 2003/02/17 08:32:39 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================= COMPONENTS =============================
</text>
<text>;;
</text>
<text>;; in docbook, components are containers at the chapter/appendix level
</text>
<text>
</text>
<text>(define ($title-header-footer-element$)
</text>
<text>  (let* ((firstchild (node-list-first (children (current-node))))
</text>
<text>	 (metainfo   (if (node-list-empty? firstchild)
</text>
<text>			 (empty-node-list)
</text>
<text>			 (if (member (gi firstchild) (info-element-list))
</text>
<text>			     firstchild
</text>
<text>			     (empty-node-list))))
</text>
<text>	 (metatitle  (select-elements (children metainfo) (normalize &quot;title&quot;)))
</text>
<text>	 (metatabb   (select-elements (children metainfo) (normalize &quot;titleabbrev&quot;)))
</text>
<text>	 (title      (select-elements (children (current-node)) 
</text>
<text>				      (normalize &quot;title&quot;)))
</text>
<text>	 (titleabb   (select-elements (children (current-node)) 
</text>
<text>				      (normalize &quot;titleabbrev&quot;))))
</text>
<text>    (if (node-list-empty? metatabb)
</text>
<text>	(if (node-list-empty? titleabb)
</text>
<text>	    (if (node-list-empty? metatitle)
</text>
<text>		title
</text>
<text>		metatitle)
</text>
<text>	    titleabb)
</text>
<text>	metatabb)))
</text>
<text>  
</text>
<text>(define ($refentry-header-footer-element$)
</text>
<text>  (let* ((refdescriptor (node-list-first 
</text>
<text>			 (select-elements 
</text>
<text>			  (descendants (current-node)) (normalize &quot;refdescriptor&quot;))))
</text>
<text>	 (refname       (node-list-first 
</text>
<text>			 (select-elements 
</text>
<text>			  (descendants (current-node)) (normalize &quot;refname&quot;))))
</text>
<text>         (refentrytitle (node-list-first 
</text>
<text>			 (select-elements 
</text>
<text>			  (descendants (current-node)) (normalize &quot;refentrytitle&quot;)))))
</text>
<text>    (if (node-list-empty? refentrytitle)
</text>
<text>	(if (node-list-empty? refdescriptor)
</text>
<text>	    refname
</text>
<text>	    refdescriptor)
</text>
<text>	refentrytitle)))
</text>
<text>
</text>
<text>(define ($title-header-footer$)
</text>
<text>  (let* ((title (if (equal? (gi) (normalize &quot;refentry&quot;))
</text>
<text>		   ($refentry-header-footer-element$)
</text>
<text>		   ($title-header-footer-element$))))
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (with-mode hf-mode 
</text>
<text>	(process-node-list title)))))
</text>
<text>
</text>
<text>(define ($page-number-header-footer$) 
</text>
<text>  (let ((component (ancestor-member (current-node) 
</text>
<text>				    (append (division-element-list)
</text>
<text>					    (component-element-list)))))
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (literal 
</text>
<text>       (gentext-page)
</text>
<text>       (if %page-number-restart%
</text>
<text>	   (cond
</text>
<text>	    ((equal? (gi component) (normalize &quot;appendix&quot;) ) 
</text>
<text>	     (string-append
</text>
<text>	      (element-label component #t)
</text>
<text>	      (gentext-intra-label-sep &quot;_pagenumber&quot;)))
</text>
<text>	    ((equal? (gi component) (normalize &quot;chapter&quot;))
</text>
<text>	     (string-append
</text>
<text>	      (element-label component #t)
</text>
<text>	      (gentext-intra-label-sep &quot;_pagenumber&quot;)))
</text>
<text>	    (else &quot;&quot;))
</text>
<text>	   &quot;&quot;))
</text>
<text>      (page-number-sosofo))))
</text>
<text>
</text>
<text>(define (first-page-inner-header gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (first-page-center-header gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (first-page-outer-header gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (page-inner-header gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (page-center-header gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (page-outer-header gi)
</text>
<text>  (cond
</text>
<text>   ((equal? (normalize gi) (normalize &quot;dedication&quot;)) (empty-sosofo))
</text>
<text>   ((equal? (normalize gi) (normalize &quot;lot&quot;)) (empty-sosofo))
</text>
<text>   ((equal? (normalize gi) (normalize &quot;part&quot;)) (empty-sosofo))
</text>
<text>   ((equal? (normalize gi) (normalize &quot;toc&quot;)) (empty-sosofo))
</text>
<text>   (else ($title-header-footer$))))
</text>
<text>
</text>
<text>(define (first-page-inner-footer gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (first-page-center-footer gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (first-page-outer-footer gi)
</text>
<text>  (cond
</text>
<text>   ((equal? (normalize gi) (normalize &quot;dedication&quot;)) (empty-sosofo))
</text>
<text>   ((equal? (normalize gi) (normalize &quot;part&quot;)) (empty-sosofo))
</text>
<text>   (else ($page-number-header-footer$))))
</text>
<text>
</text>
<text>(define (page-inner-footer gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (page-center-footer gi)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (page-outer-footer gi)
</text>
<text>  ($page-number-header-footer$))
</text>
<text>
</text>
<text>(define ($page-number-format$ #!optional (gi (gi)))
</text>
<text>  (cond
</text>
<text>   ((equal? (normalize gi) (normalize &quot;toc&quot;)) &quot;i&quot;)
</text>
<text>   ((equal? (normalize gi) (normalize &quot;lot&quot;)) &quot;i&quot;)
</text>
<text>   ((equal? (normalize gi) (normalize &quot;preface&quot;)) &quot;i&quot;)
</text>
<text>   (else &quot;1&quot;)))
</text>
<text>
</text>
<text>(define ($left-header$ #!optional (gi (gi)))
</text>
<text>  (if-first-page
</text>
<text>   (if (equal? %writing-mode% 'left-to-right)
</text>
<text>       (first-page-inner-header gi)
</text>
<text>       (first-page-outer-header gi))
</text>
<text>   (if %two-side%
</text>
<text>       (if-front-page
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-inner-header gi)
</text>
<text>	    (page-outer-header gi))
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-outer-header gi)
</text>
<text>	    (page-inner-header gi)))
</text>
<text>       (if (equal? %writing-mode% 'left-to-right)
</text>
<text>	   (page-inner-header gi)
</text>
<text>	   (page-outer-header gi)))))
</text>
<text>
</text>
<text>(define ($center-header$ #!optional (gi (gi)))
</text>
<text>  (if-first-page
</text>
<text>   (first-page-center-header gi)
</text>
<text>   (page-center-header gi)))
</text>
<text>
</text>
<text>(define ($right-header$ #!optional (gi (gi)))
</text>
<text>  (if-first-page
</text>
<text>   (if (equal? %writing-mode% 'left-to-right)
</text>
<text>       (first-page-outer-header gi)
</text>
<text>       (first-page-inner-header gi))
</text>
<text>   (if %two-side%
</text>
<text>       (if-front-page
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-outer-header gi)
</text>
<text>	    (page-inner-header gi))
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-inner-header gi)
</text>
<text>	    (page-outer-header gi)))
</text>
<text>       (if (equal? %writing-mode% 'left-to-right)
</text>
<text>	   (page-outer-header gi)
</text>
<text>	   (page-inner-header gi)))))
</text>
<text>
</text>
<text>(define ($left-footer$ #!optional (gi (gi)))
</text>
<text>  (if-first-page
</text>
<text>   (if (equal? %writing-mode% 'left-to-right)
</text>
<text>       (first-page-inner-footer gi)
</text>
<text>       (first-page-outer-footer gi))
</text>
<text>   (if %two-side%
</text>
<text>       (if-front-page
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-inner-footer gi)
</text>
<text>	    (page-outer-footer gi))
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-outer-footer gi)
</text>
<text>	    (page-inner-footer gi)))
</text>
<text>       (if (equal? %writing-mode% 'left-to-right)
</text>
<text>	   (page-inner-footer gi)
</text>
<text>	   (page-outer-footer gi)))))
</text>
<text>
</text>
<text>(define ($center-footer$ #!optional (gi (gi)))
</text>
<text>  (if-first-page
</text>
<text>   (first-page-center-footer gi)
</text>
<text>   (page-center-footer gi)))
</text>
<text>
</text>
<text>(define ($right-footer$ #!optional (gi (gi)))
</text>
<text>  (if-first-page
</text>
<text>   (if (equal? %writing-mode% 'left-to-right)
</text>
<text>       (first-page-outer-footer gi)
</text>
<text>       (first-page-inner-footer gi))
</text>
<text>   (if %two-side%
</text>
<text>       (if-front-page
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-outer-footer gi)
</text>
<text>	    (page-inner-footer gi))
</text>
<text>	(if (equal? %writing-mode% 'left-to-right)
</text>
<text>	    (page-inner-footer gi)
</text>
<text>	    (page-outer-footer gi)))
</text>
<text>       (if (equal? %writing-mode% 'left-to-right)
</text>
<text>	   (page-outer-footer gi)
</text>
<text>	   (page-inner-footer gi)))))
</text>
<text>
</text>
<text>(define ($component$)
</text>
<text>  (make simple-page-sequence
</text>
<text>    page-n-columns: %page-n-columns%
</text>
<text>    page-number-restart?: (or %page-number-restart% 
</text>
<text>			      (book-start?) 
</text>
<text>			      (first-chapter?))
</text>
<text>    page-number-format: ($page-number-format$)
</text>
<text>    use: default-text-style
</text>
<text>    left-header:   ($left-header$)
</text>
<text>    center-header: ($center-header$)
</text>
<text>    right-header:  ($right-header$)
</text>
<text>    left-footer:   ($left-footer$)
</text>
<text>    center-footer: ($center-footer$)
</text>
<text>    right-footer:  ($right-footer$)
</text>
<text>    start-indent: %body-start-indent%
</text>
<text>    input-whitespace-treatment: 'collapse
</text>
<text>    quadding: %default-quadding%
</text>
<text>    (make sequence
</text>
<text>      ($component-title$)
</text>
<text>      (process-children))
</text>
<text>    (make-endnotes)))
</text>
<text>
</text>
<text>(define ($component-title$)
</text>
<text>  (let* ((info (cond
</text>
<text>		((equal? (gi) (normalize &quot;appendix&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;article&quot;))
</text>
<text>		 (node-list-filter-by-gi (children (current-node))
</text>
<text>					 (list (normalize &quot;artheader&quot;)
</text>
<text>					       (normalize &quot;articleinfo&quot;))))
</text>
<text>		((equal? (gi) (normalize &quot;bibliography&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;chapter&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;dedication&quot;)) 
</text>
<text>		 (empty-node-list))
</text>
<text>		((equal? (gi) (normalize &quot;glossary&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;index&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;preface&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;reference&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		((equal? (gi) (normalize &quot;setindex&quot;))
</text>
<text>		 (select-elements (children (current-node)) (normalize &quot;docinfo&quot;)))
</text>
<text>		(else
</text>
<text>		 (empty-node-list))))
</text>
<text>	 (exp-children (if (node-list-empty? info)
</text>
<text>			   (empty-node-list)
</text>
<text>			   (expand-children (children info) 
</text>
<text>					    (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>						  (normalize &quot;bibliomisc&quot;)
</text>
<text>						  (normalize &quot;biblioset&quot;)))))
</text>
<text>	 (parent-titles (select-elements (children (current-node)) (normalize &quot;title&quot;)))
</text>
<text>	 (info-titles   (select-elements exp-children (normalize &quot;title&quot;)))
</text>
<text>	 (titles        (if (node-list-empty? parent-titles)
</text>
<text>			    info-titles
</text>
<text>			    parent-titles))
</text>
<text>	 (subtitles     (select-elements exp-children (normalize &quot;subtitle&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight: 'bold
</text>
<text>	font-size: (HSIZE 4)
</text>
<text>	line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>	start-indent: 0pt
</text>
<text>	first-line-start-indent: 0pt
</text>
<text>	quadding: %component-title-quadding%
</text>
<text>	heading-level: (if %generate-heading-level% 1 0)
</text>
<text>	keep-with-next?: #t
</text>
<text>
</text>
<text>	(if (string=? (element-label) &quot;&quot;)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal (gentext-element-name-space (current-node))
</text>
<text>		     (element-label)
</text>
<text>		     (gentext-label-title-sep (gi))))
</text>
<text>
</text>
<text>	(if (node-list-empty? titles)
</text>
<text>	    (element-title-sosofo) ;; get a default!
</text>
<text>	    (with-mode component-title-mode
</text>
<text>	      (make sequence
</text>
<text>		(process-node-list titles)))))
</text>
<text>
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight: 'bold
</text>
<text>	font-posture: 'italic
</text>
<text>	font-size: (HSIZE 3)
</text>
<text>	line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	space-before: (* 0.5 (* (HSIZE 3) %head-before-factor%))
</text>
<text>	space-after: (* (HSIZE 4) %head-after-factor%)
</text>
<text>	start-indent: 0pt
</text>
<text>	first-line-start-indent: 0pt
</text>
<text>	quadding: </text>
<text>%component-subtitle-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>
</text>
<text>	(with-mode component-title-mode
</text>
<text>	  (make sequence
</text>
<text>	    (process-node-list subtitles)))))))
</text>
<text>
</text>
<text>(mode component-title-mode
</text>
<text>  (element title
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (process-children))
</text>
<text>)
</text>
<text>
</text>
<text>;; this is how we prevent the title in the header from acquiring the
</text>
<text>;;   display treatment that it receives in the body of the document
</text>
<text>;;
</text>
<text>(mode hf-mode
</text>
<text>  (element title
</text>
<text>    (let* ((component (ancestor-member (current-node) 
</text>
<text>				       (component-element-list)))
</text>
<text>	   (chaporapp (or (equal? (gi component) (normalize &quot;chapter&quot;))
</text>
<text>			  (equal? (gi component) (normalize &quot;appendix&quot;)))))
</text>
<text>      (if %chap-app-running-heads%
</text>
<text>	  (make sequence
</text>
<text>	    (if (and chaporapp
</text>
<text>		     %chapter-autolabel%
</text>
<text>		     (or %chap-app-running-head-autolabel%
</text>
<text>			 (attribute-string (normalize &quot;label&quot;) component)))
</text>
<text>		(literal (gentext-element-name-space component)
</text>
<text>			 (element-label component)
</text>
<text>			 (gentext-label-title-sep (gi component)))
</text>
<text>		(empty-sosofo))
</text>
<text>	    (process-children-trim))
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element titleabbrev
</text>
<text>    (if %chap-app-running-heads%
</text>
<text>	(make sequence
</text>
<text>	  (if (or (have-ancestor? (normalize &quot;chapter&quot;))
</text>
<text>		  (have-ancestor? (normalize &quot;appendix&quot;)))
</text>
<text>	      (literal (gentext-element-name-space (parent))
</text>
<text>		       (element-label (parent))
</text>
<text>		       (gentext-label-title-sep (gi (parent))))
</text>
<text>	      (empty-sosofo))
</text>
<text>	  (process-children-trim))
</text>
<text>	(empty-sosofo)))
</text>
<text>
</text>
<text>  (element refentrytitle
</text>
<text>    (if %chap-app-running-heads%
</text>
<text>	(process-children-trim)
</text>
<text>	(empty-sosofo)))
</text>
<text>
</text>
<text>  (element refdescriptor
</text>
<text>    (if %chap-app-running-heads%
</text>
<text>	(process-children-trim)
</text>
<text>	(empty-sosofo)))
</text>
<text>
</text>
<text>  (element refname
</text>
<text>    (if %chap-app-running-heads%
</text>
<text>	(process-children-trim)
</text>
<text>	(empty-sosofo)))
</text>
<text>
</text>
<text>  ;; Graphics aren't allowed in headers and footers...
</text>
<text>  (element graphic
</text>
<text>    (empty-sosofo))
</text>
<text>
</text>
<text>  (element inlinegraphic
</text>
<text>    (empty-sosofo))
</text>
<text>)
</text>
<text>
</text>
<text>(element appendix ($component$))
</text>
<text>(element (article appendix) ($section$)) ;; this is a special case
</text>
<text>(element (appendix title) (empty-sosofo))
</text>
<text>
</text>
<text>(element chapter ($component$))
</text>
<text>(element (chapter title) (empty-sosofo))
</text>
<text>
</text>
<text>(element preface ($component$))
</text>
<text>(element (preface title) (empty-sosofo))
</text>
<text>
</text>
<text>;; Dedication is empty except in a special mode so that it can be
</text>
<text>;; reordered (made to come before the TOCs)
</text>
<text>(element dedication (empty-sosofo))
</text>
<text>(mode dedication-page-mode
</text>
<text>  (element dedication ($component$))
</text>
<text>  (element (dedication title) (empty-sosofo))
</text>
<text>)
</text>
<text>
</text>
<text>;; Articles are like components, except that if they may have much
</text>
<text>;; more formal title pages (created with article-titlepage).
</text>
<text>;;
</text>
<text>(element article
</text>
<text>  (let* ((info (node-list-filter-by-gi (children (current-node))
</text>
<text>				       (list (normalize &quot;artheader&quot;)
</text>
<text>					     (normalize &quot;articleinfo&quot;))))
</text>
<text>	 (nl   (titlepage-info-elements (current-node) info))
</text>
<text>	 (article-titlepage (if %generate-article-titlepage-on-separate-page%
</text>
<text>				(make sequence
</text>
<text>				  (if (article-titlepage-content? nl 'recto)
</text>
<text>				      (make simple-page-sequence
</text>
<text>					page-n-columns: %page-n-columns%
</text>
<text>					use: default-text-style
</text>
<text>					quadding: %default-quadding%
</text>
<text>					(article-titlepage nl 'recto))
</text>
<text>				      (empty-sosofo))
</text>
<text>				  (if (article-titlepage-content? nl 'verso)
</text>
<text>				      (make simple-page-sequence
</text>
<text>					page-n-columns: %page-n-columns%
</text>
<text>					use: default-text-style
</text>
<text>					quadding: %default-quadding%
</text>
<text>					(article-titlepage nl 'verso))
</text>
<text>				      (empty-sosofo)))
</text>
<text>				(make sequence
</text>
<text>				  (article-titlepage nl 'recto)
</text>
<text>				  (article-titlepage nl 'verso)))))
</text>
<text>    (make sequence
</text>
<text>
</text>
<text>      ;; make the titlepage first if its on a separate page
</text>
<text>      (if (and %generate-article-titlepage% 
</text>
<text>	       %generate-article-titlepage-on-separate-page%)
</text>
<text>	  article-titlepage
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      ;; make the TOC on a separate page if requested and it's not
</text>
<text>      ;; already on the title page and it's supposed to be in front
</text>
<text>      (if (and %generate-article-toc% 
</text>
<text>	       (not %generate-article-toc-on-titlepage%)
</text>
<text>	       %generate-article-titlepage-on-separate-page%
</text>
<text>	       (generate-toc-in-front))
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %page-n-columns%
</text>
<text>	    page-number-restart?: %article-page-number-restart%
</text>
<text>	    page-number-format: ($page-number-format$ (normalize &quot;toc&quot;))
</text>
<text>	    left-header:   ($left-header$ (normalize &quot;toc&quot;))
</text>
<text>	    center-header: ($center-header$ (normalize &quot;toc&quot;))
</text>
<text>	    right-header:  ($right-header$ (normalize &quot;toc&quot;))
</text>
<text>	    left-footer:   ($left-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    center-footer: ($center-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    right-footer:  ($right-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    use: default-text-style
</text>
<text>	    quadding: %default-quadding%
</text>
<text>	    (build-toc (current-node)
</text>
<text>		       (toc-depth (current-node))))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      ;; start a new page for the article itself
</text>
<text>      (make simple-page-sequence
</text>
<text>	page-n-columns: %page-n-columns%
</text>
<text>	page-number-restart?: (or %article-page-number-restart% 
</text>
<text>				  (book-start?))
</text>
<text>	page-number-format: ($page-number-format$)
</text>
<text>	use: default-text-style
</text>
<text>	left-header:   ($left-header$)
</text>
<text>	center-header: ($center-header$)
</text>
<text>	right-header:  ($right-header$)
</text>
<text>	left-footer:   ($left-footer$)
</text>
<text>	center-footer: ($center-footer$)
</text>
<text>	right-footer:  ($right-footer$)
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	input-whitespace-treatment: 'collapse
</text>
<text>	quadding: %default-quadding%
</text>
<text>
</text>
<text>	;; ... and include the titlepage if there is one and it's not
</text>
<text>	;; already generated on a separate page
</text>
<text>	(if (and %generate-article-titlepage% 
</text>
<text>		 (not %generate-article-titlepage-on-separate-page%))
</text>
<text>	    article-titlepage
</text>
<text>	    (empty-sosofo))
</text>
<text>
</text>
<text>	;; ... and include the TOC if it is in front and not already
</text>
<text>	;; generated
</text>
<text>	(if (and %generate-article-toc% 
</text>
<text>		 (generate-toc-in-front)
</text>
<text>		 (not %generate-article-toc-on-titlepage%)
</text>
<text>		 (not %generate-article-titlepage-on-separate-page%))
</text>
<text>	    (make display-group
</text>
<text>	      space-after: (* (HSIZE 3) %head-after-factor%)
</text>
<text>	      (build-toc (current-node)
</text>
<text>			 (toc-depth (current-node))))
</text>
<text>	    (empty-sosofo))
</text>
<text>
</text>
<text>	;; .. and the contents of the article
</text>
<text>	(process-children)
</text>
<text>
</text>
<text>        ;; ... and the endnotes
</text>
<text>	(make-endnotes)
</text>
<text>
</text>
<text>	;; ... and the TOC if it is supposed to be on the back and not
</text>
<text>	;; on the titlepage nor on a separate pagee
</text>
<text>	(if (and %generate-article-toc% 
</text>
<text>		 (not (generate-toc-in-front))
</text>
<text>		 (not %generate-article-toc-on-titlepage%)
</text>
<text>		 (not %generate-article-titlepage-on-separate-page%))
</text>
<text>	    (make display-group
</text>
<text>	      space-after: (* (HSIZE 3) %head-after-factor%)
</text>
<text>	      (build-toc (current-node)
</text>
<text>			 (toc-depth (current-node))))
</text>
<text>	    (empty-sosofo)))
</text>
<text>
</text>
<text>      ;; finally, produce the TOC if it is supposed to be at the end
</text>
<text>      ;; and on its own page
</text>
<text>      (if (and %generate-article-toc% 
</text>
<text>	       (not %generate-article-toc-on-titlepage%)
</text>
<text>	       %generate-article-titlepage-on-separate-page%
</text>
<text>	       (not (generate-toc-in-front)))
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %page-n-columns%
</text>
<text>	    use: default-text-style
</text>
<text>	    quadding: %default-quadding%
</text>
<text>	    (build-toc (current-node)
</text>
<text>		       (toc-depth (current-node))))
</text>
<text>	  (empty-sosofo)))))
</text>
<text>
</text>
<text>(element (article title) (empty-sosofo))
</text>
<text>
</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dbdivis.dsl,v 1.4 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================= DIVISIONS </text>
<text>==============================
</text>
<text>
</text>
<text>(element set
</text>
<text>  (let* ((setinfo  (select-elements (children (current-node)) 
</text>
<text>				    (normalize &quot;setinfo&quot;)))
</text>
<text>	 (nl       (titlepage-info-elements (current-node) setinfo)))
</text>
<text>    (make sequence
</text>
<text>      (if %generate-set-titlepage%
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %titlepage-n-columns%
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    use: default-text-style
</text>
<text>	    (set-titlepage nl 'recto)
</text>
<text>	    (make display-group
</text>
<text>	      break-before: 'page
</text>
<text>	      (set-titlepage nl 'verso)))
</text>
<text>	  (empty-sosofo))
</text>
<text>      
</text>
<text>      (if (not (generate-toc-in-front))
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if %generate-set-toc%
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %page-n-columns%
</text>
<text>	    page-number-format: ($page-number-format$ (normalize &quot;toc&quot;))
</text>
<text>	    use: default-text-style
</text>
<text>	    left-header:   ($left-header$ (normalize &quot;toc&quot;))
</text>
<text>	    center-header: ($center-header$ (normalize &quot;toc&quot;))
</text>
<text>	    right-header:  ($right-header$ (normalize &quot;toc&quot;))
</text>
<text>	    left-footer:   ($left-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    center-footer: ($center-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    right-footer:  ($right-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    (build-toc (current-node)
</text>
<text>		       (toc-depth (current-node))))
</text>
<text>	  (empty-sosofo))
</text>
<text>	    
</text>
<text>      (if (generate-toc-in-front)
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo)))))
</text>
<text>
</text>
<text>(element (set title) (empty-sosofo))
</text>
<text>
</text>
<text>(element book 
</text>
<text>  (let* ((bookinfo  (select-elements (children (current-node)) 
</text>
<text>				     (normalize &quot;bookinfo&quot;)))
</text>
<text>	 (dedication (select-elements (children (current-node)) 
</text>
<text>				      (normalize &quot;dedication&quot;)))
</text>
<text>	 (nl        (titlepage-info-elements (current-node) bookinfo)))
</text>
<text>    (make sequence
</text>
<text>      (if %generate-book-titlepage%
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %titlepage-n-columns%
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    use: default-text-style
</text>
<text>	    (book-titlepage nl 'recto)
</text>
<text>	    (make display-group
</text>
<text>	      break-before: 'page
</text>
<text>	      (book-titlepage nl 'verso)))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if (node-list-empty? dedication)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (with-mode dedication-page-mode
</text>
<text>	    (process-node-list dedication)))
</text>
<text>
</text>
<text>      (if (not (generate-toc-in-front))
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if %generate-book-toc%
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %page-n-columns%
</text>
<text>	    page-number-format: ($page-number-format$ (normalize &quot;toc&quot;))
</text>
<text>	    use: default-text-style
</text>
<text>	    left-header:   ($left-header$ (normalize &quot;toc&quot;))
</text>
<text>	    center-header: ($center-header$ (normalize &quot;toc&quot;))
</text>
<text>	    right-header:  ($right-header$ (normalize &quot;toc&quot;))
</text>
<text>	    left-footer:   ($left-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    center-footer: ($center-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    right-footer:  ($right-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    (build-toc (current-node)
</text>
<text>		       (toc-depth (current-node))))
</text>
<text>	  (empty-sosofo))
</text>
<text>	    
</text>
<text>      (let loop ((gilist ($generate-book-lot-list$)))
</text>
<text>	(if (null? gilist)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (if (not (node-list-empty? 
</text>
<text>		      (select-elements (descendants (current-node))
</text>
<text>				       (car gilist))))
</text>
<text>		(make simple-page-sequence
</text>
<text>		  page-n-columns: %page-n-columns%
</text>
<text>		  page-number-format: ($page-number-format$ (normalize &quot;lot&quot;))
</text>
<text>		  use: default-text-style
</text>
<text>		  left-header:   ($left-header$ (normalize &quot;lot&quot;))
</text>
<text>		  center-header: ($center-header$ (normalize &quot;lot&quot;))
</text>
<text>		  right-header:  ($right-header$ (normalize &quot;lot&quot;))
</text>
<text>		  left-footer:   ($left-footer$ (normalize &quot;lot&quot;))
</text>
<text>		  center-footer: ($center-footer$ (normalize &quot;lot&quot;))
</text>
<text>		  right-footer:  ($right-footer$ (normalize &quot;lot&quot;))
</text>
<text>		  input-whitespace-treatment: 'collapse
</text>
<text>		  (build-lot (current-node) (car gilist))
</text>
<text>		  (loop (cdr gilist)))
</text>
<text>		(loop (cdr gilist)))))
</text>
<text>
</text>
<text>      (if (generate-toc-in-front)
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo)))))
</text>
<text>
</text>
<text>(element (book title) (empty-sosofo))
</text>
<text>
</text>
<text>(element part
</text>
<text>  (let* ((partinfo  (select-elements (children (current-node)) 
</text>
<text>				     (normalize &quot;docinfo&quot;)))
</text>
<text>	 (partintro (select-elements (children (current-node)) 
</text>
<text>				     (normalize &quot;partintro&quot;)))
</text>
<text>
</text>
<text>	 (nl        (titlepage-info-elements 
</text>
<text>		     (current-node) 
</text>
<text>		     partinfo
</text>
<text>		     (if %generate-partintro-on-titlepage%
</text>
<text>			 partintro
</text>
<text>			 (empty-node-list)))))
</text>
<text>    (make sequence
</text>
<text>      (if %generate-part-titlepage%
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %titlepage-n-columns%
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    use: default-text-style
</text>
<text>	    (part-titlepage nl 'recto)
</text>
<text>	    (make display-group
</text>
<text>	      break-before: 'page
</text>
<text>	      (part-titlepage nl 'verso)))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if (not (generate-toc-in-front))
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo))
</text>
<text>      
</text>
<text>      (if (and %generate-part-toc%
</text>
<text>	       (not %generate-part-toc-on-titlepage%))
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %page-n-columns%
</text>
<text>	    page-number-format: ($page-number-format$ (normalize &quot;toc&quot;))
</text>
<text>	    use: default-text-style
</text>
<text>	    left-header:   ($left-header$ (normalize &quot;toc&quot;))
</text>
<text>	    center-header: ($center-header$ (normalize &quot;toc&quot;))
</text>
<text>	    right-header:  ($right-header$ (normalize &quot;toc&quot;))
</text>
<text>	    left-footer:   ($left-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    center-footer: ($center-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    right-footer:  ($right-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    (build-toc (current-node)
</text>
<text>		       (toc-depth (current-node))))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if (and (not (node-list-empty? partintro))
</text>
<text>	       (not %generate-partintro-on-titlepage%))
</text>
<text>	  ($process-partintro$ partintro #t)
</text>
<text>	  (empty-sosofo))
</text>
<text>      
</text>
<text>      (if (generate-toc-in-front)
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo)))))
</text>
<text>
</text>
<text>(element (part title) (empty-sosofo))
</text>
<text>
</text>
<text>(element partintro (empty-sosofo))
</text>
<text>
</text>
<text>(element (partintro title) 
</text>
<text>  (let* ((hlevel 1)
</text>
<text>	 (hs (HSIZE (- 4 hlevel))))
</text>
<text>    (make paragraph
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight:  (if (&lt; hlevel 5) 'bold 'medium)
</text>
<text>      font-posture: (if (&lt; hlevel 5) 'upright 'italic)
</text>
<text>      font-size: hs
</text>
<text>      line-spacing: (* hs %line-spacing-factor%)
</text>
<text>      space-before: (* hs %head-before-factor%)
</text>
<text>      space-after:  (* hs %head-after-factor%)
</text>
<text>      start-indent: 0pt
</text>
<text>      first-line-start-indent: 0pt
</text>
<text>      quadding: %section-title-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      heading-level: (if %generate-heading-level% (+ hlevel 1) 0)
</text>
<text>      (element-title-sosofo (parent (current-node))))))
</text>
<text>
</text>
<text>(define ($process-partintro$ partintro make-page-seq?)
</text>
<text>  (if make-page-seq?
</text>
<text>      (make simple-page-sequence
</text>
<text>	page-n-columns: %page-n-columns%
</text>
<text>	page-number-restart?: (or %page-number-restart% 
</text>
<text>				  (book-start?) 
</text>
<text>				  (first-chapter?))
</text>
<text>	page-number-format: ($page-number-format$)
</text>
<text>	use: default-text-style
</text>
<text>	left-header:   ($left-header$)
</text>
<text>	center-header: ($center-header$)
</text>
<text>	right-header:  ($right-header$)
</text>
<text>	left-footer:   ($left-footer$)
</text>
<text>	center-footer: ($center-footer$)
</text>
<text>	right-footer:  ($right-footer$)
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	input-whitespace-treatment: 'collapse
</text>
<text>	quadding: %default-quadding%
</text>
<text>	(make sequence
</text>
<text>	  (process-node-list (children partintro))
</text>
<text>	  (make-endnotes partintro)))
</text>
<text>      (make sequence
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	(process-node-list (children partintro))
</text>
<text>	(make-endnotes partintro))))
</text>
<text>
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbgloss.dsl,v 1.4 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; </text>
<text>See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ========================= GLOSSARY ELEMENTS ==========================
</text>
<text>
</text>
<text>(element glossary ($component$))
</text>
<text>(element (article glossary) ($section$)) ;; this is a special case
</text>
<text>(element (glossary title) (empty-sosofo))
</text>
<text>
</text>
<text>(element glossdiv ($section$))
</text>
<text>(element (glossdiv title) (empty-sosofo))
</text>
<text>
</text>
<text>(element glosslist ($block-container$))
</text>
<text>(element glossentry  (process-children))
</text>
<text>
</text>
<text>;; a glossentry glossterm
</text>
<text>(element (glossentry glossterm) ($lowtitle$ 3 2))
</text>
<text>(element (glossdiv glossentry glossterm) ($lowtitle$ 3 3))
</text>
<text>(element (glossentry acronym) (empty-sosofo))
</text>
<text>(element (glossentry abbrev) (empty-sosofo))
</text>
<text>(element glossdef ($indent-para-container$))
</text>
<text>
</text>
<text>(element glosssee ($italic-seq$))
</text>
<text>
</text>
<text>(element (glossentry glosssee)
</text>
<text>  (let ((otherterm (attribute-string (normalize &quot;otherterm&quot;))))
</text>
<text>    (make paragraph
</text>
<text>      space-before: %para-sep%
</text>
<text>      space-after: %para-sep%
</text>
<text>      start-indent: (+ (inherited-start-indent) (* (ILSTEP) 2))
</text>
<text>      quadding: %default-quadding%
</text>
<text>      ($italic-seq$ (literal (gentext-element-name (current-node))
</text>
<text>			     (gentext-label-title-sep (gi))))
</text>
<text>      (if otherterm
</text>
<text>	  (make link 
</text>
<text>	    destination: (node-list-address (element-with-id otherterm))
</text>
<text>	    (with-mode otherterm
</text>
<text>	      (process-element-with-id otherterm)))
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>;; When we hit the first GLOSSSEEALSO, process all of them as a node-list
</text>
<text>(element glossseealso
</text>
<text>  (if (first-sibling?)
</text>
<text>      (make paragraph
</text>
<text>	($italic-seq$ (literal (gentext-element-name (current-node))
</text>
<text>			       (gentext-label-title-sep (gi))))
</text>
<text>	(with-mode glossseealso
</text>
<text>	  (process-node-list
</text>
<text>	   (select-elements (children (parent)) '(glossseealso))))
</text>
<text>	(literal &quot;.&quot;))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>(mode glossseealso
</text>
<text>
</text>
<text>  (element glossseealso
</text>
<text>    (let ((otherterm (attribute-string (normalize &quot;otherterm&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(if (first-sibling?)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    ($italic-seq$ (literal &quot;, &quot;)))
</text>
<text>
</text>
<text>	(if otherterm ;; but this should be required...
</text>
<text>	    (make link 
</text>
<text>	      destination: (node-list-address (element-with-id otherterm))
</text>
<text>	      (with-mode otherterm
</text>
<text>		(process-element-with-id otherterm)))
</text>
<text>	    (process-children)))))
</text>
<text>
</text>
<text>)
</text>
<text>
</text>
<text>;; This is referenced within the GLOSSSEE and GLOSSSEEALSO element
</text>
<text>;; construction expressions.  The OTHERTERM attributes on GLOSSSEE and
</text>
<text>;; GLOSSSEEALSO (should) refer to GLOSSENTRY elements but we're only
</text>
<text>;; interested in the text within the GLOSSTERM.  Discard the revision
</text>
<text>;; history and the definition from the referenced term.
</text>
<text>(mode otherterm
</text>
<text>  (element glossentry
</text>
<text>    (process-children))
</text>
<text>  (element glossterm
</text>
<text>    (process-children))
</text>
<text>  (element glossdef
</text>
<text>    (empty-sosofo))
</text>
<text>  (element revhistory
</text>
<text>    (empty-sosofo))
</text>
<text>  (element glosssee
</text>
<text>    (empty-sosofo))
</text>
<text>  (element (glossentry acronym)
</text>
<text>    (empty-sosofo))
</text>
<text>  (element (glossentry abbrev)
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>;; an inline gloss term
</text>
<text>(element glossterm
</text>
<text>  (let* ((linkend   (attribute-string (normalize &quot;linkend&quot;))))
</text>
<text>    (if linkend
</text>
<text>	(make link 
</text>
<text>	  destination: (node-list-address (element-with-id linkend))
</text>
<text>	  ($italic-seq$))
</text>
<text>	($italic-seq$))))
</text>
<text>
</text>
<text>;; a first glossterm
</text>
<text>(element firstterm
</text>
<text>  (let* ((linkend (attribute-string (normalize &quot;linkend&quot;)))
</text>
<text>	 (sosofo  (if linkend
</text>
<text>		      (make link 
</text>
<text>			destination: (node-list-address
</text>
<text>				      (element-with-id linkend))
</text>
<text>			($italic-seq$))
</text>
<text>		      ($italic-seq$))))
</text>
<text>    (if firstterm-bold
</text>
<text>	(make sequence
</text>
<text>	  font-weight: 'bold
</text>
<text>	  sosofo)
</text>
<text>	sosofo)))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbgraph.dsl,v 1.2 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ==================== GRAPHICS ====================
</text>
<text>
</text>
<text>;; NOTE: display #f doesn't seem to work right in the RTF back end...
</text>
<text>
</text>
<text>(define (graphic-file filename)
</text>
<text>  (let ((ext (file-extension filename)))
</text>
<text>    (if (or (not filename)
</text>
<text>	    (not %graphic-default-extension%)
</text>
<text>	    (member ext %graphic-extensions%))
</text>
<text>	filename
</text>
<text>	(string-append filename &quot;.&quot; %graphic-default-extension%))))
</text>
<text>
</text>
<text>(define ($graphic$ fileref 
</text>
<text>		   #!optional (display #f) (format #f) (scale #f) (align #f))
</text>
<text>  (let ((graphic-format (if format format &quot;&quot;))
</text>
<text>	(graphic-scale  (if scale (/  (string-&gt;number scale) 100) 1))
</text>
<text>	(graphic-align  (cond ((equal? align (normalize &quot;center&quot;))
</text>
<text>			       'center)
</text>
<text>			      ((equal? align (normalize &quot;right&quot;))
</text>
<text>			       'end)
</text>
<text>			      (else
</text>
<text>			       'start))))
</text>
<text>    (make external-graphic
</text>
<text>      entity-system-id: (graphic-file fileref)
</text>
<text>      notation-system-id: graphic-format
</text>
<text>      scale: graphic-scale
</text>
<text>      display?: display
</text>
<text>      display-alignment: graphic-align)))
</text>
<text>
</text>
<text>(define ($img$ #!optional (nd (current-node)) (display #f))
</text>
<text>  ;; This function now supports an extension to DocBook.  It's
</text>
<text>  ;; either a clever trick or an ugly hack, depending on your
</text>
<text>  ;; point of view, but it'll hold us until XLink is finalized
</text>
<text>  ;; and we can extend DocBook the &quot;right&quot; way.
</text>
<text>  ;;
</text>
<text>  ;; If the entity passed to GRAPHIC has the FORMAT
</text>
<text>  ;; &quot;LINESPECIFIC&quot;, either because that's what's specified or
</text>
<text>  ;; because it's the notation of the supplied ENTITYREF, then
</text>
<text>  ;; the text of the entity is inserted literally (via Jade's
</text>
<text>  ;; read-entity external procedure).
</text>
<text>  ;;
</text>
<text>  (let* ((fileref   (attribute-string (normalize &quot;fileref&quot;) nd))
</text>
<text>	 (entityref (attribute-string (normalize &quot;entityref&quot;) nd))
</text>
<text>	 (format    (if (attribute-string (normalize &quot;format&quot;) nd)
</text>
<text>			(attribute-string (normalize &quot;format&quot;) nd)
</text>
<text>			(if entityref
</text>
<text>			    (entity-notation entityref)
</text>
<text>			    #f)))
</text>
<text>	 (align     (attribute-string (normalize &quot;align&quot;) nd))
</text>
<text>	 (scale     (attribute-string (normalize &quot;scale&quot;) nd)))
</text>
<text>    (if (or fileref entityref)
</text>
<text>	(if (equal? format (normalize &quot;linespecific&quot;))
</text>
<text>	    (if fileref
</text>
<text>		(include-file fileref)
</text>
<text>		(include-file (entity-generated-system-id entityref)))
</text>
<text>	    (if fileref
</text>
<text>		($graphic$ fileref display format scale align)
</text>
<text>		($graphic$ (entity-generated-system-id entityref)
</text>
<text>			   display format scale align)))
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(element graphic
</text>
<text>  (make paragraph
</text>
<text>    space-before: %block-sep%
</text>
<text>    space-after: %block-sep%
</text>
<text>    ($img$ (current-node) #t)))
</text>
<text>
</text>
<text>(element inlinegraphic ($img$))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbindex.dsl,v 1.4 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ................... INDEX TERMS (EMBEDDED MARKERS) ...................
</text>
<text>
</text>
<text>(element indexterm
</text>
<text>  ;; This is different than (empty-sosofo) alone because the backend
</text>
<text>  ;; will hang an anchor off the empty sequence.  This allows the index
</text>
<text>  ;; to point to the indexterm (but only if the indexterm has an ID).
</text>
<text>  (make sequence (empty-sosofo)))
</text>
<text>
</text>
<text>(element primary (empty-sosofo))
</text>
<text>(element secondary (empty-sosofo))
</text>
<text>(element tertiary (empty-sosofo))
</text>
<text>(element see (empty-sosofo))
</text>
<text>(element seealso (empty-sosofo))
</text>
<text>
</text>
<text>;; =========================== INDEX ELEMENTS ===========================
</text>
<text>
</text>
<text>(element setindex ($component$))
</text>
<text>(element (setindex title) (empty-sosofo))
</text>
<text>
</text>
<text>(element index
</text>
<text>  (make simple-page-sequence
</text>
<text>    page-number-restart?: (or %page-number-restart% 
</text>
<text>			      (book-start?) 
</text>
<text>			      (first-chapter?))
</text>
<text>    page-number-format: ($page-number-format$)
</text>
<text>    use: default-text-style
</text>
<text>    left-header:   ($left-header$)
</text>
<text>    center-header: ($center-header$)
</text>
<text>    right</text>
<text>-header:  ($right-header$)
</text>
<text>    left-footer:   ($left-footer$)
</text>
<text>    center-footer: ($center-footer$)
</text>
<text>    right-footer:  ($right-footer$)
</text>
<text>    start-indent: %body-start-indent%
</text>
<text>    input-whitespace-treatment: 'collapse
</text>
<text>    quadding: %default-quadding%
</text>
<text>    page-n-columns: 2
</text>
<text>    (make sequence
</text>
<text>      ($component-title$)
</text>
<text>      (process-children))
</text>
<text>    (make-endnotes)))
</text>
<text>
</text>
<text>;; this is a special case. this prevents the index from causing an error but
</text>
<text>;; will make the index a single column. c'est la vie.
</text>
<text>(element (article index) ($section$))
</text>
<text>
</text>
<text>(element (index title) (empty-sosofo))
</text>
<text>
</text>
<text>(element indexdiv ($section$))
</text>
<text>(element (indexdiv title) (empty-sosofo))
</text>
<text>
</text>
<text>(element indexentry (process-children))
</text>
<text>
</text>
<text>(element primaryie
</text>
<text>  (make paragraph
</text>
<text>    font-size: (* (inherited-font-size) %smaller-size-factor%)
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element secondaryie
</text>
<text>  (make paragraph
</text>
<text>    font-size: (* (inherited-font-size) %smaller-size-factor%)
</text>
<text>    start-indent: (+ (inherited-start-indent) 1em)
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element tertiaryie
</text>
<text>  (make paragraph
</text>
<text>    font-size: (* (inherited-font-size) %smaller-size-factor%)
</text>
<text>    start-indent: (+ (inherited-start-indent) 2em)
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(define (find-indexterm id)
</text>
<text>  ;; If you have a lot of indexterms that don't have IDs, this could 
</text>
<text>  ;; be incredibly slow.  So don't do that.
</text>
<text>  (let* ((idtarget (element-with-id id)))
</text>
<text>    (if (node-list-empty? idtarget)
</text>
<text>	(let loop ((idnodes (select-elements (descendants (sgml-root-element))
</text>
<text>					     (normalize &quot;indexterm&quot;))))
</text>
<text>	  (if (node-list-empty? idnodes)
</text>
<text>	      (empty-node-list)
</text>
<text>	      (if (equal? id (string-append &quot;AEN&quot; 
</text>
<text>					    (number-&gt;string 
</text>
<text>					     (all-element-number 
</text>
<text>					      (node-list-first idnodes)))))
</text>
<text>		  (node-list-first idnodes)
</text>
<text>		  (loop (node-list-rest idnodes)))))
</text>
<text>	idtarget)))
</text>
<text>
</text>
<text>(define (indexentry-link nd)
</text>
<text>  (let* ((id        (attribute-string (normalize &quot;role&quot;) nd))
</text>
<text>	 (target    (find-indexterm id))
</text>
<text>	 (preferred (not (node-list-empty?
</text>
<text>			  (select-elements (children (current-node))
</text>
<text>					   (normalize &quot;emphasis&quot;)))))
</text>
<text>	 (sosofo    (if (node-list-empty? target) 
</text>
<text>			(literal &quot;?&quot;)
</text>
<text>			(make link
</text>
<text>			  destination: (node-list-address target)
</text>
<text>			  (with-mode toc-page-number-mode
</text>
<text>			    (process-node-list target))))))
</text>
<text>    (if preferred
</text>
<text>	(make sequence
</text>
<text>	  font-weight: 'bold
</text>
<text>	  sosofo)
</text>
<text>	sosofo)))
</text>
<text>
</text>
<text>(element (primaryie ulink)
</text>
<text>  (indexentry-link (current-node)))
</text>
<text>
</text>
<text>(element (secondaryie ulink)
</text>
<text>  (indexentry-link (current-node)))
</text>
<text>
</text>
<text>(element (tertiaryie ulink)
</text>
<text>  (indexentry-link (current-node)))
</text>
<text>
</text>
<text>(element seeie
</text>
<text>  (let ((indent (cond ((node-list-empty? 
</text>
<text>			(select-elements
</text>
<text>			 (children (parent (current-node)))
</text>
<text>			 (normalize &quot;secondaryie&quot;)))
</text>
<text>		       1em)
</text>
<text>		      ((node-list-empty? 
</text>
<text>			(select-elements
</text>
<text>			 (children (parent (current-node)))
</text>
<text>			 (normalize &quot;tertiaryie&quot;)))
</text>
<text>		       2em)
</text>
<text>		      (else 3em))))
</text>
<text>    (make paragraph
</text>
<text>      font-size: (* (inherited-font-size) %smaller-size-factor%)
</text>
<text>      start-indent: (+ (inherited-start-indent) indent)
</text>
<text>      (literal &quot;(&quot; (gentext-index-see) &quot; &quot;)
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;)&quot;))))
</text>
<text>
</text>
<text>(element seealsoie
</text>
<text>  (let ((indent (cond ((node-list-empty? 
</text>
<text>			(select-elements
</text>
<text>			 (children (parent (current-node)))
</text>
<text>			 (normalize &quot;secondaryie&quot;)))
</text>
<text>		       1em)
</text>
<text>		      ((node-list-empty? 
</text>
<text>			(select-elements
</text>
<text>			 (children (parent (current-node)))
</text>
<text>			 (normalize &quot;tertiaryie&quot;)))
</text>
<text>		       2em)
</text>
<text>		      (else 3em))))
</text>
<text>    (make paragraph
</text>
<text>      font-size: (* (inherited-font-size) %smaller-size-factor%)
</text>
<text>      start-indent: (+ (inherited-start-indent) indent)
</text>
<text>      (literal &quot;(&quot; (gentext-index-seealso) &quot; &quot;)
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;)&quot;))))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbinfo.dsl,v 1.3 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ................................ INFO ................................
</text>
<text>
</text>
<text>;; Rather than make the *INFO containers empty-sosofos, we make them
</text>
<text>;; process-children and then make all of the elements they may contain
</text>
<text>;; empty in this context.  The advantage here is that we can then
</text>
<text>;; more easily override some of them in stylesheets that use this one.
</text>
<text>
</text>
<text>(element setinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (setinfo abbrev) (empty-sosofo))
</text>
<text>(element (setinfo abstract) (empty-sosofo))
</text>
<text>(element (setinfo address) (empty-sosofo))
</text>
<text>(element (setinfo affiliation) (empty-sosofo))
</text>
<text>(element (setinfo artpagenums) (empty-sosofo))
</text>
<text>(element (setinfo author) (empty-sosofo))
</text>
<text>(element (setinfo authorblurb) (empty-sosofo))
</text>
<text>(element (setinfo authorgroup) (empty-sosofo))
</text>
<text>(element (setinfo authorinitials) (empty-sosofo))
</text>
<text>(element (setinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (setinfo biblioset) (empty-sosofo))
</text>
<text>(element (setinfo collab) (empty-sosofo))
</text>
<text>(element (setinfo confgroup) (empty-sosofo))
</text>
<text>(element (setinfo contractnum) (empty-sosofo))
</text>
<text>(element (setinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (setinfo contrib) (empty-sosofo))
</text>
<text>(element (setinfo copyright) (empty-sosofo))
</text>
<text>(element (setinfo corpauthor) (empty-sosofo))
</text>
<text>(element (setinfo corpname) (empty-sosofo))
</text>
<text>(element (setinfo date) (empty-sosofo))
</text>
<text>(element (setinfo edition) (empty-sosofo))
</text>
<text>(element (setinfo editor) (empty-sosofo))
</text>
<text>(element (setinfo firstname) (empty-sosofo))
</text>
<text>(element (setinfo graphic) (empty-sosofo))
</text>
<text>(element (setinfo honorific) (empty-sosofo))
</text>
<text>(element (setinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (setinfo isbn) (empty-sosofo))
</text>
<text>(element (setinfo issn) (empty-sosofo))
</text>
<text>(element (setinfo issuenum) (empty-sosofo))
</text>
<text>(element (setinfo itermset) (empty-sosofo))
</text>
<text>(element (setinfo keywordset) (empty-sosofo))
</text>
<text>(element (setinfo legalnotice) (empty-sosofo))
</text>
<text>(element (setinfo lineage) (empty-sosofo))
</text>
<text>(element (setinfo modespec) (empty-sosofo))
</text>
<text>(element (setinfo orgname) (empty-sosofo))
</text>
<text>(element (setinfo othercredit) (empty-sosofo))
</text>
<text>(element (setinfo othername) (empty-sosofo))
</text>
<text>(element (setinfo pagenums) (empty-sosofo))
</text>
<text>(element (setinfo printhistory) (empty-sosofo))
</text>
<text>(element (setinfo productname) (empty-sosofo))
</text>
<text>(element (setinfo productnumber) (empty-sosofo))
</text>
<text>(element (setinfo pubdate) (empty-sosofo))
</text>
<text>(element (setinfo publisher) (empty-sosofo))
</text>
<text>(element (setinfo publishername) (empty-sosofo))
</text>
<text>(element (setinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (setinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (setinfo revhistory) (empty-sosofo))
</text>
<text>(element (setinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (setinfo subjectset) (empty-sosofo))
</text>
<text>(element (setinfo subtitle) (empty-sosofo))
</text>
<text>(element (setinfo surname) (empty-sosofo))
</text>
<text>(element (setinfo title) (empty-sosofo))
</text>
<text>(element (setinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (setinfo volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>;; BookInfo is handled differently in dbdivis.dsl by using a
</text>
<text>;; special mode...
</text>
<text>
</text>
<text>(element bookinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (bookinfo abbrev) (process-children))
</text>
<text>(element (bookinfo abstract) (process-children))
</text>
<text>(element (bookinfo address) (process-children))
</text>
<text>(element (bookinfo affiliation) (process-children))
</text>
<text>(element (bookinfo artpagenums) (process-children))
</text>
<text>(element (bookinfo author) (process-children))
</text>
<text>(element (bookinfo authorblurb) (process-children))
</text>
<text>(element (bookinfo authorgroup) (process-children))
</text>
<text>(element (bookinfo authorinitials) (process-children))
</text>
<text>(element (bookinfo bibliomisc) (process-children))
</text>
<text>(element (bookinfo biblioset) (process-children))
</text>
<text>(element (bookinfo bookbiblio) </text>
<text>(process-children))
</text>
<text>(element (bookinfo collab) (process-children))
</text>
<text>(element (bookinfo confgroup) (process-children))
</text>
<text>(element (bookinfo contractnum) (process-children))
</text>
<text>(element (bookinfo contractsponsor) (process-children))
</text>
<text>(element (bookinfo contrib) (process-children))
</text>
<text>;; (element (bookinfo copyright) (process-children)) ;; the default is good
</text>
<text>(element (bookinfo corpauthor) (process-children))
</text>
<text>(element (bookinfo corpname) (process-children))
</text>
<text>(element (bookinfo date) (process-children))
</text>
<text>(element (bookinfo edition) (process-children))
</text>
<text>(element (bookinfo editor) (process-children))
</text>
<text>(element (bookinfo firstname) (process-children))
</text>
<text>(element (bookinfo graphic) (process-children))
</text>
<text>(element (bookinfo honorific) (process-children))
</text>
<text>(element (bookinfo invpartnumber) (process-children))
</text>
<text>(element (bookinfo isbn) (process-children))
</text>
<text>(element (bookinfo issn) (process-children))
</text>
<text>(element (bookinfo issuenum) (process-children))
</text>
<text>(element (bookinfo itermset) (process-children))
</text>
<text>(element (bookinfo keywordset) (process-children))
</text>
<text>(element (bookinfo legalnotice) ($semiformal-object$))
</text>
<text>(element (bookinfo lineage) (process-children))
</text>
<text>(element (bookinfo modespec) (process-children))
</text>
<text>(element (bookinfo orgname) (process-children))
</text>
<text>(element (bookinfo othercredit) (process-children))
</text>
<text>(element (bookinfo othername) (process-children))
</text>
<text>(element (bookinfo pagenums) (process-children))
</text>
<text>(element (bookinfo printhistory) (process-children))
</text>
<text>(element (bookinfo productname) (process-children))
</text>
<text>(element (bookinfo productnumber) (process-children))
</text>
<text>(element (bookinfo pubdate) (process-children))
</text>
<text>(element (bookinfo publisher) (process-children))
</text>
<text>(element (bookinfo publishername) (process-children))
</text>
<text>(element (bookinfo pubsnumber) (process-children))
</text>
<text>(element (bookinfo releaseinfo) (process-children))
</text>
<text>(element (bookinfo revhistory) ($book-revhistory$))
</text>
<text>(element (bookinfo seriesvolnums) (process-children))
</text>
<text>(element (bookinfo subjectset) (process-children))
</text>
<text>(element (bookinfo subtitle) (process-children))
</text>
<text>(element (bookinfo surname) (process-children))
</text>
<text>(element (bookinfo title) (process-children))
</text>
<text>(element (bookinfo titleabbrev) (process-children))
</text>
<text>(element (bookinfo volumenum) (process-children))
</text>
<text>
</text>
<text>(element docinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (docinfo abbrev) (empty-sosofo))
</text>
<text>(element (docinfo abstract) (empty-sosofo))
</text>
<text>(element (docinfo address) (empty-sosofo))
</text>
<text>(element (docinfo affiliation) (empty-sosofo))
</text>
<text>(element (docinfo artpagenums) (empty-sosofo))
</text>
<text>(element (docinfo author) (empty-sosofo))
</text>
<text>(element (docinfo authorblurb) (empty-sosofo))
</text>
<text>(element (docinfo authorgroup) (empty-sosofo))
</text>
<text>(element (docinfo authorinitials) (empty-sosofo))
</text>
<text>(element (docinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (docinfo biblioset) (empty-sosofo))
</text>
<text>(element (docinfo collab) (empty-sosofo))
</text>
<text>(element (docinfo confgroup) (empty-sosofo))
</text>
<text>(element (docinfo contractnum) (empty-sosofo))
</text>
<text>(element (docinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (docinfo contrib) (empty-sosofo))
</text>
<text>(element (docinfo copyright) (empty-sosofo))
</text>
<text>(element (docinfo corpauthor) (empty-sosofo))
</text>
<text>(element (docinfo corpname) (empty-sosofo))
</text>
<text>(element (docinfo date) (empty-sosofo))
</text>
<text>(element (docinfo edition) (empty-sosofo))
</text>
<text>(element (docinfo editor) (empty-sosofo))
</text>
<text>(element (docinfo firstname) (empty-sosofo))
</text>
<text>(element (docinfo graphic) (empty-sosofo))
</text>
<text>(element (docinfo honorific) (empty-sosofo))
</text>
<text>(element (docinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (docinfo isbn) (empty-sosofo))
</text>
<text>(element (docinfo issn) (empty-sosofo))
</text>
<text>(element (docinfo issuenum) (empty-sosofo))
</text>
<text>(element (docinfo itermset) (empty-sosofo))
</text>
<text>(element (docinfo keywordset) (empty-sosofo))
</text>
<text>(element (docinfo legalnotice) (empty-sosofo))
</text>
<text>(element (docinfo lineage) (empty-sosofo))
</text>
<text>(element (docinfo modespec) (empty-sosofo))
</text>
<text>(element (docinfo orgname) (empty-sosofo))
</text>
<text>(element (docinfo othercredit) (empty-sosofo))
</text>
<text>(element (docinfo othername) (empty-sosofo))
</text>
<text>(element (docinfo pagenums) (empty-sosofo))
</text>
<text>(element (docinfo printhistory) (empty-sosofo))
</text>
<text>(element (docinfo productname) (empty-sosofo))
</text>
<text>(element (docinfo productnumber) (empty-sosofo))
</text>
<text>(element (docinfo pubdate) (empty-sosofo))
</text>
<text>(element (docinfo publisher) (empty-sosofo))
</text>
<text>(element (docinfo publishername) (empty-sosofo))
</text>
<text>(element (docinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (docinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (docinfo revhistory) (empty-sosofo))
</text>
<text>(element (docinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (docinfo subjectset) (empty-sosofo))
</text>
<text>(element (docinfo subtitle) (empty-sosofo))
</text>
<text>(element (docinfo surname) (empty-sosofo))
</text>
<text>(element (docinfo title) (empty-sosofo))
</text>
<text>(element (docinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (docinfo volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect1info (process-children))
</text>
<text>
</text>
<text>(element (sect1info abbrev) (empty-sosofo))
</text>
<text>(element (sect1info abstract) (empty-sosofo))
</text>
<text>(element (sect1info address) (empty-sosofo))
</text>
<text>(element (sect1info affiliation) (empty-sosofo))
</text>
<text>(element (sect1info artpagenums) (empty-sosofo))
</text>
<text>(element (sect1info author) (empty-sosofo))
</text>
<text>(element (sect1info authorblurb) (empty-sosofo))
</text>
<text>(element (sect1info authorgroup) (empty-sosofo))
</text>
<text>(element (sect1info authorinitials) (empty-sosofo))
</text>
<text>(element (sect1info bibliomisc) (empty-sosofo))
</text>
<text>(element (sect1info biblioset) (empty-sosofo))
</text>
<text>(element (sect1info collab) (empty-sosofo))
</text>
<text>(element (sect1info confgroup) (empty-sosofo))
</text>
<text>(element (sect1info contractnum) (empty-sosofo))
</text>
<text>(element (sect1info contractsponsor) (empty-sosofo))
</text>
<text>(element (sect1info contrib) (empty-sosofo))
</text>
<text>(element (sect1info copyright) (empty-sosofo))
</text>
<text>(element (sect1info corpauthor) (empty-sosofo))
</text>
<text>(element (sect1info corpname) (empty-sosofo))
</text>
<text>(element (sect1info date) (empty-sosofo))
</text>
<text>(element (sect1info edition) (empty-sosofo))
</text>
<text>(element (sect1info editor) (empty-sosofo))
</text>
<text>(element (sect1info firstname) (empty-sosofo))
</text>
<text>(element (sect1info graphic) (empty-sosofo))
</text>
<text>(element (sect1info honorific) (empty-sosofo))
</text>
<text>(element (sect1info invpartnumber) (empty-sosofo))
</text>
<text>(element (sect1info isbn) (empty-sosofo))
</text>
<text>(element (sect1info issn) (empty-sosofo))
</text>
<text>(element (sect1info issuenum) (empty-sosofo))
</text>
<text>(element (sect1info itermset) (empty-sosofo))
</text>
<text>(element (sect1info keywordset) (empty-sosofo))
</text>
<text>(element (sect1info legalnotice) (empty-sosofo))
</text>
<text>(element (sect1info lineage) (empty-sosofo))
</text>
<text>(element (sect1info modespec) (empty-sosofo))
</text>
<text>(element (sect1info orgname) (empty-sosofo))
</text>
<text>(element (sect1info othercredit) (empty-sosofo))
</text>
<text>(element (sect1info othername) (empty-sosofo))
</text>
<text>(element (sect1info pagenums) (empty-sosofo))
</text>
<text>(element (sect1info printhistory) (empty-sosofo))
</text>
<text>(element (sect1info productname) (empty-sosofo))
</text>
<text>(element (sect1info productnumber) (empty-sosofo))
</text>
<text>(element (sect1info pubdate) (empty-sosofo))
</text>
<text>(element (sect1info publisher) (empty-sosofo))
</text>
<text>(element (sect1info publishername) (empty-sosofo))
</text>
<text>(element (sect1info pubsnumber) (empty-sosofo))
</text>
<text>(element (sect1info releaseinfo) (empty-sosofo))
</text>
<text>(element (sect1info revhistory) (empty-sosofo))
</text>
<text>(element (sect1info seriesvolnums) (empty-sosofo))
</text>
<text>(element (sect1info subjectset) (empty-sosofo))
</text>
<text>(element (sect1info subtitle) (empty-sosofo))
</text>
<text>(element (sect1info surname) (empty-sosofo))
</text>
<text>(element (sect1info title) (empty-sosofo))
</text>
<text>(element (sect1info titleabbrev) (empty-sosofo))
</text>
<text>(element (sect1info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect2info (process-children))
</text>
<text>
</text>
<text>(element (sect2info abbrev) (empty-sosofo))
</text>
<text>(element (sect2info abstract) (empty-sosofo))
</text>
<text>(element (sect2info address) (empty-sosofo))
</text>
<text>(element (sect2info affiliation) (empty-sosofo))
</text>
<text>(element (sect2info artpagenums) (empty-sosofo))
</text>
<text>(element (sect2info author) (empty-sosofo))
</text>
<text>(element (sect2info authorblurb) (empty-sosofo))
</text>
<text>(element (sect2info authorgroup) (empty-sosofo))
</text>
<text>(element (sect2info authorinitials) (empty-sosofo))
</text>
<text>(element (sect2info bibliomisc) (empty-sosofo))
</text>
<text>(element (sect2info biblioset) (empty-sosofo))
</text>
<text>(element (sect2info collab) (empty-sosofo))
</text>
<text>(element (sect2info confgroup) (empty-sosofo))
</text>
<text>(element (sect2info contractnum) (empty-sosofo))
</text>
<text>(element (sect2info contractsponsor) (empty-sosofo))
</text>
<text>(element (sect2info contrib) (empty-sosofo))
</text>
<text>(element (sect2info copyright) (empty-sosofo))
</text>
<text>(element (sect2info corpauthor) (empty-sosofo))
</text>
<text>(element (sect2info corpname) (empty-sosofo))
</text>
<text>(element (sect2info date) (empty-sosofo))
</text>
<text>(element (sect2info edition) (empty-sosofo))
</text>
<text>(element (sect2info editor) (empty-sosofo))
</text>
<text>(element (sect2info firstname) (empty-sosofo))
</text>
<text>(element (sect2info graphic) (empty-sosofo))
</text>
<text>(element (sect2info honorific) (empty-sosofo))
</text>
<text>(element (sect2info invpartnumber) (empty-sosofo))
</text>
<text>(element (sect2info isbn) (empty-sosofo))
</text>
<text>(element (sect2info issn) (empty-sosofo))
</text>
<text>(element (sect2info issuenum) (empty-sosofo))
</text>
<text>(element (sect2info itermset) (empty-sosofo))
</text>
<text>(element (sect2info keywordset) (empty-sosofo))
</text>
<text>(element (sect2info legalnotice) (empty-sosofo))
</text>
<text>(element (sect2info lineage) (empty-sosofo))
</text>
<text>(element (sect2info modespec) (empty-sosofo))
</text>
<text>(element (sect2info orgname) (empty-sosofo))
</text>
<text>(element (sect2info othercredit) (empty-sosofo))
</text>
<text>(element (sect2info othername) (empty-sosofo))
</text>
<text>(element (sect2info pagenums) (empty-sosofo))
</text>
<text>(element (sect2info printhistory) (empty-sosofo))
</text>
<text>(element (sect2info productname) (empty-sosofo))
</text>
<text>(element (sect2info productnumber) (empty-sosofo))
</text>
<text>(element (sect2info pubdate) (empty-sosofo))
</text>
<text>(element (sect2info publisher) (empty-sosofo))
</text>
<text>(element (sect2info publishername) (empty-sosofo))
</text>
<text>(element (sect2info pubsnumber) (empty-sosofo))
</text>
<text>(element (sect2info releaseinfo) (empty-sosofo))
</text>
<text>(element (sect2info revhistory) (empty-sosofo))
</text>
<text>(element (sect2info seriesvolnums) (empty-sosofo))
</text>
<text>(element (sect2info subjectset) (empty-sosofo))
</text>
<text>(element (sect2info subtitle) (empty-sosofo))
</text>
<text>(element (sect2info surname) (empty-sosofo))
</text>
<text>(element (sect2info title) (empty-sosofo))
</text>
<text>(element (sect2info titleabbrev) (empty-sosofo))
</text>
<text>(element (sect2info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect3info (process-children))
</text>
<text>
</text>
<text>(element (sect3info abbrev) (empty-sosofo))
</text>
<text>(element (sect3info abstract) (empty-sosofo))
</text>
<text>(element (sect3info address) (empty-sosofo))
</text>
<text>(element (sect3info affiliation) (empty-sosofo))
</text>
<text>(element (sect3info artpagenums) (empty-sosofo))
</text>
<text>(element (sect3info author) (empty-sosofo))
</text>
<text>(element (sect3info authorblurb) (empty-sosofo))
</text>
<text>(element (sect3info authorgroup) (empty-sosofo))
</text>
<text>(element (sect3info authorinitials) (empty-sosofo))
</text>
<text>(element (sect3info bibliomisc) (empty-sosofo))
</text>
<text>(element (sect3info biblioset) (empty-sosofo))
</text>
<text>(element (sect3info collab) (empty-sosofo))
</text>
<text>(element (sect3info confgroup) (empty-sosofo))
</text>
<text>(element (sect3info contractnum) (empty-sosofo))
</text>
<text>(element (sect3info contractsponsor) (empty-sosofo))
</text>
<text>(element (sect3info contrib) (empty-sosofo))
</text>
<text>(element (sect3info copyright) (empty-sosofo))
</text>
<text>(element (sect3info corpauthor) (empty-sosofo))
</text>
<text>(element (sect3info corpname) (empty-sosofo))
</text>
<text>(element (sect3info date) (empty-sosofo))
</text>
<text>(element (sect3info edition) (empty-sosofo))
</text>
<text>(element (sect3info editor) (empty-sosofo))
</text>
<text>(element (sect3info firstname) (empty-sosofo))
</text>
<text>(element (sect3info graphic) (empty-sosofo))
</text>
<text>(element (sect3info honorific) (empty-sosofo))
</text>
<text>(element (sect3info invpartnumber) (empty-sosofo))
</text>
<text>(element (sect3info isbn) (empty-sosofo))
</text>
<text>(element (sect3info issn) (empty-sosofo))
</text>
<text>(element (sect3info issuenum) (empty-sosofo))
</text>
<text>(element (sect3info itermset) (empty-sosofo))
</text>
<text>(element (sect3info keywordset) (empty-sosofo))
</text>
<text>(element (sect3info legalnotice) (empty-sosofo))
</text>
<text>(element (sect3info lineage) (empty-sosofo))
</text>
<text>(element (sect3info modespec) (empty-sosofo))
</text>
<text>(element (sect3info orgname) (empty-sosofo))
</text>
<text>(element (sect3info othercredit) (empty-sosofo))
</text>
<text>(element (sect3info othername) (empty-sosofo))
</text>
<text>(element (sect3info pagenums) (empty-sosofo))
</text>
<text>(element (sect3info printhistory) (empty-sosofo))
</text>
<text>(element (sect3info productname) (empty-sosofo))
</text>
<text>(element (sect3info productnumber) (empty-sosofo))
</text>
<text>(element (sect3info pubdate) (empty-sosofo))
</text>
<text>(element (sect3info publisher) (empty-sosofo))
</text>
<text>(element (sect3info publishername) (empty-sosofo))
</text>
<text>(element (sect3info pubsnumber) (empty-sosofo))
</text>
<text>(element (sect3info releaseinfo) (empty-sosofo))
</text>
<text>(element (sect3info revhistory) (empty-sosofo))
</text>
<text>(element (sect3info seriesvolnums) (empty-sosofo))
</text>
<text>(element (sect3info subjectset) (empty-sosofo))
</text>
<text>(element (sect3info subtitle) (empty-sosofo))
</text>
<text>(element (sect3info surname) (empty-sosofo))
</text>
<text>(element (sect3info title) (empty-sosofo))
</text>
<text>(element (sect3info titleabbrev) (empty-sosofo))
</text>
<text>(element (sect3info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect4info (process-children))
</text>
<text>
</text>
<text>(element (sect4info abbrev) (empty-sosofo))
</text>
<text>(element (sect4info abstract) (empty-sosofo))
</text>
<text>(element (sect4info address) (empty-sosofo))
</text>
<text>(element (sect4info affiliation) (empty-sosofo))
</text>
<text>(element (sect4info artpagenums) (empty-sosofo))
</text>
<text>(element (sect4info author) (empty-sosofo))
</text>
<text>(element (sect4info authorblurb) (empty-sosofo))
</text>
<text>(element (sect4info authorgroup) (empty-sosofo))
</text>
<text>(element (sect4info authorinitials) (empty-sosofo))
</text>
<text>(element (sect4info bibliomisc) (empty-sosofo))
</text>
<text>(element (sect4info biblioset) (empty-sosofo))
</text>
<text>(element (sect4info collab) (empty-sosofo))
</text>
<text>(element (sect4info confgroup) (empty-sosofo))
</text>
<text>(element (sect4info contractnum) (empty-sosofo))
</text>
<text>(element (sect4info contractsponsor) (empty-sosofo))
</text>
<text>(element (sect4info contrib) (empty-sosofo))
</text>
<text>(element (sect4info copyright) (empty-sosofo))
</text>
<text>(element (sect4info corpauthor) (empty-sosofo))
</text>
<text>(element (sect4info corpname) (empty-sosofo))
</text>
<text>(element (sect4info date) (empty-sosofo))
</text>
<text>(element (sect4info edition) (empty-sosofo))
</text>
<text>(element (sect4info editor) (empty-sosofo))
</text>
<text>(element (sect4info firstname) (empty-sosofo))
</text>
<text>(element (sect4info graphic) (empty-sosofo))
</text>
<text>(element (sect4info honorific) (empty-sosofo))
</text>
<text>(element (sect4info invpartnumber) (empty-sosofo))
</text>
<text>(element (sect4info isbn) (empty-sosofo))
</text>
<text>(element (sect4info issn) (empty-sosofo))
</text>
<text>(element (sect4info issuenum) (empty-sosofo))
</text>
<text>(element (sect4info itermset) (empty-sosofo))
</text>
<text>(element (sect4info keywordset) (empty-sosofo))
</text>
<text>(element (sect4info legalnotice) (empty-sosofo))
</text>
<text>(element (sect4info lineage) (empty-sosofo))
</text>
<text>(element (sect4info modespec) (empty-sosofo))
</text>
<text>(element (sect4info orgname) (empty-sosofo))
</text>
<text>(element (sect4info othercredit) (empty-sosofo))
</text>
<text>(element (sect4info othername) (empty-sosofo))
</text>
<text>(element (sect4info pagenums) (empty-sosofo))
</text>
<text>(element (sect4info printhistory) (empty-sosofo))
</text>
<text>(element (sect4info productname) (empty-sosofo))
</text>
<text>(element (sect4info productnumber) (empty-sosofo))
</text>
<text>(element (sect4info pubdate) (empty-sosofo))
</text>
<text>(element (sect4info publisher) (empty-sosofo))
</text>
<text>(element (sect4info publishername) (empty-sosofo))
</text>
<text>(element (sect4info pubsnumber) (empty-sosofo))
</text>
<text>(element (sect4info releaseinfo) (empty-sosofo))
</text>
<text>(element (sect4info revhistory) (empty-sosofo))
</text>
<text>(element (sect4info seriesvolnums) (empty-sosofo))
</text>
<text>(element (sect4info subjectset) (empty-sosofo))
</text>
<text>(element (sect4info subtitle) (empty-sosofo))
</text>
<text>(element (sect4info surname) (empty-sosofo))
</text>
<text>(element (sect4info title) (empty-sosofo))
</text>
<text>(element (sect4info titleabbrev) (empty-sosofo))
</text>
<text>(element (sect4info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect5info (process-children))
</text>
<text>
</text>
<text>(element (sect5info abbrev) (empty-sosofo))
</text>
<text>(element (sect5info abstract) (empty-sosofo))
</text>
<text>(element (sect5info address) (empty-sosofo))
</text>
<text>(element (sect5info affiliation) (empty-sosofo))
</text>
<text>(element (sect5info artpagenums) (empty-sosofo))
</text>
<text>(element (sect5info author) (empty-sosofo))
</text>
<text>(element (sect5info authorblurb) (empty-sosofo))
</text>
<text>(element (sect5info authorgroup) (empty-sosofo))
</text>
<text>(element (sect5info authorinitials) (empty-sosofo))
</text>
<text>(element (sect5info bibliomisc) (empty-sosofo))
</text>
<text>(element (sect5info biblioset) (empty-sosofo))
</text>
<text>(element (sect5info collab) (empty-sosofo))
</text>
<text>(element (sect5info confgroup) (empty-sosofo))
</text>
<text>(element (sect5info contractnum) (empty-sosofo))
</text>
<text>(element (sect5info contractsponsor) (empty-sosofo))
</text>
<text>(element (sect5info contrib) (empty-sosofo))
</text>
<text>(element (sect5info copyright) (empty-sosofo))
</text>
<text>(element (sect5info corpauthor) (empty-sosofo))
</text>
<text>(element (sect5info corpname) (empty-sosofo))
</text>
<text>(element (sect5info date) (empty-sosofo))
</text>
<text>(element (sect5info edition) (empty-sosofo))
</text>
<text>(element (sect5info editor) (empty-sosofo))
</text>
<text>(element (sect5info firstname) (empty-sosofo))
</text>
<text>(element (sect5info graphic) (empty-sosofo))
</text>
<text>(element (sect5info honorific) (empty-sosofo))
</text>
<text>(element (sect5info invpartnumber) (empty-sosofo))
</text>
<text>(element (sect5info isbn) (empty-sosofo))
</text>
<text>(element (sect5info issn) (empty-sosofo))
</text>
<text>(element (sect5info issuenum) (empty-sosofo))
</text>
<text>(element (sect5info itermset) (empty-sosofo))
</text>
<text>(element (sect5info keywordset) (empty-sosofo))
</text>
<text>(element (sect5info legalnotice) (empty-sosofo))
</text>
<text>(element (sect5info lineage) (empty-sosofo))
</text>
<text>(element (sect5info modespec) (empty-sosofo))
</text>
<text>(element (sect5info orgname) (empty-sosofo))
</text>
<text>(element (sect5info othercredit) (empty-sosofo))
</text>
<text>(element (sect5info othername) (empty-sosofo))
</text>
<text>(element (sect5info pagenums) (empty-sosofo))
</text>
<text>(element (sect5info printhistory) (empty-sosofo))
</text>
<text>(element (sect5info productname) (empty-sosofo))
</text>
<text>(element (sect5info productnumber) (empty-sosofo))
</text>
<text>(element (sect5info pubdate) (empty-sosofo))
</text>
<text>(element (sect5info publisher) (empty-sosofo))
</text>
<text>(element (sect5info publishername) (empty-sosofo))
</text>
<text>(element (sect5info pubsnumber) (empty-sosofo))
</text>
<text>(element (sect5info releaseinfo) (empty-sosofo))
</text>
<text>(element (sect5info revhistory) (empty-sosofo))
</text>
<text>(element (sect5info seriesvolnums) (empty-sosofo))
</text>
<text>(element (sect5info subjectset) (empty-sosofo))
</text>
<text>(element (sect5info subtitle) (empty-sosofo))
</text>
<text>(element (sect5info surname) (empty-sosofo))
</text>
<text>(element (sect5info title) (empty-sosofo))
</text>
<text>(element (sect5info titleabbrev) (empty-sosofo))
</text>
<text>(element (sect5info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element refsect1info (process-children))
</text>
<text>
</text>
<text>(element (refsect1info abbrev) (empty-sosofo))
</text>
<text>(element (refsect1info abstract) (empty-sosofo))
</text>
<text>(element (refsect1info address) (empty-sosofo))
</text>
<text>(element (refsect1info affiliation) (empty-sosofo))
</text>
<text>(element (refsect1info artpagenums) (empty-sosofo))
</text>
<text>(element (refsect1info author) (empty-sosofo))
</text>
<text>(element (refsect1info authorblurb) (empty-sosofo))
</text>
<text>(element (refsect1info authorgroup) (empty-sosofo))
</text>
<text>(element (refsect1info authorinitials) (empty-sosofo))
</text>
<text>(element (refsect1info bibliomisc) (empty-sosofo))
</text>
<text>(element (refsect1info biblioset) (empty-sosofo))
</text>
<text>(element (refsect1info collab) (empty-sosofo))
</text>
<text>(element (refsect1info confgroup) (empty-sosofo))
</text>
<text>(element (refsect1info contractnum) (empty-sosofo))
</text>
<text>(element (refsect1info contractsponsor) (empty-sosofo))
</text>
<text>(element (refsect1info contrib) (empty-sosofo))
</text>
<text>(element (refsect1info copyright) (empty-sosofo))
</text>
<text>(element (refsect1info corpauthor) (empty-sosofo))
</text>
<text>(element (refsect1info corpname) (empty-sosofo))
</text>
<text>(element (refsect1info date) (empty-sosofo))
</text>
<text>(element (refsect1info edition) (empty-sosofo))
</text>
<text>(element (refsect1info editor) (empty-sosofo))
</text>
<text>(element (refsect1info firstname) (empty-sosofo))
</text>
<text>(element (refsect1info graphic) (empty-sosofo))
</text>
<text>(element (refsect1info honorific) (empty-sosofo))
</text>
<text>(element (refsect1info invpartnumber) (empty-sosofo))
</text>
<text>(element (refsect1info isbn) (empty-sosofo))
</text>
<text>(element (refsect1info issn) (empty-sosofo))
</text>
<text>(element (refsect1info issuenum) (empty-sosofo))
</text>
<text>(element (refsect1info itermset) (empty-sosofo))
</text>
<text>(element (refsect1info keywordset) (empty-sosofo))
</text>
<text>(element (refsect1info legalnotice) (empty-sosofo))
</text>
<text>(element (refsect1info lineage) (empty-sosofo))
</text>
<text>(element (refsect1info modespec) (empty-sosofo))
</text>
<text>(element (refsect1info orgname) (empty-sosofo))
</text>
<text>(element (refsect1info othercredit) (empty-sosofo))
</text>
<text>(element (refsect1info othername) (empty-sosofo))
</text>
<text>(element (refsect1info pagenums) (empty-sosofo))
</text>
<text>(element (refsect1info printhistory) (empty-sosofo))
</text>
<text>(element (refsect1info productname) (empty-sosofo))
</text>
<text>(element (refsect1info productnumber) (empty-sosofo))
</text>
<text>(element (refsect1info pubdate) (empty-sosofo))
</text>
<text>(element (refsect1info publisher) (empty-sosofo))
</text>
<text>(element (refsect1info publishername) (empty-sosofo))
</text>
<text>(element (refsect1info pubsnumber) (empty-sosofo))
</text>
<text>(element (refsect1info releaseinfo) (empty-sosofo))
</text>
<text>(element (refsect1info revhistory) (empty-sosofo))
</text>
<text>(element (refsect1info seriesvolnums) (empty-sosofo))
</text>
<text>(element (refsect1info subjectset) (empty-sosofo))
</text>
<text>(element (refsect1info subtitle) (empty-sosofo))
</text>
<text>(element (refsect1info surname) (empty-sosofo))
</text>
<text>(element (refsect1info title) (empty-sosofo))
</text>
<text>(element (refsect1info titleabbrev) (empty-sosofo))
</text>
<text>(element (refsect1info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element refsect2info (process-children))
</text>
<text>
</text>
<text>(element (refsect2info abbrev) (empty-sosofo))
</text>
<text>(element (refsect2info abstract) (empty-sosofo))
</text>
<text>(element (refsect2info address) (empty-sosofo))
</text>
<text>(element (refsect2info affiliation) (empty-sosofo))
</text>
<text>(element (refsect2info artpagenums) (empty-sosofo))
</text>
<text>(element (refsect2info author) (empty-sosofo))
</text>
<text>(element (refsect2info authorblurb) (empty-sosofo))
</text>
<text>(element (refsect2info authorgroup) (empty-sosofo))
</text>
<text>(element (refsect2info authorinitials) (empty-sosofo))
</text>
<text>(element (refsect2info bibliomisc) (empty-sosofo))
</text>
<text>(element (refsect2info biblioset) (empty-sosofo))
</text>
<text>(element (refsect2info collab) (empty-sosofo))
</text>
<text>(element (refsect2info confgroup) (empty-sosofo))
</text>
<text>(element (refsect2info contractnum) (empty-sosofo))
</text>
<text>(element (refsect2info contractsponsor) (empty-sosofo))
</text>
<text>(element (refsect2info contrib) (empty-sosofo))
</text>
<text>(element (refsect2info copyright) (empty-sosofo))
</text>
<text>(element (refsect2info corpauthor) (empty-sosofo))
</text>
<text>(element (refsect2info corpname) (empty-sosofo))
</text>
<text>(element (refsect2info date) (empty-sosofo))
</text>
<text>(element (refsect2info edition) (empty-sosofo))
</text>
<text>(element (refsect2info editor) (empty-sosofo))
</text>
<text>(element (refsect2info firstname) (empty-sosofo))
</text>
<text>(element (refsect2info graphic) (empty-sosofo))
</text>
<text>(element (refsect2info honorific) (empty-sosofo))
</text>
<text>(element (refsect2info invpartnumber) (empty-sosofo))
</text>
<text>(element (refsect2info isbn) (empty-sosofo))
</text>
<text>(element (refsect2info issn) (empty-sosofo))
</text>
<text>(element (refsect2info issuenum) (empty-sosofo))
</text>
<text>(element (refsect2info itermset) (empty-sosofo))
</text>
<text>(element (refsect2info keywordset) (empty-sosofo))
</text>
<text>(element (refsect2info legalnotice) (empty-sosofo))
</text>
<text>(element (refsect2info lineage) (empty-sosofo))
</text>
<text>(element (refsect2info modespec) (empty-sosofo))
</text>
<text>(element (refsect2info orgname) (empty-sosofo))
</text>
<text>(element (refsect2info othercredit) (empty-sosofo))
</text>
<text>(element (refsect2info othername) (empty-sosofo))
</text>
<text>(element (refsect2info pagenums) (empty-sosofo))
</text>
<text>(element (refsect2info printhistory) (empty-sosofo))
</text>
<text>(element (refsect2info productname) (empty-sosofo))
</text>
<text>(element (refsect2info productnumber) (empty-sosofo))
</text>
<text>(element (refsect2info pubdate) (empty-sosofo))
</text>
<text>(element (refsect2info publisher) (empty-sosofo))
</text>
<text>(element (refsect2info publishername) (empty-sosofo))
</text>
<text>(element (refsect2info pubsnumber) (empty-sosofo))
</text>
<text>(element (refsect2info releaseinfo) (empty-sosofo))
</text>
<text>(element (refsect2info revhistory) (empty-sosofo))
</text>
<text>(element (refsect2info seriesvolnums) (empty-sosofo))
</text>
<text>(element (refsect2info subjectset) (empty-sosofo))
</text>
<text>(element (refsect2info subtitle) (empty-sosofo))
</text>
<text>(element (refsect2info surname) (empty-sosofo))
</text>
<text>(element (refsect2info title) (empty-sosofo))
</text>
<text>(element (refsect2info titleabbrev) (empty-sosofo))
</text>
<text>(element (refsect2info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element refsect3info (process-children))
</text>
<text>
</text>
<text>(element (refsect3info abbrev) (empty-sosofo))
</text>
<text>(element (refsect3info abstract) (empty-sosofo))
</text>
<text>(element (refsect3info address) (empty-sosofo))
</text>
<text>(element (refsect3info affiliation) (empty-sosofo))
</text>
<text>(element (refsect3info artpagenums) (empty-sosofo))
</text>
<text>(element (refsect3info author) (empty-sosofo))
</text>
<text>(element (refsect3info authorblurb) (empty-sosofo))
</text>
<text>(element (refsect3info authorgroup) (empty-sosofo))
</text>
<text>(element (refsect3info authorinitials) (empty-sosofo))
</text>
<text>(element (refsect3info bibliomisc) (empty-sosofo))
</text>
<text>(element (refsect3info biblioset) (empty-sosofo))
</text>
<text>(element (refsect3info collab) (empty-sosofo))
</text>
<text>(element (refsect3info confgroup) (empty-sosofo))
</text>
<text>(element (refsect3info contractnum) (empty-sosofo))
</text>
<text>(element (refsect3info contractsponsor) (empty-sosofo))
</text>
<text>(element (refsect3info contrib) (empty-sosofo))
</text>
<text>(element (refsect3info copyright) (empty-sosofo))
</text>
<text>(element (refsect3info corpauthor) (empty-sosofo))
</text>
<text>(element (refsect3info corpname) (empty-sosofo))
</text>
<text>(element (refsect3info date) (empty-sosofo))
</text>
<text>(element (refsect3info edition) (empty-sosofo))
</text>
<text>(element (refsect3info editor) (empty-sosofo))
</text>
<text>(element (refsect3info firstname) (empty-sosofo))
</text>
<text>(element (refsect3info graphic) (empty-sosofo))
</text>
<text>(element (refsect3info honorific) (empty-sosofo))
</text>
<text>(element (refsect3info invpartnumber) (empty-sosofo))
</text>
<text>(element (refsect3info isbn) (empty-sosofo))
</text>
<text>(element (refsect3info issn) (empty-sosofo))
</text>
<text>(element (refsect3info issuenum) (empty-sosofo))
</text>
<text>(element (refsect3info itermset) (empty-sosofo))
</text>
<text>(element (refsect3info keywordset) (empty-sosofo))
</text>
<text>(element (refsect3info legalnotice) (empty-sosofo))
</text>
<text>(element (refsect3info lineage) (empty-sosofo))
</text>
<text>(element (refsect3info modespec) (empty-sosofo))
</text>
<text>(element (refsect3info orgname) (empty-sosofo))
</text>
<text>(element (refsect3info othercredit) (empty-sosofo))
</text>
<text>(element (refsect3info othername) (empty-sosofo))
</text>
<text>(element (refsect3info pagenums) (empty-sosofo))
</text>
<text>(element (refsect3info printhistory) (empty-sosofo))
</text>
<text>(element (refsect3info productname) (empty-sosofo))
</text>
<text>(element (refsect3info productnumber) (empty-sosofo))
</text>
<text>(element (refsect3info pubdate) (empty-sosofo))
</text>
<text>(element (refsect3info publisher) (empty-sosofo))
</text>
<text>(element (refsect3info publishername) (empty-sosofo))
</text>
<text>(element (refsect3info pubsnumber) (empty-sosofo))
</text>
<text>(element (refsect3info releaseinfo) (empty-sosofo))
</text>
<text>(element (refsect3info revhistory) (empty-sosofo))
</text>
<text>(element (refsect3info seriesvolnums) (empty-sosofo))
</text>
<text>(element (refsect3info subjectset) (empty-sosofo))
</text>
<text>(element (refsect3info subtitle) (empty-sosofo))
</text>
<text>(element (refsect3info surname) (empty-sosofo))
</text>
<text>(element (refsect3info title) (empty-sosofo))
</text>
<text>(element (refsect3info titleabbrev) (empty-sosofo))
</text>
<text>(element (refsect3info volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element seriesinfo (process-children))
</text>
<text>
</text>
<text>(element (seriesinfo abbrev) (empty-sosofo))
</text>
<text>(element (seriesinfo abstract) (empty-sosofo))
</text>
<text>(element (seriesinfo address) (empty-sosofo))
</text>
<text>(element (seriesinfo affiliation) (empty-sosofo))
</text>
<text>(element (seriesinfo artpagenums) (empty-sosofo))
</text>
<text>(element (seriesinfo author) (empty-sosofo))
</text>
<text>(element (seriesinfo authorblurb) (empty-sosofo))
</text>
<text>(element (seriesinfo authorgroup) (empty-sosofo))
</text>
<text>(element (seriesinfo authorinitials) (empty-sosofo))
</text>
<text>(element (seriesinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (seriesinfo biblioset) (empty-sosofo))
</text>
<text>(element (seriesinfo collab) (empty-sosofo))
</text>
<text>(element (seriesinfo confgroup) (empty-sosofo))
</text>
<text>(element (seriesinfo contractnum) (empty-sosofo))
</text>
<text>(element (seriesinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (seriesinfo contrib) (empty-sosofo))
</text>
<text>(element (seriesinfo copyright) (empty-sosofo))
</text>
<text>(element (seriesinfo corpauthor) (empty-sosofo))
</text>
<text>(element (seriesinfo corpname) (empty-sosofo))
</text>
<text>(element (seriesinfo date) (empty-sosofo))
</text>
<text>(element (seriesinfo edition) (empty-sosofo))
</text>
<text>(element (seriesinfo editor) (empty-sosofo))
</text>
<text>(element (seriesinfo firstname) (empty-sosofo))
</text>
<text>(element (seriesinfo honorific) (empty-sosofo))
</text>
<text>(element (seriesinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (seriesinfo isbn) (empty-sosofo))
</text>
<text>(element (seriesinfo issn) (empty-sosofo))
</text>
<text>(element (seriesinfo issuenum) (empty-sosofo))
</text>
<text>(element (seriesinfo lineage) (empty-sosofo))
</text>
<text>(element (seriesinfo orgname) (empty-sosofo))
</text>
<text>(element (seriesinfo othercredit) (empty-sosofo))
</text>
<text>(element (seriesinfo othername) (empty-sosofo))
</text>
<text>(element (seriesinfo pagenums) (empty-sosofo))
</text>
<text>(element (seriesinfo printhistory) (empty-sosofo))
</text>
<text>(element (seriesinfo productname) (empty-sosofo))
</text>
<text>(element (seriesinfo productnumber) (empty-sosofo))
</text>
<text>(element (seriesinfo pubdate) (empty-sosofo))
</text>
<text>(element (seriesinfo publisher) (empty-sosofo))
</text>
<text>(element (seriesinfo publishername) (empty-sosofo))
</text>
<text>(element (seriesinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (seriesinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (seriesinfo revhistory) (empty-sosofo))
</text>
<text>(element (seriesinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (seriesinfo subtitle) (empty-sosofo))
</text>
<text>(element (seriesinfo surname) (empty-sosofo))
</text>
<text>(element (seriesinfo title) (empty-sosofo))
</text>
<text>(element (seriesinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (seriesinfo volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element artheader (empty-sosofo))
</text>
<text>
</text>
<text>(element (artheader abbrev) (empty-sosofo))
</text>
<text>(element (artheader abstract) (empty-sosofo))
</text>
<text>(element (artheader address) (empty-sosofo))
</text>
<text>(element (artheader affiliation) (empty-sosofo))
</text>
<text>(element (artheader artpagenums) (empty-sosofo))
</text>
<text>(element (artheader author) (empty-sosofo))
</text>
<text>(element (artheader authorblurb) (empty-sosofo))
</text>
<text>(element (artheader authorgroup) (empty-sosofo))
</text>
<text>(element (artheader authorinitials) (empty-sosofo))
</text>
<text>(element (artheader bibliomisc) (empty-sosofo))
</text>
<text>(element (artheader biblioset) (empty-sosofo))
</text>
<text>(element (artheader bookbiblio) (empty-sosofo))
</text>
<text>(element (artheader collab) (empty-sosofo))
</text>
<text>(element (artheader confgroup) (empty-sosofo))
</text>
<text>(element (artheader contractnum) (empty-sosofo))
</text>
<text>(element (artheader contractsponsor) (empty-sosofo))
</text>
<text>(element (artheader contrib) (empty-sosofo))
</text>
<text>(element (artheader copyright) (empty-sosofo))
</text>
<text>(element (artheader corpauthor) (empty-sosofo))
</text>
<text>(element (artheader corpname) (empty-sosofo))
</text>
<text>(element (artheader date) (empty-sosofo))
</text>
<text>(element (artheader edition) (empty-sosofo))
</text>
<text>(element (artheader editor) (empty-sosofo))
</text>
<text>(element (artheader firstname) (empty-sosofo))
</text>
<text>(element (artheader honorific) (empty-sosofo))
</text>
<text>(element (artheader invpartnumber) (empty-sosofo))
</text>
<text>(element (artheader isbn) (empty-sosofo))
</text>
<text>(element (artheader issn) (empty-sosofo))
</text>
<text>(element (artheader issuenum) (empty-sosofo))
</text>
<text>(element (artheader keywordset) (empty-sosofo))
</text>
<text>(element (artheader lineage) (empty-sosofo))
</text>
<text>(element (artheader orgname) (empty-sosofo))
</text>
<text>(element (artheader othercredit) (empty-sosofo))
</text>
<text>(element (artheader othername) (empty-sosofo))
</text>
<text>(element (artheader pagenums) (empty-sosofo))
</text>
<text>(element (artheader printhistory) (empty-sosofo))
</text>
<text>(element (artheader productname) (empty-sosofo))
</text>
<text>(element (artheader productnumber) (empty-sosofo))
</text>
<text>(element (artheader pubdate) (empty-sosofo))
</text>
<text>(element (artheader publisher) (empty-sosofo))
</text>
<text>(element (artheader publishername) (empty-sosofo))
</text>
<text>(element (artheader pubsnumber) (empty-sosofo))
</text>
<text>(element (artheader releaseinfo) (empty-sosofo))
</text>
<text>(element (artheader revhistory) (empty-sosofo))
</text>
<text>(element (artheader seriesvolnums) (empty-sosofo))
</text>
<text>(element (artheader subtitle) (empty-sosofo))
</text>
<text>(element (artheader surname) (empty-sosofo))
</text>
<text>(element (artheader title) (empty-sosofo))
</text>
<text>(element (artheader titleabbrev) (empty-sosofo))
</text>
<text>(element (artheader volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element articleinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (articleinfo abbrev) (empty-sosofo))
</text>
<text>(element (articleinfo abstract) (empty-sosofo))
</text>
<text>(element (articleinfo address) (empty-sosofo))
</text>
<text>(element (articleinfo affiliation) (empty-sosofo))
</text>
<text>(element (articleinfo artpagenums) (empty-sosofo))
</text>
<text>(element (articleinfo author) (empty-sosofo))
</text>
<text>(element (articleinfo authorblurb) (empty-sosofo))
</text>
<text>(element (articleinfo authorgroup) (empty-sosofo))
</text>
<text>(element (articleinfo authorinitials) (empty-sosofo))
</text>
<text>(element (articleinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (articleinfo biblioset) (empty-sosofo))
</text>
<text>(element (articleinfo bookbiblio) (empty-sosofo))
</text>
<text>(element (articleinfo collab) (empty-sosofo))
</text>
<text>(element (articleinfo confgroup) (empty-sosofo))
</text>
<text>(element (articleinfo contractnum) (empty-sosofo))
</text>
<text>(element (articleinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (articleinfo contrib) (empty-sosofo))
</text>
<text>(element (articleinfo copyright) (empty-sosofo))
</text>
<text>(element (articleinfo corpauthor) (empty-sosofo))
</text>
<text>(element (articleinfo corpname) (empty-sosofo))
</text>
<text>(element (articleinfo date) (empty-sosofo))
</text>
<text>(element (articleinfo edition) (empty-sosofo))
</text>
<text>(element (articleinfo editor) (empty-sosofo))
</text>
<text>(element (articleinfo firstname) (empty-sosofo))
</text>
<text>(element (articleinfo honorific) (empty-sosofo))
</text>
<text>(element (articleinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (articleinfo isbn) (empty-sosofo))
</text>
<text>(element (articleinfo issn) (empty-sosofo))
</text>
<text>(element (articleinfo issuenum) (empty-sosofo))
</text>
<text>(element (articleinfo lineage) (empty-sosofo))
</text>
<text>(element (articleinfo orgname) (empty-sosofo))
</text>
<text>(element (articleinfo othercredit) (empty-sosofo))
</text>
<text>(element (articleinfo othername) (empty-sosofo))
</text>
<text>(element (articleinfo pagenums) (empty-sosofo))
</text>
<text>(element (articleinfo printhistory) (empty-sosofo))
</text>
<text>(element (articleinfo productname) (empty-sosofo))
</text>
<text>(element (articleinfo productnumber) (empty-sosofo))
</text>
<text>(element (articleinfo pubdate) (empty-sosofo))
</text>
<text>(element (articleinfo publisher) (empty-sosofo))
</text>
<text>(element (articleinfo publishername) (empty-sosofo))
</text>
<text>(element (articleinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (articleinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (articleinfo revhistory) (empty-sosofo))
</text>
<text>(element (articleinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (articleinfo subtitle) (empty-sosofo))
</text>
<text>(element (articleinfo surname) (empty-sosofo))
</text>
<text>(element (articleinfo title) (empty-sosofo))
</text>
<text>(element (articleinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (articleinfo volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element refsynopsisdivinfo (process-children))
</text>
<text>
</text>
<text>(element (refsynopsisdivinfo graphic) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo legalnotice) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo modespec) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo subjectset) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo keywordset) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo itermset) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo abbrev) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo abstract) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo address) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo artpagenums) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo author) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo authorgroup) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo authorinitials) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo biblioset) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo collab) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo confgroup) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo contractnum) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo copyright) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo corpauthor) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo corpname) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo date) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo edition) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo editor) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo isbn) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo issn) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo issuenum) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo orgname) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo othercredit) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo pagenums) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo printhistory) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo productname) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo productnumber) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo pubdate) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo publisher) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo publishername) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo revhistory) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo subtitle) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo title) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo volumenum) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo honorific) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo firstname) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo surname) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo lineage) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo othername) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo affiliation) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo authorblurb) (empty-sosofo))
</text>
<text>(element (refsynopsisdivinfo contrib) (empty-sosofo))
</text>
<text>
</text>
<text>(element prefaceinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (prefaceinfo abbrev) (empty-sosofo))
</text>
<text>(element (prefaceinfo abstract) (empty-sosofo))
</text>
<text>(element (prefaceinfo address) (empty-sosofo))
</text>
<text>(element (prefaceinfo affiliation) (empty-sosofo))
</text>
<text>(element (prefaceinfo artpagenums) (empty-sosofo))
</text>
<text>(element (prefaceinfo author) (empty-sosofo))
</text>
<text>(element (prefaceinfo authorblurb) (empty-sosofo))
</text>
<text>(element (prefaceinfo authorgroup) (empty-sosofo))
</text>
<text>(element (prefaceinfo authorinitials) (empty-sosofo))
</text>
<text>(element (prefaceinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (prefaceinfo biblioset) (empty-sosofo))
</text>
<text>(element (prefaceinfo bookbiblio) (empty-sosofo))
</text>
<text>(element (prefaceinfo collab) (empty-sosofo))
</text>
<text>(element (prefaceinfo confgroup) (empty-sosofo))
</text>
<text>(element (prefaceinfo contractnum) (empty-sosofo))
</text>
<text>(element (prefaceinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (prefaceinfo contrib) (empty-sosofo))
</text>
<text>(element (prefaceinfo copyright) (empty-sosofo))
</text>
<text>(element (prefaceinfo corpauthor) (empty-sosofo))
</text>
<text>(element (prefaceinfo corpname) (empty-sosofo))
</text>
<text>(element (prefaceinfo date) (empty-sosofo))
</text>
<text>(element (prefaceinfo edition) (empty-sosofo))
</text>
<text>(element (prefaceinfo editor) (empty-sosofo))
</text>
<text>(element (prefaceinfo firstname) (empty-sosofo))
</text>
<text>(element (prefaceinfo honorific) (empty-sosofo))
</text>
<text>(element (prefaceinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (prefaceinfo isbn) (empty-sosofo))
</text>
<text>(element (prefaceinfo issn) (empty-sosofo))
</text>
<text>(element (prefaceinfo issuenum) (empty-sosofo))
</text>
<text>(element (prefaceinfo lineage) (empty-sosofo))
</text>
<text>(element (prefaceinfo orgname) (empty-sosofo))
</text>
<text>(element (prefaceinfo othercredit) (empty-sosofo))
</text>
<text>(element (prefaceinfo othername) (empty-sosofo))
</text>
<text>(element (prefaceinfo pagenums) (empty-sosofo))
</text>
<text>(element (prefaceinfo printhistory) (empty-sosofo))
</text>
<text>(element (prefaceinfo productname) (empty-sosofo))
</text>
<text>(element (prefaceinfo productnumber) (empty-sosofo))
</text>
<text>(element (prefaceinfo pubdate) (empty-sosofo))
</text>
<text>(element (prefaceinfo publisher) (empty-sosofo))
</text>
<text>(element (prefaceinfo publishername) (empty-sosofo))
</text>
<text>(element (prefaceinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (prefaceinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (prefaceinfo revhistory) (empty-sosofo))
</text>
<text>(element (prefaceinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (prefaceinfo subtitle) (empty-sosofo))
</text>
<text>(element (prefaceinfo surname) (empty-sosofo))
</text>
<text>(element (prefaceinfo title) (empty-sosofo))
</text>
<text>(element (prefaceinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (prefaceinfo volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element chapterinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (chapterinfo abbrev) (empty-sosofo))
</text>
<text>(element (chapterinfo abstract) (empty-sosofo))
</text>
<text>(element (chapterinfo address) (empty-sosofo))
</text>
<text>(element (chapterinfo affiliation) (empty-sosofo))
</text>
<text>(element (chapterinfo artpagenums) (empty-sosofo))
</text>
<text>(element (chapterinfo author) (empty-sosofo))
</text>
<text>(element (chapterinfo authorblurb) (empty-sosofo))
</text>
<text>(element (chapterinfo authorgroup) (empty-sosofo))
</text>
<text>(element (chapterinfo authorinitials) (empty-sosofo))
</text>
<text>(element (chapterinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (chapterinfo biblioset) (empty-sosofo))
</text>
<text>(element (chapterinfo bookbiblio) (empty-sosofo))
</text>
<text>(element (chapterinfo collab) (empty-sosofo))
</text>
<text>(element (chapterinfo confgroup) (empty-sosofo))
</text>
<text>(element (chapterinfo contractnum) (empty-sosofo))
</text>
<text>(element (chapterinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (chapterinfo contrib) (empty-sosofo))
</text>
<text>(element (chapterinfo copyright) (empty-sosofo))
</text>
<text>(element (chapterinfo corpauthor) (empty-sosofo))
</text>
<text>(element (chapterinfo corpname) (empty-sosofo))
</text>
<text>(element (chapterinfo date) (empty-sosofo))
</text>
<text>(element (chapterinfo edition) (empty-sosofo))
</text>
<text>(element (chapterinfo editor) (empty-sosofo))
</text>
<text>(element (chapterinfo firstname) (empty-sosofo))
</text>
<text>(element (chapterinfo honorific) (empty-sosofo))
</text>
<text>(element (chapterinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (chapterinfo isbn) (empty-sosofo))
</text>
<text>(element (chapterinfo issn) (empty-sosofo))
</text>
<text>(element (chapterinfo issuenum) (empty-sosofo))
</text>
<text>(element (chapterinfo lineage) (empty-sosofo))
</text>
<text>(element (chapterinfo orgname) (empty-sosofo))
</text>
<text>(element (chapterinfo othercredit) (empty-sosofo))
</text>
<text>(element (chapterinfo othername) (empty-sosofo))
</text>
<text>(element (chapterinfo pagenums) (empty-sosofo))
</text>
<text>(element (chapterinfo printhistory) (empty-sosofo))
</text>
<text>(element (chapterinfo productname) (empty-sosofo))
</text>
<text>(element (chapterinfo productnumber) (empty-sosofo))
</text>
<text>(element (chapterinfo pubdate) (empty-sosofo))
</text>
<text>(element (chapterinfo publisher) (empty-sosofo))
</text>
<text>(element (chapterinfo publishername) (empty-sosofo))
</text>
<text>(element (chapterinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (chapterinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (chapterinfo revhistory) (empty-sosofo))
</text>
<text>(element (chapterinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (chapterinfo subtitle) (empty-sosofo))
</text>
<text>(element (chapterinfo surname) (empty-sosofo))
</text>
<text>(element (chapterinfo title) (empty-sosofo))
</text>
<text>(element (chapterinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (chapterinfo volumenum) (empty-sosofo))
</text>
<text>
</text>
<text>(element appendixinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element (appendixinfo abbrev) (empty-sosofo))
</text>
<text>(element (appendixinfo abstract) (empty-sosofo))
</text>
<text>(element (appendixinfo address) (empty-sosofo))
</text>
<text>(element (appendixinfo affiliation) (empty-sosofo))
</text>
<text>(element (appendixinfo artpagenums) (empty-sosofo))
</text>
<text>(element (appendixinfo author) (empty-sosofo))
</text>
<text>(element (appendixinfo authorblurb) (empty-sosofo))
</text>
<text>(element (appendixinfo authorgroup) (empty-sosofo))
</text>
<text>(element (appendixinfo authorinitials) (empty-sosofo))
</text>
<text>(element (appendixinfo bibliomisc) (empty-sosofo))
</text>
<text>(element (appendixinfo biblioset) (empty-sosofo))
</text>
<text>(element (appendixinfo bookbiblio) (empty-sosofo))
</text>
<text>(element (appendixinfo collab) (empty-sosofo))
</text>
<text>(element (appendixinfo confgroup) (empty-sosofo))
</text>
<text>(element (appendixinfo contractnum) (empty-sosofo))
</text>
<text>(element (appendixinfo contractsponsor) (empty-sosofo))
</text>
<text>(element (appendixinfo contrib) (empty-sosofo))
</text>
<text>(element (appendixinfo copyright) (empty-sosofo))
</text>
<text>(element (appendixinfo corpauthor) (empty-sosofo))
</text>
<text>(element (appendixinfo corpname) (empty-sosofo))
</text>
<text>(element (appendixinfo date) (empty-sosofo))
</text>
<text>(element (appendixinfo edition) (empty-sosofo))
</text>
<text>(element (appendixinfo editor) (empty-sosofo))
</text>
<text>(element (appendixinfo firstname) (empty-sosofo))
</text>
<text>(element (appendixinfo honorific) (empty-sosofo))
</text>
<text>(element (appendixinfo invpartnumber) (empty-sosofo))
</text>
<text>(element (appendixinfo isbn) (empty-sosofo))
</text>
<text>(element (appendixinfo issn) (empty-sosofo))
</text>
<text>(element (appendixinfo issuenum) (empty-sosofo))
</text>
<text>(element (appendixinfo lineage) (empty-sosofo))
</text>
<text>(element (appendixinfo orgname) (empty-sosofo))
</text>
<text>(element (appendixinfo othercredit) (empty-sosofo))
</text>
<text>(element (appendixinfo othername) (empty-sosofo))
</text>
<text>(element (appendixinfo pagenums) (empty-sosofo))
</text>
<text>(element (appendixinfo printhistory) (empty-sosofo))
</text>
<text>(element (appendixinfo productname) (empty-sosofo))
</text>
<text>(element (appendixinfo productnumber) (empty-sosofo))
</text>
<text>(element (appendixinfo pubdate) (empty-sosofo))
</text>
<text>(element (appendixinfo publisher) (empty-sosofo))
</text>
<text>(element (appendixinfo publishername) (empty-sosofo))
</text>
<text>(element (appendixinfo pubsnumber) (empty-sosofo))
</text>
<text>(element (appendixinfo releaseinfo) (empty-sosofo))
</text>
<text>(element (appendixinfo revhistory) (empty-sosofo))
</text>
<text>(element (appendixinfo seriesvolnums) (empty-sosofo))
</text>
<text>(element (appendixinfo subtitle) (empty-sosofo))
</text>
<text>(element (appendixinfo surname) (empty-sosofo))
</text>
<text>(element (appendixinfo title) (empty-sosofo))
</text>
<text>(element (appendixinfo titleabbrev) (empty-sosofo))
</text>
<text>(element (appendixinfo volumenum) (empty-sosofo))
</text>
<text>    </text>
<text>
</text>
<text>;; $Id: dbinline.dsl,v 1.6 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================== INLINES ===============================
</text>
<text>
</text>
<text>(element accel ($score-seq$ 'after))
</text>
<text>(element action ($charseq$))
</text>
<text>(element application ($charseq$))
</text>
<text>(element classname ($mono-seq$))
</text>
<text>(element command ($bold-seq$))
</text>
<text>(element computeroutput ($mono-seq$))
</text>
<text>(element database ($charseq$))
</text>
<text>(element email 
</text>
<text>  (make sequence (literal &quot;</text>
<text>&lt;</text>
<text>&quot;) ($mono-seq$) (literal &quot;</text>
<text>&gt;</text>
<text>&quot;)))
</text>
<text>(element envar ($charseq$))
</text>
<text>(element errorcode ($charseq$))
</text>
<text>(element errorname ($charseq$))
</text>
<text>(element errortype ($charseq$))
</text>
<text>(element filename ($mono-seq$))
</text>
<text>(element function ($mono-seq$))
</text>
<text>(element guibutton ($guilabel-seq$))
</text>
<text>(element guiicon ($guilabel-seq$))
</text>
<text>(element guilabel ($guilabel-seq$))
</text>
<text>(element guimenu ($guilabel-seq$))
</text>
<text>(element guimenuitem ($guilabel-seq$))
</text>
<text>(element guisubmenu ($guilabel-seq$))
</text>
<text>(element hardware ($charseq$))
</text>
<text>(element interface ($charseq$))
</text>
<text>(element interfacedefinition ($charseq$))
</text>
<text>(element keycap ($bold-seq$))
</text>
<text>(element keycode ($charseq$))
</text>
<text>
</text>
<text>(element keycombo 
</text>
<text>  (let* ((action (attribute-string (normalize &quot;action&quot;)))
</text>
<text>	 (joinchar 
</text>
<text>	  (cond
</text>
<text>	   ((equal? action (normalize &quot;seq&quot;)) &quot; &quot;)          ;; space
</text>
<text>	   ((equal? action (normalize &quot;simul&quot;)) &quot;+&quot;)        ;; +
</text>
<text>	   ((equal? action (normalize &quot;press&quot;)) &quot;-&quot;)        ;; ? I don't know
</text>
<text>	   ((equal? action (normalize &quot;click&quot;)) &quot;-&quot;)        ;; ? what to do
</text>
<text>	   ((equal? action (normalize &quot;double-click&quot;)) &quot;-&quot;) ;; ? about the rest
</text>
<text>	   ((equal? action (normalize &quot;other&quot;)) &quot;-&quot;)        ;; ? of these
</text>
<text>	   (else &quot;-&quot;))))
</text>
<text>    (let loop ((nl (children </text>
<text>(current-node))) (count 1))
</text>
<text>      (if (node-list-empty? nl)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (if (equal? count 1)
</text>
<text>	      (make sequence
</text>
<text>		(process-node-list (node-list-first nl))
</text>
<text>		(loop (node-list-rest nl) (+ count 1)))
</text>
<text>	      (make sequence
</text>
<text>		(literal joinchar)
</text>
<text>		(process-node-list (node-list-first nl))
</text>
<text>		(loop (node-list-rest nl) (+ count 1))))))))
</text>
<text>
</text>
<text>(element keysym ($charseq$))
</text>
<text>(element literal ($mono-seq$))
</text>
<text>(element medialabel ($italic-seq$))
</text>
<text>
</text>
<text>(element menuchoice
</text>
<text>  (let* ((shortcut (select-elements (children (current-node)) 
</text>
<text>				    (normalize &quot;shortcut&quot;)))
</text>
<text>	 (items    (node-list-filter-by-not-gi
</text>
<text>		    (children (current-node))
</text>
<text>		    (list (normalize &quot;shortcut&quot;)))))
</text>
<text>    (make sequence
</text>
<text>      (let loop ((nl items) (first? #t))
</text>
<text>	(if (node-list-empty? nl)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (if first?
</text>
<text>		  (process-node-list (node-list-first nl))
</text>
<text>		  (make sequence
</text>
<text>		    (if (or (equal? (gi (node-list-first nl))
</text>
<text>				    (normalize &quot;guimenuitem&quot;))
</text>
<text>			    (equal? (gi (node-list-first nl))
</text>
<text>				    (normalize &quot;guisubmenu&quot;)))
</text>
<text>			(literal &quot;\rightwards-arrow;&quot;)
</text>
<text>			(literal &quot;+&quot;))
</text>
<text>		    (process-node-list (node-list-first nl))))
</text>
<text>	      (loop (node-list-rest nl) #f))))
</text>
<text>      (if (node-list-empty? shortcut)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make sequence
</text>
<text>	    (literal &quot; (&quot;)
</text>
<text>	    (process-node-list shortcut)
</text>
<text>	    (literal &quot;)&quot;))))))
</text>
<text>
</text>
<text>(element methodname ($mono-seq$))
</text>
<text>(element shortcut ($bold-seq$))
</text>
<text>(element mousebutton ($charseq$))
</text>
<text>(element option ($mono-seq$))
</text>
<text>
</text>
<text>(element optional 
</text>
<text>  (make sequence 
</text>
<text>    (literal %arg-choice-opt-open-str%)
</text>
<text>    ($charseq$)
</text>
<text>    (literal %arg-choice-opt-close-str%)))
</text>
<text>
</text>
<text>(element parameter ($italic-mono-seq$))
</text>
<text>(element property ($charseq$))
</text>
<text>(element prompt ($mono-seq$))
</text>
<text>(element replaceable ($italic-mono-seq$))
</text>
<text>(element returnvalue ($charseq$))
</text>
<text>(element structfield ($italic-mono-seq$))
</text>
<text>(element structname ($charseq$))
</text>
<text>(element symbol ($charseq$))
</text>
<text>(element systemitem ($charseq$))
</text>
<text>(element token ($charseq$))
</text>
<text>(element type ($charseq$))
</text>
<text>(element userinput ($bold-mono-seq$))
</text>
<text>(element abbrev ($charseq$))
</text>
<text>(element acronym ($charseq$))
</text>
<text>
</text>
<text>(element citation 
</text>
<text>  (if biblio-citation-check
</text>
<text>      (let* ((bgraphies (select-elements (descendants (sgml-root-element))
</text>
<text>					 (normalize &quot;bibliography&quot;)))
</text>
<text>	     (bchildren1 (expand-children bgraphies
</text>
<text>					  (list (normalize &quot;bibliography&quot;))))
</text>
<text>	     (bchildren2 (expand-children bchildren1
</text>
<text>					  (list (normalize &quot;bibliodiv&quot;))))
</text>
<text>	     (bibentries (node-list-filter-by-gi 
</text>
<text>			  bchildren2
</text>
<text>			  (list (normalize &quot;biblioentry&quot;)
</text>
<text>				(normalize &quot;bibliomixed&quot;)))))
</text>
<text>	(let loop ((bibs bibentries))
</text>
<text>	  (if (node-list-empty? bibs)
</text>
<text>	      (make sequence
</text>
<text>		(error (string-append &quot;Cannot find citation: &quot; 
</text>
<text>					   (data (current-node))))
</text>
<text>		(literal &quot;[&quot;) ($charseq$) (literal &quot;]&quot;))
</text>
<text>	      (if (citation-matches-target? (current-node) 
</text>
<text>					    (node-list-first bibs))
</text>
<text>		  (make link 
</text>
<text>		    destination: (node-list-address (node-list-first bibs))
</text>
<text>		    (literal &quot;[&quot;) ($charseq$) (literal &quot;]&quot;))
</text>
<text>		  (loop (node-list-rest bibs))))))
</text>
<text>      (make sequence 
</text>
<text>	(literal &quot;[&quot;) ($charseq$) (literal &quot;]&quot;))))
</text>
<text>
</text>
<text>(element citerefentry 
</text>
<text>  (if %refentry-xref-italic%
</text>
<text>      ($italic-seq$)
</text>
<text>      ($charseq$)))
</text>
<text>
</text>
<text>(element citetitle
</text>
<text>  (if (equal? (attribute-string (normalize &quot;pubwork&quot;)) &quot;article&quot;)
</text>
<text>      (make sequence
</text>
<text>	(literal (gentext-start-quote))
</text>
<text>	(process-children)
</text>
<text>	(literal (gentext-end-quote)))
</text>
<text>      ($italic-seq$)))
</text>
<text>
</text>
<text>(element emphasis
</text>
<text>  (if (and (attribute-string (normalize &quot;role&quot;))
</text>
<text>	   (or (equal? (attribute-string (normalize &quot;role&quot;)) &quot;strong&quot;)
</text>
<text>	       (equal? (attribute-string (normalize &quot;role&quot;)) &quot;bold&quot;)))
</text>
<text>      ($bold-seq$)
</text>
<text>      ($italic-seq$)))
</text>
<text>
</text>
<text>(element foreignphrase ($italic-seq$))
</text>
<text>(element markup ($charseq$))
</text>
<text>(element phrase ($charseq$))
</text>
<text>
</text>
<text>(element quote
</text>
<text>  (let* ((hnr   (hierarchical-number-recursive (normalize &quot;quote&quot;) 
</text>
<text>					       (current-node)))
</text>
<text>	 (depth (length hnr)))
</text>
<text>    (if (equal? (modulo depth 2) 1)
</text>
<text>	(make sequence
</text>
<text>	  (literal (gentext-start-nested-quote))
</text>
<text>	  (process-children)
</text>
<text>	  (literal (gentext-end-nested-quote)))
</text>
<text>	(make sequence
</text>
<text>	  (literal (gentext-start-quote))
</text>
<text>	  (process-children)
</text>
<text>	  (literal (gentext-end-quote))))))
</text>
<text>
</text>
<text>(element sgmltag
</text>
<text>  (let ((class (if (attribute-string (normalize &quot;class&quot;))
</text>
<text>		   (attribute-string (normalize &quot;class&quot;))
</text>
<text>		   (normalize &quot;element&quot;))))
</text>
<text>    (cond
</text>
<text>      ((equal? class (normalize &quot;attribute&quot;)) ($mono-seq$))
</text>
<text>      ((equal? class (normalize &quot;attvalue&quot;)) ($mono-seq$))
</text>
<text>      ((equal? class (normalize &quot;element&quot;)) ($mono-seq$))
</text>
<text>      ((equal? class (normalize &quot;emptytag&quot;)) ($mono-seq$ (make sequence 
</text>
<text>				  (literal &quot;&lt;&quot;) 
</text>
<text>				  (process-children)
</text>
<text>				  (literal &quot;/&gt;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;endtag&quot;)) ($mono-seq$ (make sequence 
</text>
<text>			       (literal &quot;&lt;/&quot;) 
</text>
<text>			       (process-children)
</text>
<text>			       (literal &quot;&gt;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;genentity&quot;)) ($mono-seq$ (make sequence
</text>
<text>				    (literal &quot;&amp;&quot;)
</text>
<text>				    (process-children)
</text>
<text>				    (literal &quot;;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;numcharref&quot;)) ($mono-seq$ (make sequence
</text>
<text>				     (literal &quot;&amp;#&quot;)
</text>
<text>				     (process-children)
</text>
<text>				     (literal &quot;;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;paramentity&quot;)) ($mono-seq$ (make sequence
</text>
<text>				      (literal &quot;%&quot;)
</text>
<text>				      (process-children)
</text>
<text>				      (literal &quot;;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;pi&quot;)) ($mono-seq$ (make sequence 
</text>
<text>			    (literal &quot;&lt;?&quot;)
</text>
<text>			    (process-children)
</text>
<text>			    (literal &quot;&gt;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;starttag&quot;)) ($mono-seq$ (make sequence 
</text>
<text>				  (literal &quot;&lt;&quot;) 
</text>
<text>				  (process-children)
</text>
<text>				  (literal &quot;&gt;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;sgmlcomment&quot;)) ($mono-seq$ (make sequence 
</text>
<text>				     (literal &quot;&lt;!--&quot;)
</text>
<text>				     (process-children)
</text>
<text>				     (literal &quot;--&gt;&quot;))))
</text>
<text>      ((equal? class (normalize &quot;xmlpi&quot;)) ($mono-seq$ (make sequence 
</text>
<text>			    (literal &quot;&lt;?&quot;)
</text>
<text>			    (process-children)
</text>
<text>			    (literal &quot;?&gt;&quot;))))
</text>
<text>      (else ($charseq$)))))
</text>
<text>
</text>
<text>(element trademark 
</text>
<text>  (make sequence
</text>
<text>    ($charseq$)
</text>
<text>    (cond
</text>
<text>     ((equal? (attribute-string &quot;class&quot;) (normalize &quot;copyright&quot;))
</text>
<text>      (literal &quot;\copyright-sign;&quot;))
</text>
<text>     ((equal? (attribute-string &quot;class&quot;) (normalize &quot;registered&quot;))
</text>
<text>      (literal &quot;\registered-sign;&quot;))
</text>
<text>     ((equal? (attribute-string &quot;class&quot;) (normalize &quot;service&quot;))
</text>
<text>      ($ss-seq$ + (literal &quot;SM&quot;)))
</text>
<text>     (else
</text>
<text>      (literal &quot;\trade-mark-sign;&quot;)))))
</text>
<text>
</text>
<text>(element wordasword ($italic-seq$))
</text>
<text>
</text>
<text>(element lineannotation
</text>
<text>  (make sequence
</text>
<text>    font-family-name: %body-font-family%
</text>
<text>    font-posture: 'italic
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(define ($ss-seq$ plus-or-minus #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>	font-size:
</text>
<text>	  (* (inherited-font-size) %ss-size-factor%)
</text>
<text>	position-point-shift:
</text>
<text>	  (plus-or-minus (* (inherited-font-size) %ss-shift-factor%))
</text>
<text>	sosofo))
</text>
<text>
</text>
<text>(element superscript ($ss-seq$ +))
</text>
<text>(element subscript ($ss-seq$ -))
</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dblink.dsl,v 1.6 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ========================= LINKS AND ANCHORS ==========================
</text>
<text>
</text>
<text>(element link
</text>
<text>  ;; No warnings about missing targets.  Jade will do that for us, and
</text>
<text>  ;; this way we can use -wno-idref if we really don't care.
</text>
<text>  (let* ((endterm   (attribute-string (normalize &quot;endterm&quot;)))
</text>
<text>	 (linkend   (attribute-string (normalize &quot;linkend&quot;)))
</text>
<text>	 (target    (element-with-id linkend))
</text>
<text>	 (etarget   (if endterm 
</text>
<text>			(element-with-id endterm)
</text>
<text>			(empty-node-list)))
</text>
<text>	 (link-cont (if endterm
</text>
<text>			(if (node-list-empty? etarget)
</text>
<text>			    (literal 
</text>
<text>			     (string-append &quot;LINK CONTENT ENDTERM '&quot;
</text>
<text>					    endterm
</text>
<text>					    &quot;' MISSING&quot;))
</text>
<text>			    (with-mode xref-endterm-mode
</text>
<text>			      (process-node-list etarget)))
</text>
<text>			(process-children))))
</text>
<text>    (if (node-list-empty? target)
</text>
<text>	link-cont
</text>
<text>	(make link 
</text>
<text>	  destination: (node-list-address target)
</text>
<text>	  link-cont))))
</text>
<text>
</text>
<text>(element ulink 
</text>
<text>  (make sequence
</text>
<text>    (if (node-list-empty? (children (current-node)))
</text>
<text>	(literal (attribute-string (normalize &quot;url&quot;)))
</text>
<text>	(make sequence
</text>
<text>	  ($charseq$)
</text>
<text> 	  (if (not (equal? (attribute-string (normalize &quot;url&quot;))
</text>
<text> 			   (data-of (current-node))))
</text>
<text> 	      (if %footnote-ulinks%
</text>
<text> 		  (if (and (equal? (print-backend) 'tex) bop-footnotes)
</text>
<text> 		      (make sequence
</text>
<text> 			($ss-seq$ + (literal (footnote-number (current-node))))
</text>
<text> 			(make page-footnote
</text>
<text> 			  (make paragraph
</text>
<text> 			    font-family-name: %body-font-family%
</text>
<text> 			    font-size: (* %footnote-size-factor% %bf-size%)
</text>
<text> 			    font-posture: 'upright
</text>
<text> 			    quadding: %default-quadding%
</text>
<text> 			    line-spacing: (* (* %footnote-size-factor% %bf-size%)
</text>
<text> 					     %line-spacing-factor%)
</text>
<text> 			    space-before: %para-sep%
</text>
<text> 			    space-after: %para-sep%
</text>
<text> 			    start-indent: %footnote-field-width%
</text>
<text> 			    first-line-start-indent: (- %footnote-field-width%)
</text>
<text> 			    (make line-field
</text>
<text> 			      field-width: %footnote-field-width%
</text>
<text> 			      (literal (footnote-number (current-node))
</text>
<text> 				       (gentext-label-title-sep (normalize &quot;footnote&quot;))))
</text>
<text> 			    (literal (attribute-string (normalize &quot;url&quot;))))))
</text>
<text> 		      ($ss-seq$ + (literal (footnote-number (current-node)))))
</text>
<text> 		  (if %show-ulinks%
</text>
<text> 		      (make sequence
</text>
<text> 			(literal &quot; (&quot;)
</text>
<text> 			(literal (attribute-string (normalize &quot;url&quot;)))
</text>
<text> 			(literal &quot;)&quot;))
</text>
<text> 		      (empty-sosofo)))
</text>
<text> 	      (empty-sosofo))))))
</text>
<text>
</text>
<text>(element footnoteref 
</text>
<text>  (process-element-with-id (attribute-string (normalize &quot;linkend&quot;))))
</text>
<text>
</text>
<text>(element anchor
</text>
<text>  ;; This is different than (empty-sosofo) alone because the backend
</text>
<text>  ;; will hang an anchor off the empty sequence.
</text>
<text>  (make sequence (empty-sosofo)))
</text>
<text>
</text>
<text>(element beginpage (empty-sosofo))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (olink-link)
</text>
<text>  ;; This is an olink without a TARGETDOCENT, treat it as a link within
</text>
<text>  ;; the same document.
</text>
<text>  (let* ((localinfo (attribute-string (normalize &quot;localinfo&quot;)))
</text>
<text>	 (target    (element-with-id localinfo))
</text>
<text>	 (linkmode  (attribute-string (normalize &quot;linkmode&quot;)))
</text>
<text>	 (modespec  (if linkmode (element-with-id linkmode) (empty-node-list)))
</text>
<text>	 (xreflabel (if (node-list-empty? modespec)
</text>
<text>			#f
</text>
<text>			(attribute-string (normalize &quot;xreflabel&quot;) modespec)))
</text>
<text>	 (linktext  (strip (data-of (current-node)))))
</text>
<text>    (if (node-list-empty? target)
</text>
<text>	(make sequence
</text>
<text>	  (error (string-append &quot;OLink to missing ID '&quot; localinfo &quot;'&quot;))
</text>
<text>	  (if (and (equal? linktext &quot;&quot;) xreflabel)
</text>
<text>	      (literal xreflabel)
</text>
<text>	      (process-children)))
</text>
<text>	(if (equal? linktext &quot;&quot;)
</text>
<text>	    (if xreflabel
</text>
<text>		(xref-general target xreflabel)
</text>
<text>		(xref-general target))
</text>
<text>	    (process-children)))))
</text>
<text>
</text>
<text>(define (olink-simple)
</text>
<text>  ;; Assumptions: 
</text>
<text>  ;; - The TARGETDOCENT is identified by a public ID
</text>
<text>  ;; - If the element has no content, the title extracted by
</text>
<text>  ;;   (olink-resource-title) should be used
</text>
<text>  ;; - The (olink-resource-title) function can deduce the title from
</text>
<text>  ;;   the pubid and the sysid
</text>
<text>  (let* ((target   (attribute-string (normalize &quot;targetdocent&quot;)))
</text>
<text>	 (pubid    (entity-public-id target))
</text>
<text>	 (sysid    (system-id-filename target))
</text>
<text>	 (title    (olink-resource-title pubid sysid))
</text>
<text>	 (linktext (strip (data-of (current-node)))))
</text>
<text>    (if (equal? linktext &quot;&quot;)
</text>
<text>	(make sequence
</text>
<text>	  font-posture: 'italic
</text>
<text>	  (literal title))
</text>
<text>	(process-children))))
</text>
<text>
</text>
<text>(define (olink-outline-xref olroot target linktext)
</text>
<text>  (let* ((name  (attribute-string (normalize &quot;name&quot;) target))
</text>
<text>	 (label (attribute-string (normalize &quot;label&quot;) target))
</text>
<text>	 (title (select-elements (children target) (normalize &quot;ttl&quot;)))
</text>
<text>	 (substitute (list
</text>
<text>		      (list &quot;%g&quot; (if name (literal name) (literal &quot;&quot;)))
</text>
<text>		      (list &quot;%n&quot; (if label (literal label) (literal &quot;&quot;)))
</text>
<text>		      (list &quot;%t&quot; (with-mode olink-title-mode
</text>
<text>				   (process-node-list title)))))
</text>
<text>	 (tlist   (match-split-list linktext (assoc-objs substitute))))
</text>
<text>    (string-list-sosofo tlist substitute)))
</text>
<text>
</text>
<text>(define (olink-outline)
</text>
<text>  (let* ((target    (attribute-string (normalize &quot;targetdocent&quot;)))
</text>
<text>	 (linkmode  (attribute-string (normalize &quot;linkmode&quot;)))
</text>
<text>	 (localinfo (attribute-string (normalize &quot;localinfo&quot;)))
</text>
<text>	 (modespec  (if linkmode (element-with-id linkmode) (empty-node-list)))
</text>
<text>	 (xreflabel (if (node-list-empty? modespec) 
</text>
<text>			&quot;&quot;
</text>
<text>			(attribute-string (normalize &quot;xreflabel&quot;) modespec)))
</text>
<text>	 (pubid     (entity-public-id target))
</text>
<text>	 (sysid     (system-id-filename target))
</text>
<text>	 (basename  (trim-string sysid '(&quot;.sgm&quot; &quot;.xml&quot; &quot;.sgml&quot;)))
</text>
<text>	 (olinkfile (string-append basename %olink-outline-ext%))
</text>
<text>	 (olinkdoc  (sgml-parse olinkfile))
</text>
<text>	 (olinkroot (node-property 'document-element olinkdoc))
</text>
<text>	 (olnode    (if localinfo
</text>
<text>			(element-with-id localinfo olinkroot)
</text>
<text>			olinkroot))
</text>
<text>	 (linktext (strip (data-of (current-node)))))
</text>
<text>    (if (equal? linktext &quot;&quot;)
</text>
<text>	(olink-outline-xref olinkroot olnode xreflabel)
</text>
<text>	(process-children))))
</text>
<text>
</text>
<text>(element olink
</text>
<text>  (if (not (attribute-string (normalize &quot;targetdocent&quot;)))
</text>
<text>      (olink-link)
</text>
<text>      (if (attribute-string (normalize &quot;linkmode&quot;))
</text>
<text>	  (olink-outline)
</text>
<text>	  (olink-simple))))
</text>
<text>
</text>
<text>(mode olink-title-mode
</text>
<text>  (default (process-children))
</text>
<text>
</text>
<text>  (element ttl
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element it
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'upright
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element tt
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %mono-font-family%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element sub 
</text>
<text>    ($ss-seq$ -))
</text>
<text>
</text>
<text>  (element sup 
</text>
<text>    ($ss-seq$ +))
</text>
<text>)
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(element xref
</text>
<text>  (let* ((endterm (attribute-string (normalize &quot;endterm&quot;)))
</text>
<text>	 (linkend (attribute-string (normalize &quot;linkend&quot;)))
</text>
<text>	 (target  (element-with-id linkend))
</text>
<text>	 (xreflabel (if (node-list-empty? target)
</text>
<text>			#f
</text>
<text>			(attribute-string (normalize &quot;xreflabel&quot;) target))))
</text>
<text>    (if (node-list-empty? target)
</text>
<text>	(error (string-append &quot;XRef LinkEnd to missing ID '&quot; linkend &quot;'&quot;))
</text>
<text>	(if xreflabel
</text>
<text>	    (make link 
</text>
<text>	      destination: (node-list-address target)
</text>
<text>	      (literal xreflabel))
</text>
<text>	    (if endterm
</text>
<text>		(if (node-list-empty? (element-with-id endterm))
</text>
<text>		    (error (string-append &quot;XRef EndTerm to missing ID '&quot; 
</text>
<text>					  endterm &quot;'&quot;))
</text>
<text>		    (make link 
</text>
<text>		      destination: (node-list-address (element-with-id endterm))
</text>
<text>		      (with-mode xref-endterm-mode 
</text>
<text>			(process-element-with-id endterm))))
</text>
<text>		(cond
</text>
<text>		 ((or (equal? (gi target) (normalize &quot;biblioentry&quot;))
</text>
<text>		      (equal? (gi target) (normalize &quot;bibliomixed&quot;)))
</text>
<text>		  ;; xref to the bibliography is a special case
</text>
<text>		  (xref-biblioentry target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;co&quot;))
</text>
<text>		  ;; callouts are a special case
</text>
<text>		  (xref-callout target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;listitem&quot;))
</text>
<text>		  (xref-listitem target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;varlistentry&quot;))
</text>
<text>		  (xref-varlistentry target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;question&quot;))
</text>
<text>		  (xref-question target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;answer&quot;))
</text>
<text>		  (xref-answer target))</text>
<text>
</text>
<text>		 ((equal? (gi target) (normalize &quot;refentry&quot;))
</text>
<text>		  (xref-refentry target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;refnamediv&quot;))
</text>
<text>		  ;; and refnamedivs
</text>
<text>		  (xref-refnamediv target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;glossentry&quot;))
</text>
<text>		  ;; as are glossentrys
</text>
<text>		  (xref-glossentry target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;author&quot;))
</text>
<text>		  ;; and authors
</text>
<text>		  (xref-author target))
</text>
<text>		 ((equal? (gi target) (normalize &quot;authorgroup&quot;))
</text>
<text>		  ;; and authorgroups
</text>
<text>		  (xref-authorgroup target))
</text>
<text>		 (else 
</text>
<text>		  (xref-general target))))))))
</text>
<text>
</text>
<text>(define (xref-general target #!optional (xref-string #f))
</text>
<text>  ;; This function is used by both XREF and OLINK (when no TARGETDOCENT
</text>
<text>  ;; is specified).  The only case where xref-string is supplied is
</text>
<text>  ;; on OLINK.
</text>
<text>  (let ((label (attribute-string (normalize &quot;xreflabel&quot;) target)))
</text>
<text>    (make link 
</text>
<text>      destination: (node-list-address target)
</text>
<text>      (if xref-string
</text>
<text>	  (auto-xref target xref-string)
</text>
<text>	  (if label
</text>
<text>	      (xreflabel-sosofo label)
</text>
<text>	      (auto-xref target))))))
</text>
<text>
</text>
<text>(define (xref-refentry target)
</text>
<text>;; refmeta/refentrytitle, refmeta/manvolnum, refnamediv/refdescriptor, 
</text>
<text>;; refnamediv/refname
</text>
<text>  (let* ((refmeta    (select-elements (children target)
</text>
<text>				      (normalize &quot;refmeta&quot;)))
</text>
<text>	 (refnamediv (select-elements (children target)
</text>
<text>				      (normalize &quot;refnamediv&quot;)))
</text>
<text>	 (rfetitle   (select-elements (children refmeta) 
</text>
<text>				      (normalize &quot;refentrytitle&quot;)))
</text>
<text>	 (manvolnum  (select-elements (children refmeta)
</text>
<text>				      (normalize &quot;manvolnum&quot;)))
</text>
<text>	 (refdescrip (select-elements (children refnamediv)
</text>
<text>				      (normalize &quot;refdescriptor&quot;)))
</text>
<text>	 (refname    (select-elements (children refnamediv)
</text>
<text>				      (normalize &quot;refname&quot;)))
</text>
<text>
</text>
<text>	 (title      (if (node-list-empty? rfetitle)
</text>
<text>			 (if (node-list-empty? refdescrip)
</text>
<text>			     (node-list-first refname)
</text>
<text>			     (node-list-first refdescrip))
</text>
<text>			 (node-list-first rfetitle))))
</text>
<text>  (make link 
</text>
<text>    destination: (node-list-address target)
</text>
<text>
</text>
<text>    (make sequence
</text>
<text>      font-posture: (if %refentry-xref-italic% 
</text>
<text>			'italic
</text>
<text>			(inherited-font-posture))
</text>
<text>
</text>
<text>      (process-node-list (children title))
</text>
<text>      (if (and %refentry-xref-manvolnum%
</text>
<text>	       (not (node-list-empty? manvolnum)))
</text>
<text>	  (process-node-list manvolnum)
</text>
<text>	  (empty-sosofo))))))
</text>
<text>
</text>
<text>(define (xref-refnamediv target)
</text>
<text>  (let* ((refname    (select-elements (children target)
</text>
<text>				      (normalize &quot;refname&quot;)))
</text>
<text>
</text>
<text>	 (title      (node-list-first refname)))
</text>
<text>    (make link
</text>
<text>      destination: (node-list-address target)
</text>
<text>
</text>
<text>      (make sequence
</text>
<text>	font-posture: (if %refentry-xref-italic%
</text>
<text>			  'italic
</text>
<text>			  (inherited-font-posture))
</text>
<text>
</text>
<text>	(process-node-list (children title))))))
</text>
<text>
</text>
<text>(define (xref-varlistentry target)
</text>
<text>  (let ((terms (select-elements (children target)
</text>
<text>				(normalize &quot;term&quot;))))
</text>
<text>    (make link 
</text>
<text>      destination: (node-list-address target)
</text>
<text>      (with-mode xref-varlistentry-mode
</text>
<text>	(process-node-list (node-list-first terms))))))
</text>
<text>
</text>
<text>(define (xref-glossentry target)
</text>
<text>  (let ((glossterms (select-elements (children target)
</text>
<text>				     (normalize &quot;glossterm&quot;))))
</text>
<text>    (make link 
</text>
<text>      destination: (node-list-address target)
</text>
<text>      (with-mode xref-glossentry-mode
</text>
<text>	(process-node-list (node-list-first glossterms))))))
</text>
<text>
</text>
<text>(define (xref-author target)
</text>
<text>  (make link 
</text>
<text>    destination: (node-list-address target)
</text>
<text>    (literal (author-string target))))
</text>
<text>
</text>
<text>(define (xref-authorgroup target)
</text>
<text>  ;; it's a quirk of author-list-string that it needs to point to
</text>
<text>  ;; one of the authors in the authorgroup, not the authorgroup.
</text>
<text>  ;; go figure.
</text>
<text>  (make link 
</text>
<text>    destination: (node-list-address target)
</text>
<text>    (let loop ((author (select-elements (children target)
</text>
<text>					(normalize &quot;author&quot;))))
</text>
<text>      (if (node-list-empty? author)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make sequence
</text>
<text>	    (literal (author-list-string (node-list-first author)))
</text>
<text>	    (loop (node-list-rest author)))))))
</text>
<text>
</text>
<text>(define (xref-biblioentry target)
</text>
<text>  (let* ((abbrev (node-list-first 
</text>
<text>		  (node-list-filter-out-pis (children target))))
</text>
<text>	 (label  (attribute-string (normalize &quot;xreflabel&quot;) target)))
</text>
<text>    (make link 
</text>
<text>      destination: (node-list-address target)
</text>
<text>
</text>
<text>      (if biblio-xref-title
</text>
<text>	  (let* ((citetitles (select-elements (descendants target)
</text>
<text>					     (normalize &quot;citetitle&quot;)))
</text>
<text>		 (titles     (select-elements (descendants target)
</text>
<text>					     (normalize &quot;title&quot;)))
</text>
<text>		 (title      (if (node-list-empty? citetitles)
</text>
<text>				 (node-list-first titles)
</text>
<text>				 (node-list-first citetitles))))
</text>
<text>	    (with-mode xref-title-mode
</text>
<text>	      (process-node-list title)))
</text>
<text>	  (if biblio-number
</text>
<text>	      (make sequence
</text>
<text>		(literal &quot;[&quot; (number-&gt;string (bibentry-number target)) &quot;]&quot;))
</text>
<text>	      (if label
</text>
<text>		  (make sequence
</text>
<text>		    (literal &quot;[&quot; label &quot;]&quot;))
</text>
<text>		  (if (equal? (gi abbrev) (normalize &quot;abbrev&quot;))
</text>
<text>		      (make sequence
</text>
<text>			(process-node-list abbrev))
</text>
<text>		      (make sequence
</text>
<text>			(literal &quot;[&quot; 
</text>
<text>				 (attribute-string (normalize &quot;id&quot;) target)
</text>
<text>				 &quot;]&quot;)))))))))
</text>
<text>
</text>
<text>(define (xref-callout target)
</text>
<text>  (make link 
</text>
<text>    destination: (node-list-address target)
</text>
<text>    ($callout-mark$ target)))
</text>
<text>
</text>
<text>(define (xref-listitem target)
</text>
<text>  (if (equal? (gi (parent target)) (normalize &quot;orderedlist&quot;))
</text>
<text>      (make link 
</text>
<text>	destination: (node-list-address target)
</text>
<text>	(literal (orderedlist-listitem-label-recursive target)))
</text>
<text>      (error 
</text>
<text>       (string-append &quot;XRef to LISTITEM only supported in ORDEREDLISTs&quot;))))
</text>
<text>
</text>
<text>
</text>
<text>(define (xref-question target)
</text>
<text>  (make link
</text>
<text>    destination: (node-list-address target)
</text>
<text>    (make sequence
</text>
<text>      (literal (gentext-element-name target))
</text>
<text>      (literal (gentext-label-title-sep target))
</text>
<text>      (literal (question-answer-label target)))))
</text>
<text>
</text>
<text>(define (xref-answer target)
</text>
<text>  (xref-question target))
</text>
<text>
</text>
<text>(mode xref-endterm-mode
</text>
<text>  (default
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children-trim))))
</text>
<text>
</text>
<text>(define (xreflabel-sosofo xreflabel)
</text>
<text>  (make sequence
</text>
<text>    font-posture: 'italic
</text>
<text>    (literal xreflabel)))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>;; Returns the title of the element as a sosofo, italicized for xref.
</text>
<text>;;
</text>
<text>(define (element-title-xref-sosofo nd)
</text>
<text>  (make sequence
</text>
<text>    font-posture: 'italic
</text>
<text>    (element-title-sosofo nd)))
</text>
<text>
</text>
<text>(mode xref-title-mode
</text>
<text>  (element title
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element citetitle
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element refname
</text>
<text>    (process-children-trim))
</text>
<text>
</text>
<text>  (element refentrytitle
</text>
<text>    (process-children-trim))
</text>
<text>)
</text>
<text>
</text>
<text>(mode xref-varlistentry-mode
</text>
<text>  (element term
</text>
<text>    ($italic-seq$)))
</text>
<text>
</text>
<text>(mode xref-glossentry-mode
</text>
<text>  (element glossterm
</text>
<text>    ($italic-seq$)))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>(define (element-page-number-sosofo target)
</text>
<text>  (with-mode pageno-mode
</text>
<text>	(process-node-list target)))
</text>
<text>
</text>
<text>(mode pageno-mode
</text>
<text>  (default
</text>
<text>    (current-node-page-number-sosofo)))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>
</text>
<text>    </text>
<text>
</text>
<text>;; $Id: dblists.dsl,v 1.7 2003/02/17 02:42:44 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; =============================== LISTS ================================
</text>
<text>
</text>
<text>(define (BULLTREAT bullfcn ilevel override mark)
</text>
<text>  (cond
</text>
<text>   (override (bullfcn override ilevel))
</text>
<text>   (mark (bullfcn mark ilevel))
</text>
<text>   (else (bullfcn &quot;bullet&quot; ilevel))))
</text>
<text>
</text>
<text>(define (BULLSTR m lvl)
</text>
<text>  (dingbat m))
</text>
<text>
</text>
<text>(define (BULLSHIFT m lvl)
</text>
<text>  (let ((md (case-fold-down m)))
</text>
<text>    (case md
</text>
<text>	  ((&quot;bullet&quot;) 0.0em)
</text>
<text>	  ((&quot;box&quot;) (if (= lvl 1) 0.0em 0.1em))
</text>
<text>	  ((&quot;checkbox&quot;) (if (= lvl 1) 0.0em 0.1em))
</text>
<text>	  ((&quot;check&quot;) 0.0em)
</text>
<text>	  ((&quot;checkedbox&quot;) 0.0em)
</text>
<text>	  ((&quot;dash&quot;) 0.0em)
</text>
<text>	  ((&quot;none&quot;) 0.0em)
</text>
<text>	  (else 0.0em))))
</text>
<text>
</text>
<text>(define (MSIZE m lvl f1 f2)
</text>
<text>  (if (= lvl 1)
</text>
<text>      (* %bf-size% f1)
</text>
<text>      (* %bf-size% f2)))
</text>
<text>
</text>
<text>(define (BULLSIZE m lvl)
</text>
<text>  (let ((md (case-fold-down m)))
</text>
<text>    (case md
</text>
<text>	  ((&quot;bullet&quot;) (MSIZE m lvl 0.8 0.72))
</text>
<text>	  ((&quot;box&quot;) (MSIZE m lvl 0.9 0.72))
</text>
<text>	  ((&quot;checkbox&quot;) (MSIZE m lvl 0.9 0.72))
</text>
<text>	  ((&quot;check&quot;) (MSIZE m lvl 1.0 1.0))
</text>
<text>	  ((&quot;checkedbox&quot;) (MSIZE m lvl 1.0 1.0))
</text>
<text>	  ((&quot;dash&quot;) (MSIZE m lvl 1.0 1.0))
</text>
<text>	  ((&quot;none&quot;) (MSIZE m lvl 1.0 1.0))
</text>
<text>	  (else (MSIZE m lvl 1.0 1.0)))))
</text>
<text>
</text>
<text>(define (OLSTEP) 0.9em)
</text>
<text>;;  (case
</text>
<text>;;   (modulo (length (hierarchical-number-recursive (normalize &quot;orderedlist&quot;))) 4)
</text>
<text>;;	((1) 1.4em)
</text>
<text>;;	((2) 1.4em)
</text>
<text>;;	((3) 1.4em)
</text>
<text>;;	((0) 1.4em)))
</text>
<text>
</text>
<text>(define (ILSTEP) 1.0em)
</text>
<text>
</text>
<text>(define (COSTEP) 1.5pi)
</text>
<text>
</text>
<text>;; Improve spacing on lists, remove extra space before..
</text>
<text>;; Suggested by Adam Di Carlo, adam@onshore.com
</text>
<text>(define ($list$)
</text>
<text>   (make display-group
</text>
<text>     start-indent: (if (INBLOCK?)
</text>
<text>		       (inherited-start-indent)
</text>
<text>		       (+ %block-start-indent% (inherited-start-indent)))
</text>
<text>     space-after:  (if (INLIST?) %para-sep% %block-sep%)))
</text>
<text>
</text>
<text>(element itemizedlist ($list$))
</text>
<text>
</text>
<text>(element (itemizedlist title)
</text>
<text>  (make paragraph
</text>
<text>    use: title-style
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(define (generic-list-item indent-step line-field)
</text>
<text>  (let* ((itemcontent (children (current-node)))
</text>
<text>         (first-child (node-list-first itemcontent))
</text>
<text>         (spacing (inherited-attribute-string (normalize &quot;spacing&quot;))))
</text>
<text>    (make display-group
</text>
<text>      start-indent: (+ (inherited-start-indent) indent-step)
</text>
<text>      (make paragraph
</text>
<text>        use: (cond
</text>
<text>              ((equal? (gi first-child) (normalize &quot;programlisting&quot;))
</text>
<text>               verbatim-style)
</text>
<text>              ((equal? (gi first-child) (normalize &quot;screen&quot;))
</text>
<text>               verbatim-style)
</text>
<text>              ((equal? (gi first-child) (normalize &quot;synopsis&quot;))
</text>
<text>               verbatim-style)
</text>
<text>              ((equal? (gi first-child) (normalize &quot;literallayout&quot;))
</text>
<text>               linespecific-style)
</text>
<text>              ((equal? (gi first-child) (normalize &quot;address&quot;))
</text>
<text>               linespecific-style)
</text>
<text>              (else
</text>
<text>               nop-style))
</text>
<text>        space-before: (if (equal? (normalize &quot;compact&quot;) spacing)
</text>
<text>                          0pt
</text>
<text>                          %para-sep%)
</text>
<text>        first-line-start-indent: (- indent-step)
</text>
<text>        (make sequence
</text>
<text>          line-field)
</text>
<text>	(with-mode listitem-content-mode
</text>
<text>	  (process-node-list first-child)))
</text>
<text>      (process-node-list (node-list-rest itemcontent)))))
</text>
<text>
</text>
<text>(define (process-listitem-content)
</text>
<text>  (if (absolute-first-sibling?) 
</text>
<text>      (make sequence
</text>
<text>	(process-children-trim))
</text>
<text>      (next-match)))
</text>
<text>
</text>
<text>(mode listitem-content-mode
</text>
<text>  (element (listitem programlisting) (process-listitem-content))
</text>
<text>  (element (listitem screen) (process-listitem-content))
</text>
<text>  (element (listitem synopsis) (process-listitem-content))
</text>
<text>  (element (listitem funcsynopsis) (process-listitem-content))
</text>
<text>  (element (listitem literallayout) (process-listitem-content))
</text>
<text>  (element (listitem address) (process-listitem-content))
</text>
<text>  (element (listitem para) (process-listitem-content))
</text>
<text>  (element (listitem formalpara) (process-listitem-content))
</text>
<text>  (element (listitem simpara) (process-listitem-content))
</text>
<text>)
</text>
<text>
</text>
<text>(element (itemizedlist listitem)
</text>
<text>  (let ((ilevel (length (hierarchical-number-recursive (normalize &quot;itemizedlist&quot;))))
</text>
<text>	(override (inherited-attribute-string (normalize &quot;override&quot;)))
</text>
<text>	(mark (inherited-attribute-string (normalize &quot;mark&quot;))))
</text>
<text>    (generic-list-item
</text>
<text>     (ILSTEP)
</text>
<text>     (if (or (and override
</text>
<text>		  (equal? (normalize override) (normalize &quot;none&quot;)))
</text>
<text>	     (and (not override)
</text>
<text>		  (equal? (normalize mark) (normalize &quot;none&quot;))))
</text>
<text>	 (make line-field
</text>
<text>	   font-size: (BULLTREAT BULLSIZE ilevel override mark)
</text>
<text>	   position-point-shift: (BULLTREAT BULLSHIFT ilevel override mark)
</text>
<text>	   field-width: (ILSTEP)
</text>
<text>	   (literal &quot;\no-break-space;&quot;))
</text>
<text>	 (make line-field
</text>
<text>	   font-size: (BULLTREAT BULLSIZE ilevel override mark)
</text>
<text>	   position-point-shift: (BULLTREAT BULLSHIFT ilevel override mark)
</text>
<text>	   field-width: (ILSTEP)
</text>
<text>	   (literal (BULLTREAT BULLSTR ilevel override mark)))))))
</text>
<text>
</text>
<text>(element orderedlist ($list$))
</text>
<text>
</text>
<text>(element (orderedlist title)
</text>
<text>  (make paragraph
</text>
<text>    use: title-style
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element (orderedlist listitem)
</text>
<text>  (let* ((listitems (select-elements (children (parent (current-node)))
</text>
<text>				     (normalize &quot;listitem&quot;)))
</text>
<text>	 (itemnumber (orderedlist-listitem-number (current-node)))
</text>
<text>	 (displaynum (if (string=? (inherited-attribute-string 
</text>
<text>				    (normalize &quot;inheritnum&quot;))
</text>
<text>				   (normalize &quot;inherit&quot;))
</text>
<text>			 (let loop ((nd (current-node)) (inum &quot;&quot;))
</text>
<text>			   (if (node-list-empty? nd)
</text>
<text>			       inum
</text>
<text>			       (if (and (equal? (gi nd) 
</text>
<text>						(normalize &quot;listitem&quot;))
</text>
<text>					(equal? (gi (parent nd)) 
</text>
<text>						(normalize &quot;orderedlist&quot;)))
</text>
<text>				   (loop (parent nd)
</text>
<text>					 (string-append
</text>
<text>					  (number-with-numeration 
</text>
<text>					   nd
</text>
<text>					   (inherited-attribute-string
</text>
<text>					    (normalize &quot;numeration&quot;) nd)
</text>
<text>					   (orderedlist-listitem-number nd))
</text>
<text>					  (if (string=? inum &quot;&quot;)
</text>
<text>					      &quot;&quot;
</text>
<text>					      &quot;.&quot;)
</text>
<text>					  inum))
</text>
<text>				   (loop (parent nd) inum))))
</text>
<text>			 (number-with-numeration 
</text>
<text>			  (current-node)
</text>
<text>			  (inherited-attribute-string (normalize &quot;numeration&quot;))
</text>
<text>			  (orderedlist-listitem-number (current-node)))))
</text>
<text>	 (listcount (+ (node-list-length listitems) itemnumber))
</text>
<text>	 (factor    (cond 
</text>
<text>		     ((&gt; listcount 999) 4)
</text>
<text>		     ((&gt; listcount 99) 3)
</text>
<text>		     ((&gt; listcount 9) 2)
</text>
<text>		     (else 2))))
</text>
<text>    (generic-list-item
</text>
<text>     (* (OLSTEP) factor)
</text>
<text>     (make line-field
</text>
<text>       field-width: (* (OLSTEP) factor)
</text>
<text>       field-align: 'end
</text>
<text>       (literal displaynum
</text>
<text>		(gentext-label-title-sep (normalize &quot;orderedlist&quot;)))))))
</text>
<text>
</text>
<text>(define (number-with-numeration node numeration number)
</text>
<text>  (let* ((depth (length (hierarchical-number-recursive (normalize &quot;orderedlist&quot;) node)))
</text>
<text>	 (rawnum (cond
</text>
<text>		  ((equal? numeration (normalize &quot;arabic&quot;)) 1)
</text>
<text>		  ((equal? numeration (normalize &quot;loweralpha&quot;)) 2)
</text>
<text>		  ((equal? numeration (normalize &quot;lowerroman&quot;)) 3)
</text>
<text>		  ((equal? numeration (normalize &quot;upperalpha&quot;)) 4)
</text>
<text>		  ((equal? numeration (normalize &quot;upperroman&quot;)) 0)
</text>
<text>		  (else (modulo depth 5))))
</text>
<text>	 (num (case rawnum
</text>
<text>		((1) (format-number number &quot;1&quot;))
</text>
<text>		((2) (format-number number &quot;a&quot;))
</text>
<text>		((3) (format-number number &quot;i&quot;))
</text>
<text>		((4) (format-number number &quot;A&quot;))
</text>
<text>		((0) (format-number number &quot;I&quot;)))))
</text>
<text>    (if (&gt; depth 5) 
</text>
<text>	(string-append &quot;(&quot; num &quot;)&quot;)
</text>
<text>	num)))
</text>
<text>  
</text>
<text>(element variablelist
</text>
<text>  (let* ((termlength (if (attribute-string (normalize &quot;termlength&quot;))
</text>
<text>			 (string-&gt;number 
</text>
<text>			  (attribute-string (normalize &quot;termlength&quot;)))
</text>
<text>			 %default-variablelist-termlength%))
</text>
<text>	 (maxlen     (if (&gt; termlength %default-variablelist-termlength%)
</text>
<text>			    termlength
</text>
<text>			    %default-variablelist-termlength%))
</text>
<text>	 (too-long?  (variablelist-term-too-long? termlength)))
</text>
<text>    (make display-group
</text>
<text>      start-indent: (if (INBLOCK?)
</text>
<text>			(inherited-start-indent)
</text>
<text>			(+ %block-start-indent% (inherited-start-indent)))
</text>
<text>      space-before: (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>      space-after:  (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>
</text>
<text>      (if (and (or (and termlength (not too-long?))
</text>
<text>		   %always-format</text>
<text>-variablelist-as-table%)
</text>
<text>	       (or %may-format-variablelist-as-table%
</text>
<text>		   %always-format-variablelist-as-table%))
</text>
<text>	  (make table
</text>
<text>	    space-before: (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>	    space-after:  (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>	    start-indent: (if (INBLOCK?)
</text>
<text>			      (inherited-start-indent)
</text>
<text>			      (+ %block-start-indent% 
</text>
<text>				 (inherited-start-indent)))
</text>
<text>
</text>
<text>;; Calculate the width of the column containing the terms...
</text>
<text>;;
</text>
<text>;; maxlen       in        (inherited-font-size)     72pt
</text>
<text>;;        x ---------- x ----------------------- x ------ = width
</text>
<text>;;           12 chars              10pt              in
</text>
<text>;;
</text>
<text>	    (make table-column
</text>
<text>	      column-number: 1
</text>
<text>	      width: (* (* (/ maxlen 12) (/ (inherited-font-size) 10pt)) 72pt))
</text>
<text>	    (with-mode variablelist-table
</text>
<text>	      (process-children)))
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>(element varlistentry (process-children))
</text>
<text>
</text>
<text>(element (varlistentry term)
</text>
<text>    (make paragraph
</text>
<text>	  space-before: (if (first-sibling?)
</text>
<text>			    %block-sep%
</text>
<text>			    0pt)
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  first-line-start-indent: 0pt
</text>
<text>	  start-indent: (inherited-start-indent)
</text>
<text>	  (process-children)))
</text>
<text>
</text>
<text>(element (varlistentry listitem)
</text>
<text>  (let ((vle-indent 2em)) ; this ought to be in dbparam!
</text>
<text>    (generic-list-item 
</text>
<text>     vle-indent
</text>
<text>     (make line-field
</text>
<text>       field-width: vle-indent
</text>
<text>       (literal &quot;\no-break-space;&quot;)))))
</text>
<text>
</text>
<text>(mode variablelist-table
</text>
<text>  (element varlistentry
</text>
<text>    (let* ((terms      (select-elements (children (current-node))
</text>
<text>					(normalize &quot;term&quot;)))
</text>
<text>	   (listitem   (select-elements (children (current-node))
</text>
<text>					(normalize &quot;listitem&quot;)))
</text>
<text>	   (termlen    (if (attribute-string (normalize &quot;termlength&quot;)
</text>
<text>					     (parent (current-node)))
</text>
<text>			   (string-&gt;number (attribute-string
</text>
<text>					    (normalize &quot;termlength&quot;)
</text>
<text>					    (parent (current-node))))
</text>
<text>			   %default-variablelist-termlength%))
</text>
<text>	   (too-long? (varlistentry-term-too-long? (current-node) termlen)))
</text>
<text>      (if too-long?
</text>
<text>	  (make sequence
</text>
<text>	    (make table-row
</text>
<text>	      cell-before-row-margin: %para-sep%
</text>
<text>
</text>
<text>	      (make table-cell
</text>
<text>		column-number: 1
</text>
<text>		n-columns-spanned: 2
</text>
<text>		n-rows-spanned: 1
</text>
<text>		(process-node-list terms)))
</text>
<text>	    (make table-row
</text>
<text>	      (make table-cell
</text>
<text>		column-number: 1
</text>
<text>		n-columns-spanned: 1
</text>
<text>		n-rows-spanned: 1
</text>
<text>		;; where terms would have gone
</text>
<text>		(empty-sosofo))
</text>
<text>	      (make table-cell
</text>
<text>		column-number: 2
</text>
<text>		n-columns-spanned: 1
</text>
<text>		n-rows-spanned: 1
</text>
<text>		(process-node-list listitem))))
</text>
<text>	  (make table-row
</text>
<text>	    cell-before-row-margin: %para-sep%
</text>
<text>
</text>
<text>	    (make table-cell
</text>
<text>	      column-number: 1
</text>
<text>	      n-columns-spanned: 1
</text>
<text>	      n-rows-spanned: 1
</text>
<text>	      (process-node-list terms))
</text>
<text>	    (make table-cell
</text>
<text>	      column-number: 2
</text>
<text>	      n-columns-spanned: 1
</text>
<text>	      n-rows-spanned: 1
</text>
<text>	      (process-node-list listitem))))))
</text>
<text>  
</text>
<text>  (element (varlistentry term)
</text>
<text>    (make sequence
</text>
<text>      (process-children-trim)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element (varlistentry listitem)
</text>
<text>    (make display-group
</text>
<text>      start-indent: 0pt
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  ;; Suggested by Nick NICHOLAS, nicholas@uci.edu
</text>
<text>  (element (variablelist title)
</text>
<text>    (make table-row
</text>
<text>      cell-before-row-margin: %para-sep%
</text>
<text>      (make table-cell
</text>
<text>	column-number: 1
</text>
<text>	n-columns-spanned: 2
</text>
<text>	n-rows-spanned: 1
</text>
<text>	(make paragraph
</text>
<text>	  use: title-style
</text>
<text>	  start-indent: 0pt
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>)
</text>
<text>
</text>
<text>(define (simplelist-table majororder cols members)
</text>
<text>  (let* ((termcount (node-list-length members))
</text>
<text>	 (rows (quotient (+ termcount (- cols 1)) cols)))
</text>
<text>    (make table
</text>
<text>      space-before: (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>      space-after:  (if (INLIST?) %para-sep% %block-sep%)
</text>
<text>      start-indent: (if (INBLOCK?)
</text>
<text>			(inherited-start-indent)
</text>
<text>			(+ %block-start-indent% (inherited-start-indent)))
</text>
<text>      (if %simplelist-column-width%
</text>
<text>	  (let colloop ((colnum 1))
</text>
<text>	    (if (&gt; colnum cols)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (make table-column
</text>
<text>		    width: %simplelist-column-width%)
</text>
<text>		  (colloop (+ colnum 1)))))
</text>
<text>	  (empty-sosofo))
</text>
<text>      (let rowloop ((rownum 1))
</text>
<text>	(if (&gt; rownum rows)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (simplelist-row rownum majororder rows cols members)
</text>
<text>	      (rowloop (+ rownum 1))))))))
</text>
<text>
</text>
<text>(define (simplelist-row rownum majororder rows cols members)
</text>
<text>  (make table-row
</text>
<text>    (let colloop ((colnum 1))
</text>
<text>      (if (&gt; colnum cols)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make sequence
</text>
<text>	    (simplelist-entry rownum colnum majororder rows cols members)
</text>
<text>	    (colloop (+ colnum 1)))))))
</text>
<text>
</text>
<text>(define (simplelist-entry rownum colnum majororder rows cols members)
</text>
<text>  (let ((membernum (if (equal? majororder 'row)
</text>
<text>		       (+ (* (- rownum 1) cols) colnum)
</text>
<text>		       (+ (* (- colnum 1) rows) rownum))))
</text>
<text>    (let loop ((nl members) (count membernum))
</text>
<text>      (if (&lt;= count 1)
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: colnum
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>;; removed to avoid dependency between dblists and dbtable
</text>
<text>;;	    cell-before-row-margin: %cals-cell-before-row-margin%
</text>
<text>;;	    cell-after-row-margin: %cals-cell-after-row-margin%
</text>
<text>;;	    cell-before-column-margin: %cals-cell-before-column-margin%
</text>
<text>;;	    cell-after-column-margin: %cals-cell-after-column-margin%
</text>
<text>;;	    start-indent: %cals-cell-content-start-indent%
</text>
<text>;;	    end-indent: %cals-cell-content-end-indent%
</text>
<text>;; is another variable needed to parameterize these settings, or are
</text>
<text>;; constants good enough?
</text>
<text>	    cell-before-row-margin: 0pt
</text>
<text>	    cell-after-row-margin: 0pt
</text>
<text>	    cell-before-column-margin: 3pt
</text>
<text>	    cell-after-column-margin: 3pt
</text>
<text>	    start-indent: 0pt
</text>
<text>	    end-indent: 0pt
</text>
<text>	    quadding: 'start
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(literal &quot;\no-break-space;&quot;)
</text>
<text>		(process-node-list (node-list-first nl))))
</text>
<text>	  (loop (node-list-rest nl) (- count 1))))))
</text>
<text>
</text>
<text>(element (entry simplelist) 
</text>
<text>  ;; This is to avoid possibly putting tables inside tables, which don't
</text>
<text>  ;; work in some backends (e.g. RTF)
</text>
<text>  (make paragraph
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element (entry simplelist member)
</text>
<text>  ;; This is to avoid possibly putting tables inside tables, which don't
</text>
<text>  ;; work in some backends (e.g. RTF)
</text>
<text>  (let ((type (inherited-attribute-string (normalize &quot;type&quot;))))
</text>
<text>    (if (equal? type (normalize &quot;inline&quot;))
</text>
<text>	(next-match)
</text>
<text>	(make sequence
</text>
<text>	  (if (equal? (child-number) 1)
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (make paragraph-break))
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>(element simplelist
</text>
<text>  (let ((type (attribute-string (normalize &quot;type&quot;)))
</text>
<text>	(cols (if (attribute-string (normalize &quot;columns&quot;))
</text>
<text>		  (if (&gt; (string-&gt;number (attribute-string (normalize &quot;columns&quot;))) 0)
</text>
<text>		      (string-&gt;number (attribute-string (normalize &quot;columns&quot;)))
</text>
<text>		      1)
</text>
<text>		  1))
</text>
<text>	(members (select-elements (children (current-node)) (normalize &quot;member&quot;))))
</text>
<text>    (cond
</text>
<text>       ((equal? type (normalize &quot;inline&quot;)) 
</text>
<text>	(process-children))
</text>
<text>       ((equal? type (normalize &quot;vert&quot;))
</text>
<text>	(simplelist-table 'column cols members))
</text>
<text>       ((equal? type (normalize &quot;horiz&quot;))
</text>
<text>	(simplelist-table 'row    cols members)))))
</text>
<text>
</text>
<text>(element member
</text>
<text>  (let ((type (inherited-attribute-string (normalize &quot;type&quot;))))
</text>
<text>    (if (equal? type (normalize &quot;inline&quot;))
</text>
<text>	(make sequence
</text>
<text>	  (process-children)
</text>
<text>	  (if (not (last-sibling?))
</text>
<text>	      (literal &quot;, &quot;)
</text>
<text>	      (literal &quot;&quot;)))
</text>
<text>	(make paragraph
</text>
<text>	  quadding: 'start
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>(element segmentedlist (process-children))
</text>
<text>(element (segmentedlist title) ($lowtitle$ 2 4))
</text>
<text>
</text>
<text>(element segtitle (empty-sosofo))
</text>
<text>(mode seglist-in-seg
</text>
<text>  (element segtitle
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(element seglistitem ($paragraph$))
</text>
<text>(element seg 
</text>
<text>  (let* ((seg-num (child-number (current-node)))
</text>
<text>	 (seglist (parent (parent (current-node))))
</text>
<text>	 (segtitle (nth-node (select-elements 
</text>
<text>			 (descendants seglist) (normalize &quot;segtitle&quot;)) seg-num)))
</text>
<text>
</text>
<text>    ;; Note: segtitle is only going to be the right thing in a well formed
</text>
<text>    ;; SegmentedList.  If there are too many Segs or too few SegTitles,
</text>
<text>    ;; you'll get something odd...maybe an error
</text>
<text>
</text>
<text>    (with-mode seglist-in-seg
</text>
<text>      (make paragraph
</text>
<text>	(make sequence
</text>
<text>	  font-family-name: %title-font-family%
</text>
<text>	  font-weight: 'bold
</text>
<text>	  (sosofo-append (process-node-list segtitle))
</text>
<text>	  (literal &quot;: &quot;))
</text>
<text>	(process-children)))))
</text>
<text>
</text>
<text>(element calloutlist ($list$))
</text>
<text>(element (calloutlist title) ($lowtitle$ 2 4))
</text>
<text>
</text>
<text>(element callout
</text>
<text>  (let* ((calloutcontent (children (current-node)))
</text>
<text>	 (arearefs (inherited-attribute-string (normalize &quot;arearefs&quot;)))
</text>
<text>	 (idlist (split arearefs)))
</text>
<text>    (make sequence
</text>
<text>      start-indent: (+ (inherited-start-indent) (COSTEP))
</text>
<text>      (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	first-line-start-indent: (- (COSTEP))
</text>
<text>	(make line-field
</text>
<text>	  field-width: (COSTEP)
</text>
<text>	  (let loop ((ids idlist))
</text>
<text>	    (if (null? ids)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  ($callout-mark$ (element-with-id (car ids)))
</text>
<text>		  (loop (cdr ids))))))
</text>
<text>	(process-node-list (children (node-list-first calloutcontent))))
</text>
<text>
</text>
<text>      (process-node-list (node-list-rest calloutcontent)))))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dblot.dsl,v 1.2 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; need test cases to do toc/lot; do these later
</text>
<text>
</text>
<text>(element toc (empty-sosofo))
</text>
<text>(element (toc title) (empty-sosofo))
</text>
<text>(element tocfront ($paragraph$))
</text>
<text>(element tocentry ($paragraph$))
</text>
<text>(element tocpart (process-children))
</text>
<text>(element tocchap (process-children))
</text>
<text>(element toclevel1 (process-children))
</text>
<text>(element toclevel2 (process-children))
</text>
<text>(element toclevel3 (process-children))
</text>
<text>(element toclevel4 (process-children))
</text>
<text>(element toclevel5 (process-children))
</text>
<text>(element tocback ($paragraph$))
</text>
<text>(element lot (empty-sosofo))
</text>
<text>(element (lot title) (empty-sosofo))
</text>
<text>(element lotentry ($paragraph$))
</text>
<text>
</text>
<text>     </text>
<text>
</text>
<text>;; $Id: dbmath.dsl,v 1.2 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(define %equation-autolabel% #f)
</text>
<text>
</text>
<text>(element equation
</text>
<text>  ;; derived from $semiformal-object$
</text>
<text>  (if (node-list-empty? (select-elements (children (current-node))
</text>
<text>					 (normalize &quot;title&quot;)))
</text>
<text>      ($informal-object$ %informalequation-rules% %informalequation-rules%)
</text>
<text>      ($formal-object$ %informalequation-rules% %informalequation-rules%)))
</text>
<text>
</text>
<text>(element (equation title) (empty-sosofo))
</text>
<text>(element (equation alt) (empty-sosofo))
</text>
<text>(element (equation graphic) 
</text>
<text>  (make paragraph
</text>
<text>    space-before: 0pt
</text>
<text>    space-after: 0pt
</text>
<text>    ($img$ (current-node) #t)))
</text>
<text>
</text>
<text>(element informalequation
</text>
<text>  ;; Derived from informal-object
</text>
<text>  (let ((rule-before? %informalequation-rules%)
</text>
<text>	(rule-after? %informalequation-rules%))
</text>
<text>    (if %equation-autolabel%
</text>
<text>	(make display-group
</text>
<text>	  space-before: %block-sep%
</text>
<text>	  space-after:  %block-sep%
</text>
<text>	  start-indent: (+ %block-start-indent% 
</text>
<text>			   (inherited-start-indent))
</text>
<text>	  keep-with-next?: (object-title-after)
</text>
<text>
</text>
<text>	  (if rule-before?
</text>
<text>	      (make rule
</text>
<text>		orientation: 'horizontal
</text>
<text>		line-thickness: %object-rule-thickness%
</text>
<text>		display-alignment: 'center
</text>
<text>		space-after: (/ %block-sep% 2)
</text>
<text>		keep-with-next?: #t)
</text>
<text>	      (empty-sosofo))
</text>
<text>
</text>
<text>	  (make table
</text>
<text>	    (make table-column
</text>
<text>	      column-number: 1
</text>
<text>	      width: (- %text-width% 
</text>
<text>			(+ (inherited-start-indent) 
</text>
<text>			   (inherited-end-indent) 
</text>
<text>			   1in)))
</text>
<text>	    (make table-column
</text>
<text>	      column-number: 2
</text>
<text>	      width: 1in)
</text>
<text>	    (make table-row
</text>
<text>	      (make table-cell
</text>
<text>		cell-row-alignment: 'center
</text>
<text>		start-indent: 0pt
</text>
<text>		end-indent: 0pt
</text>
<text>		(process-children))
</text>
<text>	      (make table-cell
</text>
<text>		cell-row-alignment: 'center
</text>
<text>		quadding: 'end
</text>
<text>		start-indent: 0pt
</text>
<text>		end-indent: 0pt
</text>
<text>		(make paragraph
</text>
<text>		  (literal &quot;(&quot; (element-label (current-node)) &quot;)&quot;)))))
</text>
<text>
</text>
<text>	  (if rule-after?
</text>
<text>	      (make rule
</text>
<text>		orientation: 'horizontal
</text>
<text>		line-thickness: %object-rule-thickness%
</text>
<text>		display-alignment: 'center
</text>
<text>		space-before: (/ %block-sep% 2)
</text>
<text>		keep-with-previous?: #t)
</text>
<text>	      (empty-sosofo)))
</text>
<text>	($informal-object$ rule-before? rule-after?))))
</text>
<text>
</text>
<text>(element (informalequation alt) (empty-sosofo))
</text>
<text>(element (informalequation graphic) 
</text>
<text>  (make paragraph
</text>
<text>    space-before: 0pt
</text>
<text>    space-after: 0pt
</text>
<text>    quadding: 'end
</text>
<text>    ($img$ (current-node) #t)))
</text>
<text>
</text>
<text>(element inlineequation ($inline-object$))
</text>
<text>(element (inlineequation alt) (empty-sosofo))
</text>
<text>(element (inlineequation graphic) 
</text>
<text>  (make sequence
</text>
<text>    ($img$ (current-node) #f)))
</text>
<text>
</text>
<text>    </text>
<text>
</text>
<text>;; $Id: dbmsgset.dsl,v 1.2 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ======================== ERROR MESSAGES (ETC.) =======================
</text>
<text>
</text>
<text>(element msgset (process-children))
</text>
<text>
</text>
<text>(element msgentry ($informal-object$))
</text>
<text>
</text>
<text>(element simplemsgentry ($informal-object$))
</text>
<text>
</text>
<text>(element msg
</text>
<text>  (make display-group
</text>
<text>	font-weight: 'bold
</text>
<text>	font-family-name: %mono-font-family%
</text>
<text>	(process-children)))
</text>
<text>
</text>
<text>(element msgmain (process-children))
</text>
<text>
</text>
<text>(element msgsub
</text>
<text>  (make display-group
</text>
<text>	start-indent: (+ (inherited-start-indent) (ILSTEP))
</text>
<text>	(process-children)))
</text>
<text>
</text>
<text>(element msgrel (empty-sosofo))
</text>
<text>
</text>
<text>(element msgtext (process-children))
</text>
<text>
</text>
<text>(element msginfo ($indent-para-container$))
</text>
<text>
</text>
<text>(define ($genhead-para$ headtext)
</text>
<text>  (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	(make sequence
</text>
<text>	      font-weight: 'bold
</text>
<text>	      (literal
</text>
<text>	        (string-append headtext &quot;: &quot;)))
</text>
<text>	(process-children)))
</text>
<text>
</text>
<text>(element msglevel ($genhead-para$ (gentext-element-name (current-node))))
</text>
<text>(element msgorig ($genhead-para$ (gentext-element-name (current-node))))
</text>
<text>(element msgaud ($genhead-para$ (gentext-element-name (current-node))))
</text>
<text>
</text>
<text>(element msgexplan ($indent-para-container$))
</text>
<text>(element (msgexplan title) ($runinhead$))
</text>
<text>(element (msgexplan para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dbprint.dsl,v 1.4 2003/02/17 02:44:18 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(define (HSIZE n)
</text>
<text>  (let ((m (if (&lt; n 0) 0 n)))
</text>
<text>    (* %bf-size%
</text>
<text>       (expt %hsize-bump-factor% m))))
</text>
<text>
</text>
<text>(define (print-backend)
</text>
<text>  (cond 
</text>
<text>   (tex-backend 'tex)
</text>
<text>   (mif-backend 'mif)
</text>
<text>   (rtf-backend 'rtf)
</text>
<text>   (else default-backend)))
</text>
<text>
</text>
<text>;; ====================== COMMON STYLE TEMPLATES =======================
</text>
<text>
</text>
<text>(define ($block-container$)
</text>
<text>  (make display-group
</text>
<text>	space-before: %block-sep%
</text>
<text>	space-after: %block-sep%
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	(process-children)))
</text>
<text>
</text>
<text>(define (is-first-para #!optional (para (current-node)))
</text>
<text>  ;; A paragraph is the first paragraph if it is preceded by a title
</text>
<text>  ;; (or bridgehead) and the only elements that intervene between </text>
<text>the
</text>
<text>  ;; title and the paragraph are *info elements, indexterms, and beginpage.
</text>
<text>  ;;
</text>
<text>  (let loop ((nd (ipreced para)))
</text>
<text>    (if (node-list-empty? nd)
</text>
<text>	;; We've run out of nodes. We still might be the first paragraph
</text>
<text>	;; preceded by a title if the parent element has an implied
</text>
<text>	;; title.
</text>
<text>	(if (equal? (element-title-string (parent para)) &quot;&quot;)
</text>
<text>	    #f  ;; nope
</text>
<text>	    #t) ;; yep
</text>
<text>	(if (or (equal? (gi nd) (normalize &quot;title&quot;))
</text>
<text>		(equal? (gi nd) (normalize &quot;titleabbrev&quot;))
</text>
<text>		(equal? (gi nd) (normalize &quot;bridgehead&quot;)))
</text>
<text>	    #t
</text>
<text>	    (if (or (not (equal? (node-property 'class-name nd) 'element))
</text>
<text>		    (member (gi nd) (info-element-list)))
</text>
<text>		(loop (ipreced nd))
</text>
<text>		#f)))))
</text>
<text>
</text>
<text>(define (dsssl-language-code #!optional (node (current-node)))
</text>
<text>  (let* ((lang     ($lang$))
</text>
<text>	 (langcode (if (&gt; (string-index lang &quot;_&quot;) 0)
</text>
<text>		       (substring lang 0 (string-index lang &quot;_&quot;))
</text>
<text>		       lang)))
</text>
<text>    (string-&gt;symbol (case-fold-up langcode))))
</text>
<text>
</text>
<text>(define (dsssl-country-code #!optional (node (current-node)))
</text>
<text>  (let* ((lang     ($lang$))
</text>
<text>	 (ctrycode (if (&gt; (string-index lang &quot;_&quot;) 0)
</text>
<text>		       (substring lang
</text>
<text>				  (+ (string-index lang &quot;_&quot;) 1)
</text>
<text>				  (string-length lang))
</text>
<text>		       #f)))
</text>
<text>    (if ctrycode
</text>
<text>	(string-&gt;symbol (case-fold-up ctrycode))
</text>
<text>	#f)))
</text>
<text>
</text>
<text>(define ($paragraph$)
</text>
<text>  (if (or (equal? (print-backend) 'tex)
</text>
<text>	  (equal? (print-backend) #f))
</text>
<text>      ;; avoid using country: characteristic because of a JadeTeX bug...
</text>
<text>      (make paragraph
</text>
<text>	first-line-start-indent: (if (is-first-para)
</text>
<text>				     %para-indent-firstpara%
</text>
<text>				     %para-indent%)
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	quadding: %default-quadding%
</text>
<text>	hyphenate?: %hyphenation%
</text>
<text>	language: (dsssl-language-code)
</text>
<text>	(process-children-trim))
</text>
<text>      (make paragraph
</text>
<text>	first-line-start-indent: (if (is-first-para)
</text>
<text>				     %para-indent-firstpara%
</text>
<text>				     %para-indent%)
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	quadding: %default-quadding%
</text>
<text>	hyphenate?: %hyphenation%
</text>
<text>	language: (dsssl-language-code)
</text>
<text>	country: (dsssl-country-code)
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>(define ($para-container$)
</text>
<text>  (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	start-indent: (if (member (current-node) (outer-parent-list))
</text>
<text>			  %body-start-indent%
</text>
<text>			  (inherited-start-indent))
</text>
<text>	(process-children-trim)))
</text>
<text>
</text>
<text>(define ($indent-para-container$)
</text>
<text>  (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	start-indent: (+ (inherited-start-indent) (* (ILSTEP) 2))
</text>
<text>	quadding: %default-quadding%
</text>
<text>	(process-children-trim)))
</text>
<text>
</text>
<text>(define nop-style
</text>
<text>  ;; a nop for use:
</text>
<text>  (style
</text>
<text>      font-family-name: (inherited-font-family-name)
</text>
<text>      font-weight: (inherited-font-weight)
</text>
<text>      font-size: (inherited-font-size)))
</text>
<text>
</text>
<text>(define default-text-style
</text>
<text>  (style
</text>
<text>   font-size: %bf-size%
</text>
<text>   font-weight: 'medium
</text>
<text>   font-posture: 'upright
</text>
<text>   font-family-name: %body-font-family%
</text>
<text>   line-spacing: (* %bf-size% %line-spacing-factor%)))
</text>
<text>
</text>
<text>(define ($bold-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-weight: 'bold
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($italic-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-posture: 'italic
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($bold-italic-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-weight: 'bold
</text>
<text>    font-posture: 'italic
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($mono-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (let ((%factor% (if %verbatim-size-factor% 
</text>
<text>		      %verbatim-size-factor% 
</text>
<text>		      1.0)))
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %mono-font-family%
</text>
<text>      font-size: (* (inherited-font-size) %factor%)
</text>
<text>      sosofo)))
</text>
<text>
</text>
<text>(define ($italic-mono-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-family-name: %mono-font-family%
</text>
<text>    font-posture: 'italic
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($bold-mono-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-family-name: %mono-font-family%
</text>
<text>    font-weight: 'bold
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($score-seq$ stype #!optional (sosofo (process-children)))
</text>
<text>  (make score
</text>
<text>    type: stype
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($charseq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define ($guilabel-seq$ #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-family-name: %guilabel-font-family%
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>;; Stolen from a posting by James on dssslist
</text>
<text>(define *small-caps*
</text>
<text>  (letrec ((signature (* #o375 256))
</text>
<text>	   (make-afii
</text>
<text>	    (lambda (n)
</text>
<text>	      (glyph-id (string-append &quot;ISO/IEC 10036/RA//Glyphs::&quot;
</text>
<text>				       (number-&gt;string n)))))
</text>
<text>	   (gen
</text>
<text>	    (lambda (from count)
</text>
<text>	      (if (= count 0)
</text>
<text>		  '()
</text>
<text>		  (cons (cons (make-afii from)
</text>
<text>			      (make-afii (+ from signature)))
</text>
<text>			(gen (+ 1 from)
</text>
<text>			     (- count 1)))))))
</text>
<text>    (glyph-subst-table (gen #o141 26))))
</text>
<text>
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbprocdr.dsl,v 1.2 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================= PROCEDURES =============================
</text>
<text>
</text>
<text>(define (PROCSTEP ilvl)
</text>
<text>  (if (&gt; ilvl 1) 2.0em 1.8em))
</text>
<text>
</text>
<text>(element procedure
</text>
<text>  (if (node-list-empty? (select-elements (children (current-node)) (normalize &quot;title&quot;)))
</text>
<text>      ($informal-object$)
</text>
<text>      ($formal-object$)))
</text>
<text>
</text>
<text>(element (procedure title) (empty-sosofo))
</text>
<text>
</text>
<text>(element substeps
</text>
<text>  (make display-group
</text>
<text>	space-before: %para-sep%
</text>
<text>	space-after: %para-sep%
</text>
<text>	start-indent: (+ (inherited-start-indent) (PROCSTEP 2))))
</text>
<text>
</text>
<text>(element step
</text>
<text>  (let ((stepcontent (children (current-node)))
</text>
<text>	(ilevel (length (hierarchical-number-recursive (normalize &quot;step&quot;)))))
</text>
<text>    (make sequence
</text>
<text>      start-indent: (+ (inherited-start-indent) (PROCSTEP ilevel))
</text>
<text>
</text>
<text>      (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	first-line-start-indent: (- (PROCSTEP ilevel))
</text>
<text>	(make line-field
</text>
<text>	  field-width: (PROCSTEP ilevel)
</text>
<text>	  (literal ($proc-step-number$ (current-node))))
</text>
<text>	(process-node-list (children (node-list-first stepcontent))))
</text>
<text>      (process-node-list (node-list-rest stepcontent)))))
</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dbrfntry.dsl,v 1.3 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; =========================== REFERENCE PAGES ==========================
</text>
<text>
</text>
<text>;;(element reference ($component$))
</text>
<text>
</text>
<text>(element reference
</text>
<text>  (let* ((refinfo  (select-elements (children (current-node)) 
</text>
<text>				    (normalize &quot;docinfo&quot;)))
</text>
<text>	 (refintro (select-elements (children (current-node)) 
</text>
<text>				    (normalize &quot;partintro&quot;)))
</text>
<text>	 (nl       (titlepage-info-elements 
</text>
<text>		    (current-node)
</text>
<text>		    refinfo
</text>
<text>		    (if %generate-partintro-on-titlepage%
</text>
<text>			refintro
</text>
<text>			(empty-node-list)))))
</text>
<text>    (make sequence
</text>
<text>      (if %generate-reference-titlepage%
</text>
<text>	  (make sequence
</text>
<text>	    (reference-titlepage nl 'recto)
</text>
<text>	    (reference-titlepage nl 'verso))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if (not (generate-toc-in-front))
</text>
<text>	  (process-children)
</text>
<text>	  (empty-sosofo))
</text>
<text>      
</text>
<text>      (if (and %generate-reference-toc%
</text>
<text>	       (not %generate-reference-toc-on-titlepage%))
</text>
<text>	  (make simple-page-sequence
</text>
<text>	    page-n-columns: %page-n-columns%
</text>
<text>	    page-number-restart?: #t
</text>
<text>	    page-number-format: ($page-number-format$ (normalize &quot;toc&quot;))
</text>
<text>	    use: default-text-style
</text>
<text>	    left-header:   ($left-header$ (normalize &quot;toc&quot;))
</text>
<text>	    center-header: ($center-header$ (normalize &quot;toc&quot;))
</text>
<text>	    right-header:  ($right-header$ (normalize &quot;toc&quot;))
</text>
<text>	    left-footer:   ($left-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    center-footer: ($center-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    right-footer:  ($right-footer$ (normalize &quot;toc&quot;))
</text>
<text>	    input-whitespace-treatment: 'collapse
</text>
<text>	    (build-toc (current-node)
</text>
<text>		       (toc-depth (current-node))))
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if (and (not (node-list-empty? refintro))
</text>
<text>	       (not %generate-partintro-on-titlepage%))
</text>
<text>	  ($process-partintro$ refintro #t)
</text>
<text>	  (empty-sosofo))
</text>
<text>
</text>
<text>      (if (generate-toc-in-front)
</text>
<text>	  (if %refentry-new-page%
</text>
<text>	      (process-children)
</text>
<text>	      (make simple-page-sequence
</text>
<text>		page-n-columns: %page-n-columns%
</text>
<text>		page-number-format: ($page-number-format$)
</text>
<text>		use: default-text-style
</text>
<text>		left-header:   ($left-header$)
</text>
<text>		center-header: ($center-header$)
</text>
<text>		right-header:  ($right-header$)
</text>
<text>		left-footer:   ($left-footer$)
</text>
<text>		center-footer: ($center-footer$)
</text>
<text>		right-footer:  ($right-footer$)
</text>
<text>		input-whitespace-treatment: 'collapse
</text>
<text>		quadding: %default-quadding%
</text>
<text>		(process-children)))
</text>
<text>	  (empty-sosofo)))))
</text>
<text>
</text>
<text>;; If each RefEntry begins on a new page, this title is going to wind
</text>
<text>;; up on its own page, too, so make it a divtitlepage instead.  Otherwise,
</text>
<text>;; just let it be a component title.
</text>
<text>(element (reference title) (empty-sosofo))
</text>
<text>;;  (if %refentry-new-page%
</text>
<text>;;      ($divtitlepage$)
</text>
<text>;;      (empty-sosofo)))
</text>
<text>
</text>
<text>(element refentry 
</text>
<text>  (make display-group
</text>
<text>    keep: %refentry-keep%
</text>
<text>    (if (or %refentry-new-page%
</text>
<text>	    (node-list=? (current-node) (sgml-root-element)))
</text>
<text>	(make simple-page-sequence
</text>
<text>	  page-n-columns: %page-n-columns%
</text>
<text>	  page-number-format: ($page-number-format$)
</text>
<text>	  use: default-text-style
</text>
<text>	  left-header:   ($left-header$)
</text>
<text>	  center-header: ($center-header$)
</text>
<text>	  right-header:  ($right-header$)
</text>
<text>	  left-footer:   ($left-footer$)
</text>
<text>	  center-footer: ($center-footer$)
</text>
<text>	  right-footer:  ($right-footer$)
</text>
<text>	  input-whitespace-treatment: 'collapse
</text>
<text>	  quadding: %default-quadding%
</text>
<text>	  ($refentry-title$)
</text>
<text>	  (process-children))
</text>
<text>	(make sequence
</text>
<text>	  ($refentry-title$)
</text>
<text>	  ($block-container$)))
</text>
<text>    (make-endnotes)))
</text>
<text>
</text>
<text>(define ($refentry-title$)
</text>
<text>  (let* ((refmeta       (select-elements (children (current-node))
</text>
<text>					 (normalize &quot;refmeta&quot;)))
</text>
<text>	 (refentrytitle (select-elements (children refmeta)
</text>
<text>					 (normalize &quot;refentrytitle&quot;)))
</text>
<text>	 (refnamediv    (select-elements (children (current-node))
</text>
<text>					 (normalize &quot;refnamediv&quot;)))
</text>
<text>	 (refdescriptor (select-elements (children refnamediv)
</text>
<text>					 (normalize &quot;refdescriptor&quot;)))
</text>
<text>	 (refname       (select-elements (children refnamediv)
</text>
<text>					 (normalize &quot;refname&quot;)))
</text>
<text>	 (title         (if (node-list-empty? refentrytitle)
</text>
<text>			    (if (node-list-empty? refdescriptor)
</text>
<text>				(node-list-first refname)
</text>
<text>				refdescriptor)
</text>
<text>			    refentrytitle))
</text>
<text>	 (slevel (SECTLEVEL)) ;; the true level in the section hierarchy
</text>
<text>	 (hlevel (if (&gt; slevel 2) 2 slevel)) ;; limit to sect2 equiv.
</text>
<text>	 (hs (HSIZE (- 4 hlevel))))
</text>
<text>    (make paragraph
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: hs
</text>
<text>      line-spacing: (* hs %line-spacing-factor%)
</text>
<text>      space-before: (* hs %head-before-factor%)
</text>
<text>      space-after: (* hs %head-after-factor%)
</text>
<text>      start-indent: %body-start-indent%
</text>
<text>      first-line-start-indent: (- %body-start-indent%)
</text>
<text>      quadding: 'start
</text>
<text>      heading-level: (if %generate-heading-level% 2 0)
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-node-list (children title)))))
</text>
<text>;; nwalsh, this is wrong, 29 July 1999
</text>
<text>;      (if %refentry-function%
</text>
<text>;	  (sosofo-append
</text>
<text>;	   (literal &quot;\no-break-space;&quot;)
</text>
<text>;	   (process-first-descendant (normalize &quot;manvolnum&quot;)))
</text>
<text>;	  (empty-sosofo)))))
</text>
<text>
</text>
<text>(element refmeta (empty-sosofo)) ;; handled by $refentry-title$
</text>
<text>
</text>
<text>(element manvolnum 
</text>
<text>  (if %refentry-xref-manvolnum%
</text>
<text>      (sosofo-append
</text>
<text>       (literal &quot;(&quot;)
</text>
<text>       (process-children)
</text>
<text>       (literal &quot;)&quot;))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>(element refmiscinfo (empty-sosofo))
</text>
<text>
</text>
<text>(element refentrytitle ($charseq$))
</text>
<text>
</text>
<text>(element refnamediv
</text>
<text>  (make paragraph
</text>
<text>	space-before: %para-sep%
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	quadding: 'start
</text>
<text>	(process-children)))
</text>
<text>
</text>
<text>(element refname
</text>
<text>  (make sequence
</text>
<text>    (if (and %refentry-generate-name% (first-sibling? (current-node)))
</text>
<text> 	($lowtitlewithsosofo$ 1 3 (literal (gentext-element-name 
</text>
<text>					    (current-node))))
</text>
<text> 	(empty-sosofo))
</text>
<text>    (make sequence
</text>
<text>	  font-weight: 'medium
</text>
<text>	  font-family-name: %refentry-name-font-family%
</text>
<text>	  (process-children)
</text>
<text> 	  (if (last-sibling? (current-node))
</text>
<text> 	      (empty-sosofo)
</text>
<text>	      (literal (gentext-intra-label-sep (gi (current-node))))))))
</text>
<text>
</text>
<text>(element refpurpose
</text>
<text>  (make sequence
</text>
<text>        font-family-name: %body-font-family%
</text>
<text>    (make sequence
</text>
<text>      (literal &quot; \em-dash &quot;)
</text>
<text>      (process-children))
</text>
<text>    (make paragraph-break)))
</text>
<text>	
</text>
<text>(element refdescriptor (empty-sosofo))
</text>
<text>
</text>
<text>(element refclass
</text>
<text>  (let ((role (attribute-string &quot;role&quot;)))
</text>
<text>    (make paragraph
</text>
<text>	  space-before: %para-sep%
</text>
<text>	  start-indent: %body-start-indent%
</text>
<text>	  quadding: 'start
</text>
<text>	  (make sequence
</text>
<text>		font-weight: 'bold
</text>
<text>		(literal
</text>
<text>		  (if role
</text>
<text>		      (string-append role &quot;: &quot;)
</text>
<text>		      &quot;&quot;)))
</text>
<text>	  (process-children-trim))))
</text>
<text>
</text>
<text>(element refsynopsisdiv ($section$))
</text>
<text>
</text>
<text>(element (refsynopsisdiv title) (empty-sosofo))
</text>
<text>
</text>
<text>(element refsect1 ($section$))
</text>
<text>(element (refsect1 title) (empty-sosofo))
</text>
<text>(element refsect2 ($section$))
</text>
<text>(element (refsect2 title) (empty-sosofo))
</text>
<text>(element refsect3 ($section$))
</text>
<text>(element (refsect3 title) (empty-sosofo))
</text>
<text>
</text>
<text>
</text>
<text>  </text>
<text>
</text>
<text>;; $Id: dbsect.dsl,v 1.5 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================== SECTIONS ==============================
</text>
<text>
</text>
<text>(define (SECTLEVEL #!optional (sect (current-node)))
</text>
<text>  (section-level-by-node #f sect))
</text>
<text>
</text>
<text>;; BRIDGEHEAD isn't a proper section, but appears to be a section title
</text>
<text>(element bridgehead
</text>
<text>  (let* ((renderas (attribute-string &quot;renderas&quot;))
</text>
<text>	 ;; the apparent section level
</text>
<text>	 (hlevel
</text>
<text>	  ;; if not real section level, then get the apparent level
</text>
<text>	  ;; from &quot;renderas&quot;
</text>
<text>	  (if renderas
</text>
<text>	      (section-level-by-gi #f (normalize renderas))
</text>
<text>	      ;; else use the real level
</text>
<text>	      (SECTLEVEL)))
</text>
<text>	 (hs (HSIZE (- 5 hlevel))))	
</text>
<text>    (make paragraph
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight:  (if (&lt; hlevel 5) 'bold 'medium)
</text>
<text>      font-posture: (if (&lt; hlevel 5) 'upright 'italic)
</text>
<text>      font-size: hs
</text>
<text>      line-spacing: (* hs %line-spacing-factor%)
</text>
<text>      space-before: (* hs %head-before-factor%)
</text>
<text>      space-after: (* hs %head-after-factor%)
</text>
<text>      start-indent: (if (&lt; hlevel 3)
</text>
<text>			0pt
</text>
<text>			%body-start-indent%)
</text>
<text>      first-line-start-indent: 0pt
</text>
<text>      quadding: %section-title-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(define ($section$)
</text>
<text>  (if (node-list=? (current-node) (sgml-root-element))
</text>
<text>      (make simple-page-sequence
</text>
<text>	page-n-columns: %page-n-columns%
</text>
<text>	page-number-restart?: (or %page-number-restart% 
</text>
<text>				  (book-start?) 
</text>
<text>				  (first-chapter?))
</text>
<text>	page-number-format: ($page-number-format$)
</text>
<text>	use: default-text-style
</text>
<text>	left-header:   ($left-header$)
</text>
<text>	center-header: ($center-header$)
</text>
<text>	right-header:  ($right-header$)
</text>
<text>	left-footer:   ($left-footer$)
</text>
<text>	center-footer: ($center-footer$)
</text>
<text>	right-footer:  ($right-footer$)
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	input-whitespace-treatment: </text>
<text>'collapse
</text>
<text>	quadding: %default-quadding%
</text>
<text>	(make sequence
</text>
<text>	  ($section-title$)
</text>
<text>	  (process-children)))
</text>
<text>      (make display-group
</text>
<text>	space-before: %block-sep%
</text>
<text>	space-after: %block-sep%
</text>
<text>	start-indent: %body-start-indent%
</text>
<text>	(make sequence
</text>
<text>	  ($section-title$)
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>(define ($section-title$)
</text>
<text>  (let* ((sect (current-node))
</text>
<text>	 (info (info-element))
</text>
<text>	 (exp-children (if (node-list-empty? info)
</text>
<text>			   (empty-node-list)
</text>
<text>			   (expand-children (children info) 
</text>
<text>					    (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>						  (normalize &quot;bibliomisc&quot;)
</text>
<text>						  (normalize &quot;biblioset&quot;)))))
</text>
<text>	 (parent-titles (select-elements (children sect) (normalize &quot;title&quot;)))
</text>
<text>	 (info-titles   (select-elements exp-children (normalize &quot;title&quot;)))
</text>
<text>	 (titles        (if (node-list-empty? parent-titles)
</text>
<text>			    info-titles
</text>
<text>			    parent-titles))
</text>
<text>	 (subtitles     (select-elements exp-children (normalize &quot;subtitle&quot;)))
</text>
<text>	 (renderas (inherited-attribute-string (normalize &quot;renderas&quot;) sect))
</text>
<text>	 ;; the apparent section level
</text>
<text>	 (hlevel
</text>
<text>	  ;; if not real section level, then get the apparent level
</text>
<text>	  ;; from &quot;renderas&quot;
</text>
<text>	  (if renderas
</text>
<text>	      (section-level-by-gi #f (normalize renderas))
</text>
<text>	      ;; else use the real level
</text>
<text>	      (SECTLEVEL)))
</text>
<text>	 (hs (HSIZE (- 5 hlevel))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight:  (if (&lt; hlevel 5) 'bold 'medium)
</text>
<text>	font-posture: (if (&lt; hlevel 5) 'upright 'italic)
</text>
<text>	font-size: hs
</text>
<text>	line-spacing: (* hs %line-spacing-factor%)
</text>
<text>	space-before: (* hs %head-before-factor%)
</text>
<text>	space-after: (if (node-list-empty? subtitles)
</text>
<text>			 (* hs %head-after-factor%)
</text>
<text>			 0pt)
</text>
<text>	start-indent: (if (or (&gt;= hlevel 3)
</text>
<text>			      (member (gi) (list (normalize &quot;refsynopsisdiv&quot;) 
</text>
<text>						 (normalize &quot;refsect1&quot;) 
</text>
<text>						 (normalize &quot;refsect2&quot;) 
</text>
<text>						 (normalize &quot;refsect3&quot;))))
</text>
<text>			  %body-start-indent%
</text>
<text>			  0pt)
</text>
<text>	first-line-start-indent: 0pt
</text>
<text>	quadding: %section-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	heading-level: (if %generate-heading-level% hlevel 0)
</text>
<text>	;; SimpleSects are never AUTO numbered...they aren't hierarchical
</text>
<text>	(if (string=? (element-label (current-node)) &quot;&quot;)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal (element-label (current-node)) 
</text>
<text>		     (gentext-label-title-sep (gi sect))))
</text>
<text>	(element-title-sosofo (current-node)))
</text>
<text>      (with-mode section-title-mode
</text>
<text>	(process-node-list subtitles))
</text>
<text>      ($proc-section-info$ info))))
</text>
<text>
</text>
<text>(mode section-title-mode
</text>
<text>  (element subtitle
</text>
<text>    (let* ((sect (parent (parent (current-node)))) ;; parent=&gt;sect*info
</text>
<text>	   (renderas (inherited-attribute-string &quot;renderas&quot; sect))
</text>
<text>	   ;; the apparent section level
</text>
<text>	   (hlevel
</text>
<text>	    ;; if not real section level, then get the apparent level
</text>
<text>	    ;; from &quot;renderas&quot;
</text>
<text>	    (if renderas
</text>
<text>		(section-level-by-gi #f (normalize renderas))
</text>
<text>		;; else use the real level
</text>
<text>		(SECTLEVEL)))
</text>
<text>	   (hs (HSIZE (- 4 hlevel))))       ;; one smaller than the title...
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight:  (if (&lt; hlevel 5) 'bold 'medium)
</text>
<text>	font-posture: (if (&lt; hlevel 5) 'upright 'italic)
</text>
<text>	font-size: hs
</text>
<text>	line-spacing: (* hs %line-spacing-factor%)
</text>
<text>	space-before: 0pt
</text>
<text>	space-after: (* hs %head-after-factor%)
</text>
<text>	start-indent:
</text>
<text>	(if (&lt; hlevel 3)
</text>
<text>	    0pt
</text>
<text>	    %body-start-indent%)
</text>
<text>	first-line-start-indent: 0pt
</text>
<text>	quadding: %section-subtitle-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(process-children))))
</text>
<text>)
</text>
<text>
</text>
<text>(define ($proc-section-info$ info)
</text>
<text>  (cond ((equal? (gi) (normalize &quot;sect1&quot;))
</text>
<text>	 ($sect1-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;sect2&quot;))
</text>
<text>	 ($sect2-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;sect3&quot;))
</text>
<text>	 ($sect3-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;sect4&quot;))
</text>
<text>	 ($sect4-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;sect5&quot;))
</text>
<text>	 ($sect5-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;section&quot;))
</text>
<text>	 ($section-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;refsect1&quot;))
</text>
<text>	 ($refsect1-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;refsect2&quot;))
</text>
<text>	 ($refsect2-info$ info))
</text>
<text>	((equal? (gi) (normalize &quot;refsect3&quot;))
</text>
<text>	 ($refsect3-info$ info))
</text>
<text>	(else (empty-sosofo))))
</text>
<text>
</text>
<text>(define ($sect1-info$ info) (empty-sosofo))
</text>
<text>(define ($sect2-info$ info) (empty-sosofo))
</text>
<text>(define ($sect3-info$ info) (empty-sosofo))
</text>
<text>(define ($sect4-info$ info) (empty-sosofo))
</text>
<text>(define ($sect5-info$ info) (empty-sosofo))
</text>
<text>(define ($section-info$ info) (empty-sosofo))
</text>
<text>(define ($refsect1-info$ info) (empty-sosofo))
</text>
<text>(define ($refsect2-info$ info) (empty-sosofo))
</text>
<text>(define ($refsect3-info$ info) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect1 ($section$))
</text>
<text>(element (sect1 title) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect2 ($section$))
</text>
<text>(element (sect2 title) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect3 ($section$))
</text>
<text>(element (sect3 title) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect4 ($section$))
</text>
<text>(element (sect4 title) (empty-sosofo))
</text>
<text>
</text>
<text>(element sect5 ($section$))
</text>
<text>(element (sect5 title) (empty-sosofo))
</text>
<text>
</text>
<text>(element simplesect ($section$))
</text>
<text>(element (simplesect title) (empty-sosofo))
</text>
<text>
</text>
<text>    </text>
<text>
</text>
<text>;; $Id: dbsynop.dsl,v 1.3 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ========================= SYNTAX DEFINITIONS =========================
</text>
<text>
</text>
<text>(element synopsis ($verbatim-display$ %indent-synopsis-lines%
</text>
<text>				      %number-synopsis-lines%))
</text>
<text>
</text>
<text>(element cmdsynopsis
</text>
<text>  ;; Can't be an $informal-object$ because it needs the paragraph
</text>
<text>  ;; wrapper around process-children
</text>
<text>  (make display-group
</text>
<text>    start-indent: (+ %block-start-indent% (inherited-start-indent))
</text>
<text>    space-before: %block-sep%
</text>
<text>    space-after: %block-sep%
</text>
<text>    (make paragraph
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>;; Support for ARG provided by James Bostock, augmented by norm
</text>
<text>;;
</text>
<text>
</text>
<text>(element (cmdsynopsis command)
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling? (current-node))
</text>
<text>	(empty-sosofo)
</text>
<text>	(make paragraph-break))
</text>
<text>    (next-match)
</text>
<text>    (literal &quot; &quot;)))
</text>
<text>
</text>
<text>(element group
</text>
<text>  (let ((choice  (attribute-string (normalize &quot;choice&quot;)))
</text>
<text>	(rep     (attribute-string (normalize &quot;rep&quot;)))
</text>
<text>	(sepchar (if (inherited-attribute-string (normalize &quot;sepchar&quot;))
</text>
<text>		     (inherited-attribute-string (normalize &quot;sepchar&quot;))
</text>
<text>		     &quot; &quot;)))
</text>
<text>    (make sequence
</text>
<text>      (if (equal? (absolute-child-number (current-node)) 1)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (literal sepchar))
</text>
<text>      (cond
</text>
<text>       ((equal? choice (normalize &quot;plain&quot;)) (literal %arg-choice-plain-open-str%))
</text>
<text>       ((equal? choice (normalize &quot;req&quot;)) (literal %arg-choice-req-open-str%))
</text>
<text>       ((equal? choice (normalize &quot;opt&quot;)) (literal %arg-choice-opt-open-str%))
</text>
<text>       (else (literal %arg-choice-def-open-str%)))
</text>
<text>      (process-children)
</text>
<text>      (cond
</text>
<text>       ((equal? choice (normalize &quot;plain&quot;)) (literal %arg-choice-plain-close-str%))
</text>
<text>       ((equal? choice (normalize &quot;req&quot;)) (literal %arg-choice-req-close-str%))
</text>
<text>       ((equal? choice (normalize &quot;opt&quot;)) (literal %arg-choice-opt-close-str%))
</text>
<text>       (else (literal %arg-choice-def-close-str%)))
</text>
<text>      (cond
</text>
<text>       ((equal? rep (normalize &quot;repeat&quot;)) (literal %arg-rep-repeat-str%))
</text>
<text>       ((equal? rep (normalize &quot;norepeat&quot;)) (literal %arg-rep-norepeat-str%))
</text>
<text>       (else (literal %arg-rep-def-str%))))))
</text>
<text>
</text>
<text>(element arg
</text>
<text>  (let ((choice  (attribute-string (normalize &quot;choice&quot;)))
</text>
<text>	(rep     (attribute-string (normalize &quot;rep&quot;)))
</text>
<text>	(sepchar (if (inherited-attribute-string (normalize &quot;sepchar&quot;))
</text>
<text>		     (inherited-attribute-string (normalize &quot;sepchar&quot;))
</text>
<text>		     &quot; &quot;)))
</text>
<text>    (make sequence
</text>
<text>      (if (equal? (absolute-child-number (current-node)) 1)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (literal sepchar))
</text>
<text>      (cond
</text>
<text>       ((equal? choice (normalize &quot;plain&quot;)) (literal %arg-choice-plain-open-str%))
</text>
<text>       ((equal? choice (normalize &quot;req&quot;)) (literal %arg-choice-req-open-str%))
</text>
<text>       ((equal? choice (normalize &quot;opt&quot;)) (literal %arg-choice-opt-open-str%))
</text>
<text>       (else (literal %arg-choice-def-open-str%)))
</text>
<text>      (process-children)
</text>
<text>      (cond
</text>
<text>       ((equal? rep (normalize &quot;repeat&quot;)) (literal %arg-rep-repeat-str%))
</text>
<text>       ((equal? rep (normalize &quot;norepeat&quot;)) (literal %arg-rep-norepeat-str%))
</text>
<text>       (else (literal %arg-rep-def-str%)))
</text>
<text>      (cond
</text>
<text>       ((equal? choice (normalize &quot;plain&quot;)) (literal %arg-choice-plain-close-str%))
</text>
<text>       ((equal? choice (normalize &quot;req&quot;)) (literal %arg-choice-req-close-str%))
</text>
<text>       ((equal? choice (normalize &quot;opt&quot;)) (literal %arg-choice-opt-close-str%))
</text>
<text>       (else (literal %arg-choice-def-close-str%))))))
</text>
<text>
</text>
<text>(element (group arg)
</text>
<text>  (let ((choice (attribute-string (normalize &quot;choice&quot;)))
</text>
<text>	(rep (attribute-string (normalize &quot;rep&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (if (not (first-sibling? (current-node)))
</text>
<text>	  (literal %arg-or-sep%)
</text>
<text>	  (empty-sosofo))
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(element sbr 
</text>
<text>  (make paragraph-break))
</text>
<text>
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>;; Syntax highlighting...
</text>
<text>
</text>
<text>(define (funcsynopsis-function #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-weight: 'bold
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>(define (paramdef-parameter #!optional (sosofo (process-children)))
</text>
<text>  (make sequence
</text>
<text>    font-posture: 'italic
</text>
<text>    sosofo))
</text>
<text>
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>
</text>
<text>(element synopfragmentref 
</text>
<text>  (let* ((target (element-with-id (attribute-string (normalize &quot;linkend&quot;))))
</text>
<text>	 (snum   (child-number target)))
</text>
<text>    (make sequence
</text>
<text>      font-posture: 'italic
</text>
<text>      (make link 
</text>
<text>	destination: (node-list-address target)
</text>
<text>	(make sequence
</text>
<text>	  font-posture: 'upright
</text>
<text>	  ($callout-bug$ snum)))
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(element synopfragment
</text>
<text>  (let ((snum (child-number (current-node))))
</text>
<text>    (make paragraph
</text>
<text>      ($callout-bug$ snum)
</text>
<text>      (literal &quot; &quot;)
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(element funcsynopsis 
</text>
<text>  (let* ((width-in-chars (if (attribute-string &quot;width&quot;)
</text>
<text>			     (string-&gt;number (attribute-string &quot;width&quot;))
</text>
<text>			     %verbatim-default-width%))
</text>
<text>	 (fsize (lambda () (if (or (attribute-string (normalize &quot;width&quot;))
</text>
<text>				   (not %verbatim-size-factor%))
</text>
<text>			       (/ (/ (- %text-width% (inherited-start-indent))
</text>
<text>				     width-in-chars) 
</text>
<text>				  0.7)
</text>
<text>			       (* (inherited-font-size) 
</text>
<text>				  %verbatim-size-factor%)))))
</text>
<text>    ;; This used to be a sequence, but that caused the start-indent to be
</text>
<text>    ;; wrong when it was the first element of a RefSect.  Making it a
</text>
<text>    ;; paragraph makes the bug go away and doesn't seem to have any ill
</text>
<text>    ;; effects.  Need to investigate further...
</text>
<text>    (make paragraph
</text>
<text>      font-family-name: %mono-font-family%
</text>
<text>      font-size: (fsize)
</text>
<text>      font-weight: 'medium
</text>
<text>      font-posture: 'upright
</text>
<text>      line-spacing: (* (fsize) %line-spacing-factor%)
</text>
<text>      ($informal-object$))))
</text>
<text>
</text>
<text>(element funcsynopsisinfo 
</text>
<text>  ;; Fake out the font-size so that when verbatim-display calculates the
</text>
<text>  ;; verbatim-size-factor it doesn't get squared.  This will fail if the
</text>
<text>  ;; &quot;correct&quot; size isn't bfsize, but what can I do?
</text>
<text>  (make sequence
</text>
<text>    font-size: %bf-size%
</text>
<text>    ($verbatim-display$ %indent-funcsynopsisinfo-lines%
</text>
<text>			%number-funcsynopsisinfo-lines%)))
</text>
<text>
</text>
<text>(element funcprototype 
</text>
<text>  (let ((paramdefs (select-elements (children (current-node))
</text>
<text>				    (normalize &quot;paramdef&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %mono-font-family%
</text>
<text>	(process-children))
</text>
<text>      (if (equal? %funcsynopsis-style% 'kr)
</text>
<text>	  (with-mode kr-funcsynopsis-mode
</text>
<text>	    (process-node-list paramdefs))
</text>
<text>	  (empty-sosofo)))))
</text>
<text>
</text>
<text>(element funcdef (process-children))
</text>
<text>(element (funcdef function) 
</text>
<text>  (if %funcsynopsis-decoration%
</text>
<text>      (funcsynopsis-function)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>(element void 
</text>
<text>  (if (equal? %funcsynopsis-style% 'ansi)
</text>
<text>      (literal &quot;(void);&quot;)
</text>
<text>      (literal &quot;();&quot;)))
</text>
<text>
</text>
<text>(element varargs (literal &quot;(...);&quot;))
</text>
<text>
</text>
<text>(element paramdef
</text>
<text>  (let ((param (select-elements (children (current-node)) (normalize &quot;parameter&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (if (equal? (child-number (current-node)) 1)
</text>
<text>	  (literal &quot;(&quot;)
</text>
<text>	  (empty-sosofo))
</text>
<text>      (if (equal? %funcsynopsis-style% 'ansi)
</text>
<text>	  (process-children)
</text>
<text>	  (process-node-list param))
</text>
<text>      (if (equal? (gi (ifollow (current-node))) (normalize &quot;paramdef&quot;))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;);&quot;)))))
</text>
<text>  
</text>
<text>(element (paramdef parameter)
</text>
<text>  (make sequence
</text>
<text>    (if %funcsynopsis-decoration%
</text>
<text>      (paramdef-parameter)
</text>
<text>      (process-children))
</text>
<text>    (if (equal? (gi (ifollow (current-node))) (normalize &quot;parameter&quot;))
</text>
<text>	(literal &quot;, &quot;)
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(element funcparams 
</text>
<text>  (make sequence 
</text>
<text>    (literal &quot;(&quot;)
</text>
<text>    (process-children)
</text>
<text>    (literal &quot;)&quot;)))
</text>
<text>
</text>
<text>(mode kr-funcsynopsis-mode
</text>
<text>  (element paramdef
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	font-family-name: %mono-font-family%
</text>
<text>	start-indent: (+ (inherited-start-indent) %kr-funcsynopsis-indent%)
</text>
<text>	(make sequence
</text>
<text>	  (process-children) 
</text>
<text>	  (literal &quot;;&quot;))))))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbefsyn.dsl,v 1.4 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; ============================ CLASS SYNOPSIS =============================
</text>
<text>
</text>
<text>(define %indent-classsynopsisinfo-lines% #f)
</text>
<text>(define %number-classsynopsisinfo-lines% #f)
</text>
<text>
</text>
<text>(define %default-classsynopsis-language% &quot;java&quot;)
</text>
<text>
</text>
<text>(element classsynopsis
</text>
<text>  (let ((language (if (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      %default-classsynopsis-language%)))
</text>
<text>    (case language
</text>
<text>      ((&quot;java&quot;) (with-mode cs-java-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;perl&quot;) (with-mode cs-perl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;idl&quot;) (with-mode cs-idl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;python&quot;) (with-mode cs-python-mode
</text>
<text>		    (process-node-list (current-node))))
</text>
<text>      (else (with-mode cs-java-mode
</text>
<text>	      (process-node-list (current-node)))))))
</text>
<text>
</text>
<text>(element methodsynopsis
</text>
<text>  (let ((language (if (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      %default-classsynopsis-language%)))
</text>
<text>    (case language
</text>
<text>      ((&quot;java&quot;) (with-mode cs-java-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;perl&quot;) (with-mode cs-perl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;idl&quot;) (with-mode cs-idl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;python&quot;) (with-mode cs-python-mode
</text>
<text>		    (process-node-list (current-node))))
</text>
<text>      (else (with-mode cs-java-mode
</text>
<text>	      (process-node-list (current-node)))))))
</text>
<text>
</text>
<text>(element fieldsynopsis
</text>
<text>  (let ((language (if (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      %default-classsynopsis-language%)))
</text>
<text>    (case language
</text>
<text>      ((&quot;java&quot;) (with-mode cs-java-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;perl&quot;) (with-mode cs-perl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;idl&quot;) (with-mode cs-idl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;python&quot;) (with-mode cs-python-mode
</text>
<text>		    (process-node-list (current-node))))
</text>
<text>      (else (with-mode cs-java-mode
</text>
<text>	      (process-node-list (current-node)))))))
</text>
<text>
</text>
<text>(element constructorynopsis
</text>
<text>  (let ((language (if (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      %default-classsynopsis-language%)))
</text>
<text>    (case language
</text>
<text>      ((&quot;java&quot;) (with-mode cs-java-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;perl&quot;) (with-mode cs-perl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;idl&quot;) (with-mode cs-idl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;python&quot;) (with-mode cs-python-mode
</text>
<text>		    (process-node-list (current-node))))
</text>
<text>      (else (with-mode cs-java-mode
</text>
<text>	      (process-node-list (current-node)))))))
</text>
<text>
</text>
<text>(element destructorsynopsis
</text>
<text>  (let ((language (if (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      (attribute-string (normalize &quot;language&quot;))
</text>
<text>		      %default-classsynopsis-language%)))
</text>
<text>    (case language
</text>
<text>      ((&quot;java&quot;) (with-mode cs-java-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;perl&quot;) (with-mode cs-perl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;idl&quot;) (with-mode cs-idl-mode
</text>
<text>		  (process-node-list (current-node))))
</text>
<text>      ((&quot;python&quot;) (with-mode cs-python-mode
</text>
<text>		    (process-node-list (current-node))))
</text>
<text>      (else (with-mode cs-java-mode
</text>
<text>	      (process-node-list (current-node)))))))
</text>
<text>
</text>
<text>;; ===== Java ========================================================
</text>
<text>
</text>
<text>(mode cs-java-mode
</text>
<text>
</text>
<text>(element classsynopsis
</text>
<text>  (let* ((classes      (select-elements (children (current-node))
</text>
<text>					(normalize &quot;ooclass&quot;)))
</text>
<text>	 (classname    (node-list-first classes))
</text>
<text>	 (superclasses (node-list-rest classes)))
</text>
<text>  (make display-group
</text>
<text>    use: verbatim-style
</text>
<text>    (make paragraph
</text>
<text>      (process-node-list classname)
</text>
<text>      (process-node-list superclasses)
</text>
<text>      (literal &quot;{&quot;))
</text>
<text>    (process-node-list
</text>
<text>     (node-list-filter-by-gi
</text>
<text>      (children (current-node))
</text>
<text>      (list (normalize &quot;constructorsynopsis&quot;)
</text>
<text>	    (normalize &quot;destructorsynopsis&quot;)
</text>
<text>	    (normalize &quot;fieldsynopsis&quot;)
</text>
<text>	    (normalize &quot;methodsynopsis&quot;)
</text>
<text>	    (normalize &quot;classsynopsisinfo&quot;))))
</text>
<text>    (make paragraph
</text>
<text>      (literal &quot;}&quot;)))))
</text>
<text>
</text>
<text>(element classsynopsisinfo
</text>
<text>  ($verbatim-display$ %indent-classsynopsisinfo-lines%
</text>
<text>		      %number-classsynopsisinfo-lines%))
</text>
<text>
</text>
<text>(element ooclass
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(literal &quot; &quot;)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element oointerface
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(literal &quot; &quot;)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element ooexception
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(literal &quot; &quot;)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element modifier
</text>
<text>  (make sequence
</text>
<text>    (process-children)
</text>
<text>    (literal &quot; &quot;)))
</text>
<text>
</text>
<text>(element classname
</text>
<text>  (if (first-sibling?)
</text>
<text>      (make sequence
</text>
<text>	(literal &quot;class &quot;)
</text>
<text>	(process-children)
</text>
<text>	(literal &quot; &quot;)
</text>
<text>	(if (last-sibling?)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal &quot;extends &quot;)))
</text>
<text>      (make sequence
</text>
<text>	(process-children)
</text>
<text>	(if (last-sibling?)
</text>
<text>	    (literal &quot; &quot;)
</text>
<text>	    (literal &quot;, &quot;)))))
</text>
<text>
</text>
<text>(element fieldsynopsis
</text>
<text>  (make paragraph
</text>
<text>    use: inline-verbatim-style
</text>
<text>    (literal &quot;  &quot;)
</text>
<text>    (process-children)
</text>
<text>    (literal &quot;;&quot;)))
</text>
<text>
</text>
<text>(element type
</text>
<text>  (make sequence
</text>
<text>    (process-children)
</text>
<text>    (literal &quot; &quot;)))
</text>
<text>
</text>
<text>(element varname
</text>
<text>  (make sequence
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element initializer
</text>
<text>  (make sequence
</text>
<text>    (literal &quot; = &quot;)
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element constructorsynopsis
</text>
<text>  (java-method-synopsis))
</text>
<text>
</text>
<text>(element destructorsynopsis
</text>
<text>  (java-method-synopsis))
</text>
<text>
</text>
<text>(element methodsynopsis
</text>
<text>  (java-method-synopsis))
</text>
<text>
</text>
<text>(element void
</text>
<text>  (literal &quot;void &quot;))
</text>
<text>
</text>
<text>(element methodname
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element methodparam
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(empty-sosofo)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element parameter
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element exceptionname
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(literal &quot; throws &quot;)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>(define (java-method-synopsis #!optional (nd (current-node)))
</text>
<text>  (let* ((modifiers  (select-elements (children nd)
</text>
<text>				      (normalize &quot;modifier&quot;)))
</text>
<text>	 (notmod     (node-list-filter-by-not-gi
</text>
<text>		      (children nd)
</text>
<text>		      (list (normalize &quot;modifier&quot;))))
</text>
<text>	 (type       (if (equal? (gi (node-list-first notmod)) 
</text>
<text>				 (normalize &quot;methodname&quot;))
</text>
<text>			 (empty-node-list)
</text>
<text>			 (node-list-first notmod)))
</text>
<text>	 (methodname (select-elements (children nd)
</text>
<text>				      (normalize &quot;methodname&quot;)))
</text>
<text>	 (param      (node-list-filter-by-gi (node-list-rest notmod)
</text>
<text>					     (list (normalize &quot;methodparam&quot;))))
</text>
<text>	 (excep      (select-elements (children nd)
</text>
<text>				      (normalize &quot;exceptionname&quot;))))
</text>
<text>    (make paragraph
</text>
<text>      use: inline-verbatim-style
</text>
<text>      (literal &quot;  &quot;)
</text>
<text>      (process-node-list modifiers)
</text>
<text>      (process-node-list type)
</text>
<text>      (process-node-list methodname)
</text>
<text>      (literal &quot;(&quot;)
</text>
<text>      (process-node-list param)
</text>
<text>      (literal &quot;)&quot;)
</text>
<text>      (process-node-list excep)
</text>
<text>      (literal &quot;;&quot;))))
</text>
<text>
</text>
<text>;; ===== Perl ========================================================
</text>
<text>
</text>
<text>(mode cs-perl-mode
</text>
<text>
</text>
<text>(element classsynopsis
</text>
<text>  (let* ((modifiers    (select-elements (children (current-node))
</text>
<text>					(normalize &quot;modifier&quot;)))
</text>
<text>	 (classes      (select-elements (children (current-node))
</text>
<text>					(normalize &quot;classname&quot;)))
</text>
<text>	 (classname    (node-list-first classes))
</text>
<text>	 (superclasses (node-list-rest classes)))
</text>
<text>  (make display-group
</text>
<text>    use: verbatim-style;
</text>
<text>    (make paragraph
</text>
<text>      (literal &quot;package &quot;)
</text>
<text>      (process-node-list classname)
</text>
<text>      (literal &quot;;&quot;))
</text>
<text>    (if (node-list-empty? superclasses)
</text>
<text>	(empty-sosofo)
</text>
<text>	(make sequence
</text>
<text>	  (literal &quot;@ISA = (&quot;);
</text>
<text>	  (process-node-list superclasses)
</text>
<text>	  (literal &quot;;&quot;)))
</text>
<text>    (process-node-list
</text>
<text>     (node-list-filter-by-gi
</text>
<text>      (children (current-node))
</text>
<text>      (list (normalize &quot;constructorsynopsis&quot;)
</text>
<text>	    (normalize &quot;destructorsynopsis&quot;)
</text>
<text>	    (normalize &quot;fieldsynopsis&quot;)
</text>
<text>	    (normalize &quot;methodsynopsis&quot;)
</text>
<text>	    (normalize &quot;classsynopsisinfo&quot;)))))))
</text>
<text>
</text>
<text>(element classsynopsisinfo
</text>
<text>  ($verbatim-display$ %indent-classsynopsisinfo-lines%
</text>
<text>		      %number-classsynopsisinfo-lines%))
</text>
<text>
</text>
<text>(element modifier
</text>
<text>  (literal &quot;Perl ClassSynopses don't use Modifiers&quot;))
</text>
<text>
</text>
<text>(element classname
</text>
<text>  (if (first-sibling?)
</text>
<text>      (process-children)
</text>
<text>      (make sequence
</text>
<text>	(process-children)
</text>
<text>	(if (last-sibling?)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal &quot;, &quot;)))))
</text>
<text>
</text>
<text>(element fieldsynopsis
</text>
<text>  (make paragraph
</text>
<text>    use: inline-verbatim-style
</text>
<text>    (literal &quot;  &quot;);
</text>
<text>    (process-children)
</text>
<text>    (literal &quot;;&quot;)))
</text>
<text>
</text>
<text>(element type
</text>
<text>  (make sequence
</text>
<text>    (process-children)
</text>
<text>    (literal &quot; &quot;)))
</text>
<text>
</text>
<text>(element varname
</text>
<text>  (make sequence
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element initializer
</text>
<text>  (make sequence
</text>
<text>    (literal &quot; = &quot;)
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element constructorsynopsis
</text>
<text>  (perl-method-synopsis))
</text>
<text>
</text>
<text>(element destructorsynopsis
</text>
<text>  (perl-method-synopsis))
</text>
<text>
</text>
<text>(element methodsynopsis
</text>
<text>  (perl-method-synopsis))
</text>
<text>
</text>
<text>(element void
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element methodname
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element methodparam
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(empty-sosofo)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element parameter
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element exceptionname
</text>
<text>  (literal &quot;Perl ClassSynopses don't use Exceptions&quot;))
</text>
<text>
</text>
<text>)
</text>
<text>
</text>
<text>(define (perl-method-synopsis #!optional (nd (current-node)))
</text>
<text>  (let* ((modifiers  (select-elements (children nd)
</text>
<text>				      (normalize &quot;modifier&quot;)))
</text>
<text>	 (notmod     (node-list-filter-by-not-gi
</text>
<text>		      (children nd)
</text>
<text>		      (list (normalize &quot;modifier&quot;))))
</text>
<text>	 (type       (if (equal? (gi (node-list-first notmod)) 
</text>
<text>				 (normalize &quot;methodname&quot;))
</text>
<text>			 (empty-node-list)
</text>
<text>			 (node-list-first notmod)))
</text>
<text>	 (methodname (select-elements (children nd)
</text>
<text>				      (normalize &quot;methodname&quot;)))
</text>
<text>	 (param      (node-list-filter-by-gi (node-list-rest notmod)
</text>
<text>					     (list (normalize &quot;type&quot;)
</text>
<text>						   (normalize &quot;void&quot;))))
</text>
<text>	 (excep      (select-elements (children nd)
</text>
<text>				      (normalize &quot;exceptionname&quot;))))
</text>
<text>    (make paragraph
</text>
<text>      use: inline-verbatim-style
</text>
<text>      (literal &quot;sub &quot;)
</text>
<text>      (process-node-list modifiers)
</text>
<text>      (process-node-list type)
</text>
<text>      (process-node-list methodname)
</text>
<text>      (literal &quot; { ... }&quot;))))
</text>
<text>
</text>
<text>;; ===== IDL =========================================================
</text>
<text>
</text>
<text>(mode cs-idl-mode
</text>
<text>
</text>
<text>(element classsynopsis
</text>
<text>  (let* ((modifiers    (select-elements (children (current-node))
</text>
<text>					(normalize &quot;modifier&quot;)))
</text>
<text>	 (classes      (select-elements (children (current-node))
</text>
<text>					(normalize &quot;classname&quot;)))
</text>
<text>	 (classname    (node-list-first classes))
</text>
<text>	 (superclasses (node-list-rest classes)))
</text>
<text>  (make display-group
</text>
<text>    use: verbatim-style;
</text>
<text>    (make paragraph
</text>
<text>      (literal &quot;interface &quot;)
</text>
<text>      (process-node-list modifiers)
</text>
<text>      (process-node-list classname)
</text>
<text>      (if (node-list-empty? superclasses)
</text>
<text>	  (literal &quot; &quot;)
</text>
<text>	  (make sequence
</text>
<text>	    (literal &quot; : &quot;)
</text>
<text>	    (process-node-list superclasses)))
</text>
<text>      (literal &quot;{&quot;))
</text>
<text>    (process-node-list
</text>
<text>     (node-list-filter-by-gi
</text>
<text>      (children (current-node))
</text>
<text>      (list (normalize &quot;constructorsynopsis&quot;)
</text>
<text>	    (normalize &quot;destructorsynopsis&quot;)
</text>
<text>	    (normalize &quot;fieldsynopsis&quot;)
</text>
<text>	    (normalize &quot;methodsynopsis&quot;)
</text>
<text>	    (normalize &quot;classsynopsisinfo&quot;))))
</text>
<text>    (make paragraph
</text>
<text>      (literal &quot;}&quot;)))))
</text>
<text>
</text>
<text>(element classsynopsisinfo
</text>
<text>  ($verbatim-display$ %indent-classsynopsisinfo-lines%
</text>
<text>		      %number-classsynopsisinfo-lines%))
</text>
<text>
</text>
<text>(element modifier
</text>
<text>  (make sequence
</text>
<text>    (process-children)
</text>
<text>    (literal &quot; &quot;)))
</text>
<text>
</text>
<text>(element classname
</text>
<text>  (if (first-sibling?)
</text>
<text>      (process-children)
</text>
<text>      (make sequence
</text>
<text>	(process-children)
</text>
<text>	(if (last-sibling?)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal &quot;, &quot;)))))
</text>
<text>
</text>
<text>(element fieldsynopsis
</text>
<text>  (make paragraph
</text>
<text>    use: inline-verbatim-style
</text>
<text>    (literal &quot;  &quot;);
</text>
<text>    (process-children)
</text>
<text>    (literal &quot;;&quot;)))
</text>
<text>
</text>
<text>(element type
</text>
<text>  (make sequence
</text>
<text>    (process-children)
</text>
<text>    (literal &quot; &quot;)))
</text>
<text>
</text>
<text>(element varname
</text>
<text>  (make sequence
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element initializer
</text>
<text>  (make sequence
</text>
<text>    (literal &quot; = &quot;)
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element constructorsynopsis
</text>
<text>  (idl-method-synopsis))
</text>
<text>
</text>
<text>(element destructorsynopsis
</text>
<text>  (idl-method-synopsis))
</text>
<text>
</text>
<text>(element methodsynopsis
</text>
<text>  (idl-method-synopsis))
</text>
<text>
</text>
<text>(element void
</text>
<text>  (literal &quot;void &quot;))
</text>
<text>
</text>
<text>(element methodname
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element methodparam
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(empty-sosofo)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element parameter
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element exceptionname
</text>
<text>  (make sequence
</text>
<text>    (if (first-sibling?)
</text>
<text>	(literal &quot; raises(&quot;)
</text>
<text>	(literal &quot;, &quot;))
</text>
<text>    (process-children)
</text>
<text>    (if (last-sibling?)
</text>
<text>	(literal &quot;)&quot;)
</text>
<text>	(empty-sosofo))))
</text>
<text>)
</text>
<text>
</text>
<text>(define (idl-method-synopsis #!optional (nd (current-node)))
</text>
<text>  (let* ((modifiers  (select-elements (children nd)
</text>
<text>				      (normalize &quot;modifier&quot;)))
</text>
<text>	 (notmod     (node-list-filter-by-not-gi
</text>
<text>		      (children nd)
</text>
<text>		      (list (normalize &quot;modifier&quot;))))
</text>
<text>	 (type       (if (equal? (gi (node-list-first notmod)) 
</text>
<text>				 (normalize &quot;methodname&quot;))
</text>
<text>			 (empty-node-list)
</text>
<text>			 (node-list-first notmod)))
</text>
<text>	 (methodname (select-elements (children nd)
</text>
<text>				      (normalize &quot;methodname&quot;)))
</text>
<text>	 (param      (node-list-filter-by-gi (node-list-rest notmod)
</text>
<text>					     (list (normalize &quot;methodparam&quot;))))
</text>
<text>	 (excep      (select-elements (children nd)
</text>
<text>				      (normalize &quot;exceptionname&quot;))))
</text>
<text>    (make paragraph
</text>
<text>      use: inline-verbatim-style
</text>
<text>      (process-node-list modifiers)
</text>
<text>      (process-node-list type)
</text>
<text>      (process-node-list methodname)
</text>
<text>      (literal &quot;(&quot;)
</text>
<text>      (process-node-list param)
</text>
<text>      (literal &quot;)&quot;)
</text>
<text>      (process-node-list excep)
</text>
<text>      (literal &quot;;&quot;))))
</text>
<text>
</text>
<text>;; ===== Python ======================================================
</text>
<text>;; Contributed by Lane Stevens, lane@cycletime.com
</text>
<text>
</text>
<text>(mode cs-python-mode
</text>
<text>  (element classsynopsis
</text>
<text>    (let* ((classes      (select-elements (children (current-node))
</text>
<text>					  (normalize &quot;ooclass&quot;)))
</text>
<text>	   (classname    (node-list-first classes))
</text>
<text>	   (superclasses (node-list-rest classes)))
</text>
<text>      (make display-group
</text>
<text>	use: verbatim-style
</text>
<text>	(make paragraph
</text>
<text>	  (literal &quot;class &quot;)
</text>
<text>	  (process-node-list classname)
</text>
<text>	  (literal &quot;(&quot;)
</text>
<text>	  (process-node-list superclasses)
</text>
<text>	  (literal &quot;) :&quot;))
</text>
<text>	(process-node-list
</text>
<text>	 (node-list-filter-by-gi
</text>
<text>	  (children (current-node))
</text>
<text>	  (list (normalize &quot;constructorsynopsis&quot;)
</text>
<text>		(normalize &quot;destructorsynopsis&quot;)
</text>
<text>		(normalize &quot;fieldsynopsis&quot;)
</text>
<text>		(normalize &quot;methodsynopsis&quot;)
</text>
<text>		(normalize &quot;classsynopsisinfo&quot;))))
</text>
<text>	)
</text>
<text>      )
</text>
<text>    )
</text>
<text>
</text>
<text>  (element ooclass
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (cond
</text>
<text>       ((first-sibling?) (literal &quot; &quot;))
</text>
<text>       ((last-sibling?) (empty-sosofo))
</text>
<text>       (#t (literal &quot;, &quot;))
</text>
<text>       )
</text>
<text>      )
</text>
<text>    )
</text>
<text>  
</text>
<text>  (element methodsynopsis
</text>
<text>    (python-method-synopsis))
</text>
<text>  
</text>
<text>  (element classname
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element initializer
</text>
<text>    (make sequence
</text>
<text>      (literal &quot; = &quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element methodname
</text>
<text>    (process-children))
</text>
<text>
</text>
<text>  (element methodparam
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (last-sibling?)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      )
</text>
<text>    )
</text>
<text>
</text>
<text>  (element parameter
</text>
<text>    (process-children))
</text>
<text>  )
</text>
<text>
</text>
<text>(define (python-method-synopsis #!optional (nd (current-node)))
</text>
<text>  (let* ((the-method-name (select-elements (children nd) (normalize &quot;methodname&quot;)))
</text>
<text>	 (the-method-params (select-elements (children nd) (normalize &quot;methodparam&quot;)))
</text>
<text>	 )
</text>
<text>    (make paragraph
</text>
<text>      use: inline-verbatim-style
</text>
<text>      (literal &quot;    def &quot;)
</text>
<text>      (process-node-list the-method-name)
</text>
<text>      (literal &quot;(&quot;)
</text>
<text>      (process-node-list the-method-params)
</text>
<text>      (literal &quot;) :&quot;))
</text>
<text>    )
</text>
<text>  )
</text>
<text>
</text>
<text>;; EOF
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbtable.dsl,v 1.3 2003/02/17 08:56:46 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>;; Table support completely reimplemented by norm 15/16 Nov 1997
</text>
<text>;;
</text>
<text>;; ======================================================================
</text>
<text>;;
</text>
<text>;; This code is intended to implement the SGML Open Exchange Table Model
</text>
<text>;; (http://www.sgmlopen.org/sgml/docs/techpubs.htm) as far as is possible
</text>
<text>;; in RTF.  There are a few areas where this code probably fails to 
</text>
<text>;; perfectly implement the model:
</text>
<text>;;
</text>
<text>;; - Mixed column width units (4*+2pi) are not supported.
</text>
<text>;; - The behavior that results from mixing relative units with 
</text>
<text>;;   absolute units has not been carefully considered.
</text>
<text>;; - TFOOT appears at the bottom of the table, but is not repeated
</text>
<text>;;   across the bottom of pages (RTF limitation).
</text>
<text>;; - ENTRYTBL is not supported.
</text>
<text>;; - Rotated tables (e.g. landscape tables in a portrait document)
</text>
<text>;;   cannot be supported in a simple-page-sequence
</text>
<text>;;
</text>
<text>;; </text>
<text>======================================================================
</text>
<text>;; 
</text>
<text>;; My goal in reimplementing the table model was to provide correct
</text>
<text>;; formatting in tables that use MOREROWS. The difficulty is that
</text>
<text>;; correct formatting depends on calculating the column into which
</text>
<text>;; an ENTRY will fall.
</text>
<text>;;
</text>
<text>;; This is a non-trivial problem because MOREROWS can hang down from
</text>
<text>;; preceding rows and ENTRYs may specify starting columns (skipping
</text>
<text>;; preceding ones).
</text>
<text>;;
</text>
<text>;; A simple, elegant recursive algorithm exists. Unfortunately it 
</text>
<text>;; requires calculating the column number of every preceding cell 
</text>
<text>;; in the entire table. Without memoization, performance is unacceptable
</text>
<text>;; even in relatively small tables (5x5, for example).
</text>
<text>;;
</text>
<text>;; In order to avoid recursion, the algorithm used below is one that
</text>
<text>;; works forward from the beginning of the table and &quot;passes along&quot;
</text>
<text>;; the relevant information (column number of the preceding cell and
</text>
<text>;; overhang from the MOREROWS in preceding rows).
</text>
<text>;;
</text>
<text>;; Unfortunately, this means that element construction rules
</text>
<text>;; can't always be used to fire the appropriate rule.  Instead,
</text>
<text>;; each TGROUP has to process each THEAD/BODY/FOOT explicitly.
</text>
<text>;; And each of those must process each ROW explicitly, then each
</text>
<text>;; ENTRY/ENTRYTBL explicitly.
</text>
<text>;;
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>;;
</text>
<text>;; I attempted to simplify this code by relying on inheritence from
</text>
<text>;; table-column flow objects, but that wasn't entirely successful.
</text>
<text>;; Horizontally spanning cells didn't seem to inherit from table-column
</text>
<text>;; flow objects that didn't specify equal spanning.  There seemed to
</text>
<text>;; be other problems as well, but they could have been caused by coding
</text>
<text>;; errors on my part.
</text>
<text>;; 
</text>
<text>;; Anyway, by the time I understood how I could use table-column
</text>
<text>;; flow objects for inheritence, I'd already implemented all the
</text>
<text>;; machinery below to &quot;work it out by hand&quot;.  
</text>
<text>;;
</text>
<text>;; ======================================================================
</text>
<text>;; NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE 
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>;; A fairly large chunk of this code is in dbcommon.dsl!
</text>
<text>;; ======================================================================
</text>
<text>;;
</text>
<text>
</text>
<text>;; Default value for FRAME= on tables
</text>
<text>(define ($cals-frame-default$) (normalize &quot;all&quot;))
</text>
<text>
</text>
<text>;; Default for COLSEP/ROWSEP if unspecified.
</text>
<text>(define ($cals-rowsep-default$ #!optional (node (current-node)))
</text>
<text>  ;; Return &quot;0&quot; for #f, &quot;1&quot; for #t
</text>
<text>  ;; Default is to have rules if FRAME=ALL, otherwise not.  Except
</text>
<text>  ;; that a separator between HEAD and BODY is controlled by
</text>
<text>  ;; %table-head-body-border%.
</text>
<text>  ;; 
</text>
<text>  (let* ((table (ancestor-member node ($table-element-list$)))
</text>
<text>	 (frame (if (attribute-string (normalize &quot;frame&quot;) table)
</text>
<text>		    (attribute-string (normalize &quot;frame&quot;) table)
</text>
<text>		    ($cals-frame-default$)))
</text>
<text>	 (row   (ancestor-member node (list (normalize &quot;row&quot;)))))
</text>
<text>    (if (equal? frame (normalize &quot;all&quot;))
</text>
<text>	#t
</text>
<text>	(if (and (equal? (gi (parent row)) (normalize &quot;thead&quot;))
</text>
<text>		 (last-sibling? row))
</text>
<text>	    %table-head-body-border%
</text>
<text>	    #f))))
</text>
<text>
</text>
<text>(define ($cals-colsep-default$ #!optional (node (current-node)))
</text>
<text>  ;; Default is to have rules if FRAME=ALL, otherwise not.
</text>
<text>  ;;
</text>
<text>  (let* ((table (ancestor-member node ($table-element-list$)))
</text>
<text>	 (frame (if (attribute-string (normalize &quot;frame&quot;) table)
</text>
<text>		    (attribute-string (normalize &quot;frame&quot;) table)
</text>
<text>		    ($cals-frame-default$))))
</text>
<text>    (equal? frame (normalize &quot;all&quot;))))
</text>
<text>
</text>
<text>;; Default for VALIGN if unspecified
</text>
<text>(define ($cals-valign-default$) (normalize &quot;top&quot;))
</text>
<text>
</text>
<text>;; Margins around cell contents
</text>
<text>(define %cals-cell-before-row-margin% 3pt)
</text>
<text>(define %cals-cell-after-row-margin% 3pt)
</text>
<text>
</text>
<text>(define %cals-cell-before-column-margin% 3pt)
</text>
<text>
</text>
<text>(define %cals-cell-after-column-margin% 3pt)
</text>
<text>
</text>
<text>;; Inheritable start and end indent for cell contents
</text>
<text>(define %cals-cell-content-start-indent% 2pt)
</text>
<text>(define %cals-cell-content-end-indent% 2pt)
</text>
<text>
</text>
<text>;; How to indent pgwide tables?  (Non-pgwide tables get inherited-start-indent
</text>
<text>(define %cals-pgwide-start-indent% %body-start-indent%)
</text>
<text>
</text>
<text>;; What alignment should tables have on the page
</text>
<text>(define %cals-display-align% 'start)
</text>
<text>
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>;; Table rule widths
</text>
<text>
</text>
<text>(define %table-before-row-border% #t)
</text>
<text>(define %table-after-row-border% #t)
</text>
<text>(define %table-before-column-border% #t) 
</text>
<text>(define %table-after-column-border% #t)
</text>
<text>(define %table-head-body-border% #t)
</text>
<text>(define %table-cell-after-column-border% #t)
</text>
<text>(define %table-cell-after-row-border% #t)
</text>
<text>
</text>
<text>;;(define tbl-color-space 
</text>
<text>;;  (color-space &quot;ISO/IEC 10179:1996//Color-Space Family::Device RGB&quot;))
</text>
<text>;;
</text>
<text>;;(define tbl-red (color tbl-color-space 1 0 0))
</text>
<text>;;(define tbl-green (color tbl-color-space 0 1 0))
</text>
<text>;;(define tbl-blue (color tbl-color-space 0 0 1))
</text>
<text>
</text>
<text>(define calc-table-before-row-border
</text>
<text>  (if (boolean? %table-before-row-border%)
</text>
<text>      %table-before-row-border%
</text>
<text>      ;; Avoid problems with the DSSSL compiler when 
</text>
<text>      ;; %table-before-row-border% is boolean.
</text>
<text>      (let ((border-width %table-before-row-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>(define calc-table-after-row-border
</text>
<text>  (if (boolean? %table-after-row-border%)
</text>
<text>      %table-after-row-border%
</text>
<text>      (let ((border-width %table-after-row-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>(define calc-table-before-column-border
</text>
<text>  (if (boolean? %table-before-column-border%)
</text>
<text>      %table-before-column-border%
</text>
<text>      (let ((border-width %table-before-column-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>(define calc-table-after-column-border
</text>
<text>  (if (boolean? %table-after-column-border%)
</text>
<text>      %table-after-column-border%
</text>
<text>      (let ((border-width %table-after-column-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>(define calc-table-head-body-border
</text>
<text>  (if (boolean? %table-head-body-border%)
</text>
<text>      %table-head-body-border%
</text>
<text>      (let ((border-width %table-head-body-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>(define calc-table-cell-after-column-border
</text>
<text>  (if (boolean? %table-cell-after-column-border%)
</text>
<text>      %table-cell-after-column-border%
</text>
<text>      (let ((border-width %table-cell-after-column-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>(define calc-table-cell-after-row-border
</text>
<text>  (if (boolean? %table-cell-after-row-border%)
</text>
<text>      %table-cell-after-row-border%
</text>
<text>      (let ((border-width %table-cell-after-row-border%))
</text>
<text>	(make table-border
</text>
<text>	  line-thickness: border-width))))
</text>
<text>
</text>
<text>;; ----------------------------------------------------------------------
</text>
<text>;; Convert colwidth units into table-unit measurements
</text>
<text>
</text>
<text>(define (colwidth-unit lenstr)
</text>
<text>  (if (string? lenstr)
</text>
<text>      (let ((number (length-string-number-part lenstr))
</text>
<text>	    (units  (length-string-unit-part lenstr)))
</text>
<text>	(if (string=? units &quot;*&quot;)
</text>
<text>	    (if (string=? number &quot;&quot;)
</text>
<text>		(table-unit 1)
</text>
<text>		(table-unit (string-&gt;number number)))
</text>
<text>	    (if (string=? units &quot;&quot;)
</text>
<text>		;; no units, default to points
</text>
<text>		(* (string-&gt;number number) 1pt)
</text>
<text>		(let* ((unum  (string-&gt;number number))
</text>
<text>		       (uname (case-fold-down units)))
</text>
<text>		  (case uname
</text>
<text>		    ((&quot;mm&quot;) (* unum 1mm))
</text>
<text>		    ((&quot;cm&quot;) (* unum 1cm))
</text>
<text>		    ((&quot;in&quot;) (* unum 1in))
</text>
<text>		    ((&quot;pi&quot;) (* unum 1pi))
</text>
<text>		    ((&quot;pt&quot;) (* unum 1pt))
</text>
<text>		    ((&quot;px&quot;) (* unum 1px))
</text>
<text>		    ;; unrecognized units; use points
</text>
<text>		    (else   (* unum 1pt)))))))
</text>
<text>      ;; lenstr is not a string...probably #f
</text>
<text>      (table-unit 1)))
</text>
<text>
</text>
<text>
</text>
<text>(define (cell-align cell colnum)
</text>
<text>  (let* ((entry     (ancestor-member cell (list (normalize &quot;entry&quot;)
</text>
<text>						(normalize &quot;entrytbl&quot;))))
</text>
<text>	 (tgroup    (find-tgroup entry))
</text>
<text>	 (spanname  (attribute-string (normalize &quot;spanname&quot;) entry))
</text>
<text>	 (calsalign (if (attribute-string (normalize &quot;align&quot;) entry)
</text>
<text>			(attribute-string (normalize &quot;align&quot;) entry)
</text>
<text>			(if (and spanname 
</text>
<text>				 (spanspec-align (find-spanspec spanname)))
</text>
<text>			    (spanspec-align (find-spanspec spanname))
</text>
<text>			    (if (colspec-align (find-colspec-by-number colnum))
</text>
<text>				(colspec-align (find-colspec-by-number colnum))
</text>
<text>				(if (tgroup-align tgroup)
</text>
<text>				    (tgroup-align tgroup)
</text>
<text>				    (normalize &quot;left&quot;)))))))
</text>
<text>    (cond
</text>
<text>     ((equal? calsalign (normalize &quot;left&quot;)) 'start)
</text>
<text>     ((equal? calsalign (normalize &quot;center&quot;)) 'center)
</text>
<text>     ((equal? calsalign (normalize &quot;right&quot;)) 'end)
</text>
<text>     (else 'start))))
</text>
<text>    
</text>
<text>(define (cell-valign cell colnum)
</text>
<text>  (let* ((entry      (ancestor-member cell (list (normalize &quot;entry&quot;)
</text>
<text>						 (normalize &quot;entrytbl&quot;))))
</text>
<text>	 (row        (ancestor (normalize &quot;row&quot;) entry))
</text>
<text>	 (tbody      (ancestor-member cell (list (normalize &quot;tbody&quot;) 
</text>
<text>						 (normalize &quot;thead&quot;)
</text>
<text>						 (normalize &quot;tfoot&quot;))))
</text>
<text>	 (tgroup     (ancestor (normalize &quot;tgroup&quot;) entry))
</text>
<text>	 (calsvalign (if (attribute-string (normalize &quot;valign&quot;) entry)
</text>
<text>			 (attribute-string (normalize &quot;valign&quot;) entry)
</text>
<text>			 (if (attribute-string (normalize &quot;valign&quot;) row)
</text>
<text>			     (attribute-string (normalize &quot;valign&quot;) row)
</text>
<text>			     (if (attribute-string (normalize &quot;valign&quot;) tbody)
</text>
<text>				 (attribute-string (normalize &quot;valign&quot;) tbody)
</text>
<text>				 ($cals-valign-default$))))))
</text>
<text>    (cond
</text>
<text>     ((equal? calsvalign (normalize &quot;top&quot;)) 'start)
</text>
<text>     ((equal? calsvalign (normalize &quot;middle&quot;)) 'center)
</text>
<text>     ((equal? calsvalign (normalize &quot;bottom&quot;)) 'end)
</text>
<text>     (else 'start))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Element rules
</text>
<text>
</text>
<text>(element tgroup
</text>
<text>  (let ((frame-attribute (if (inherited-attribute-string (normalize &quot;frame&quot;))
</text>
<text>			     (inherited-attribute-string (normalize &quot;frame&quot;))
</text>
<text>			     ($cals-frame-default$))))
</text>
<text>    (make table
</text>
<text>      ;; These values are used for the outer edges (well, the top, bottom
</text>
<text>      ;; and left edges for sure; I think the right edge actually comes
</text>
<text>      ;; from the cells in the last column
</text>
<text>      before-row-border:  (if (cond
</text>
<text>			       ((equal? frame-attribute (normalize &quot;all&quot;)) #t)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;sides&quot;)) #f)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;top&quot;)) #t)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;bottom&quot;)) #f)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;topbot&quot;)) #t)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;none&quot;)) #f)
</text>
<text>			       (else #f))
</text>
<text>			      calc-table-before-row-border
</text>
<text>			      #f)
</text>
<text>      after-row-border:   (if (cond
</text>
<text>			       ((equal? frame-attribute (normalize &quot;all&quot;)) #t)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;sides&quot;)) #f)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;top&quot;)) #f)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;bottom&quot;)) #t)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;topbot&quot;)) #t)
</text>
<text>			       ((equal? frame-attribute (normalize &quot;none&quot;)) #f)
</text>
<text>			       (else #f))
</text>
<text>			      calc-table-after-row-border
</text>
<text>			      #f)
</text>
<text>      before-column-border: (if (cond
</text>
<text>				 ((equal? frame-attribute (normalize &quot;all&quot;)) #t)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;sides&quot;)) #t)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;top&quot;)) #f)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;bottom&quot;)) #f)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;topbot&quot;)) #f)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;none&quot;)) #f)
</text>
<text>				 (else #f))
</text>
<text>				calc-table-before-column-border
</text>
<text>				#f)
</text>
<text>      after-column-border:  (if (cond
</text>
<text>				 ((equal? frame-attribute (normalize &quot;all&quot;)) #t)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;sides&quot;)) #t)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;top&quot;)) #f)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;bottom&quot;)) #f)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;topbot&quot;)) #f)
</text>
<text>				 ((equal? frame-attribute (normalize &quot;none&quot;)) #f)
</text>
<text>				 (else #f))
</text>
<text>				calc-table-after-column-border
</text>
<text>				#f)
</text>
<text>      display-alignment: %cals-display-align%
</text>
<text>      (make table-part
</text>
<text>	content-map: '((thead header)
</text>
<text>		       (tbody #f)
</text>
<text>		       (tfoot footer))
</text>
<text>	($process-colspecs$ (current-node))
</text>
<text>	(process-children)
</text>
<text>	(make-table-endnotes)))))
</text>
<text>
</text>
<text>(element colspec
</text>
<text>  ;; now handled by $process-colspecs$ at the top of each tgroup...
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element spanspec
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element thead
</text>
<text>  ($process-table-body$ (current-node)))
</text>
<text>
</text>
<text>(element tfoot
</text>
<text>  ($process-table-body$ (current-node)))
</text>
<text>
</text>
<text>(element tbody
</text>
<text>  ($process-table-body$ (current-node)))
</text>
<text>
</text>
<text>(element row
</text>
<text>  (empty-sosofo)) ;; this should never happen, they're processed explicitly
</text>
<text>
</text>
<text>(element entry
</text>
<text>  (empty-sosofo)) ;; this should never happen, they're processed explicitly
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Functions that handle processing of table bodies, rows, and cells
</text>
<text>
</text>
<text>(define ($process-colspecs$ tgroup)
</text>
<text>  (let* ((cols (string-&gt;number (attribute-string (normalize &quot;cols&quot;)))))
</text>
<text>    (let loop ((colnum 1))
</text>
<text>      (if (&gt; colnum cols)
</text>
<text>	  (empty-sosofo)
</text>
<text>	  (make sequence
</text>
<text>	    (let ((colspec (find-colspec-by-number colnum)))
</text>
<text>	      (if (node-list-empty? colspec)
</text>
<text>		  (make table-column
</text>
<text>		    column-number: colnum
</text>
<text>		    width: (colwidth-unit &quot;1*&quot;))
</text>
<text>		  ($process-colspec$ colspec colnum)))
</text>
<text>	    (loop (+ colnum 1)))))))
</text>
<text>
</text>
<text>(define ($process-colspec$ colspec colnum)
</text>
<text>  (let* ((colwidth (if (attribute-string (normalize &quot;colwidth&quot;) colspec)
</text>
<text>		       (attribute-string (normalize &quot;colwidth&quot;) colspec)
</text>
<text>		       &quot;1*&quot;)))
</text>
<text>    (make table-column
</text>
<text>      column-number: colnum
</text>
<text>      width: (colwidth-unit colwidth))))
</text>
<text>
</text>
<text>(define ($process-table-body$ body)
</text>
<text>  (let* ((tgroup (ancestor (normalize &quot;tgroup&quot;) body))
</text>
<text>	 (cols   (string-&gt;number (attribute-string (normalize &quot;cols&quot;) tgroup)))
</text>
<text>	 (blabel (cond 
</text>
<text>		   ((equal? (gi body) (normalize &quot;thead&quot;)) 'thead)
</text>
<text>		   ((equal? (gi body) (normalize &quot;tbody&quot;)) 'tbody)
</text>
<text>		   ((equal? (gi body) (normalize &quot;tfoot&quot;)) 'tfoot))))
</text>
<text>    (make sequence
</text>
<text>      label: blabel
</text>
<text>      (let loop ((rows (select-elements (children body) (normalize &quot;row&quot;)))
</text>
<text>		 (overhang (constant-list 0 cols)))
</text>
<text>	(if (node-list-empty? rows)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      ($process-row$ (node-list-first rows) overhang)
</text>
<text>	      (loop (node-list-rest rows)
</text>
<text>		    (update-overhang (node-list-first rows) overhang))))))))
</text>
<text>
</text>
<text>(define ($process-row$ row overhang)
</text>
<text>  (let* ((tgroup           (ancestor (normalize &quot;tgroup&quot;) row))
</text>
<text>	 (maxcol           (string-&gt;number (attribute-string 
</text>
<text>					    (normalize &quot;cols&quot;) tgroup)))
</text>
<text>	 (lastentry        (node-list-last (node-list-filter-out-pis 
</text>
<text>					    (children row))))
</text>
<text>	 (table            (parent tgroup)))
</text>
<text>    ;; there's no point calculating the row or colsep here, each cell
</text>
<text>    ;; specifies it which overrides anything we might say here...
</text>
<text>    (make table-row
</text>
<text>      (let loop ((cells (node-list-filter-out-pis (children row)))
</text>
<text>		 (prevcell (empty-node-list)))
</text>
<text>	(if (node-list-empty? cells)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      ($process-cell$ (node-list-first cells) prevcell row overhang)
</text>
<text>	      (loop (node-list-rest cells) (node-list-first cells)))))
</text>
<text>      
</text>
<text>      ;; add any necessary empty cells to the end of the row
</text>
<text>      (let loop ((colnum (+ (cell-column-number lastentry overhang)
</text>
<text>			    (hspan lastentry))))
</text>
<text>	(if (&gt; colnum maxcol)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      ($process-empty-cell$ colnum row)
</text>
<text>	      (loop (+ </text>
<text>colnum 1))))))))
</text>
<text>
</text>
<text>(define ($process-cell$ entry preventry row overhang)
</text>
<text>  (let* ((colnum    (cell-column-number entry overhang))
</text>
<text>	 (lastcellcolumn (if (node-list-empty? preventry)
</text>
<text>			     0
</text>
<text>			     (- (+ (cell-column-number preventry overhang)
</text>
<text>				   (hspan preventry))
</text>
<text>				1)))
</text>
<text>	 (lastcolnum (if (&gt; lastcellcolumn 0)
</text>
<text>			 (overhang-skip overhang lastcellcolumn)
</text>
<text>			 0))
</text>
<text>	 (font-name (if (have-ancestor? (normalize &quot;thead&quot;) entry)
</text>
<text>			%title-font-family%
</text>
<text>			%body-font-family%))
</text>
<text>	 (weight    (if (have-ancestor? (normalize &quot;thead&quot;) entry)
</text>
<text>			'bold
</text>
<text>			'medium))
</text>
<text>	 (align     (cell-align entry colnum)))
</text>
<text>
</text>
<text>    (make sequence
</text>
<text>      ;; This is a little bit complicated.  We want to output empty cells
</text>
<text>      ;; to skip over missing data.  We start count at the column number
</text>
<text>      ;; arrived at by adding 1 to the column number of the previous entry
</text>
<text>      ;; and skipping over any MOREROWS overhanging entrys.  Then for each
</text>
<text>      ;; iteration, we add 1 and skip over any overhanging entrys.
</text>
<text>      (let loop ((count (overhang-skip overhang (+ lastcolnum 1))))
</text>
<text>	(if (&gt;= count colnum)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      ($process-empty-cell$ count row)
</text>
<text>	      (loop (overhang-skip overhang (+ count 1))))))
</text>
<text>
</text>
<text>      ;; Now we've output empty cells for any missing entries, so we 
</text>
<text>      ;; are ready to output the cell for this entry...
</text>
<text>      (make table-cell 
</text>
<text>	column-number: colnum
</text>
<text>	n-columns-spanned: (hspan entry)
</text>
<text>	n-rows-spanned: (vspan entry)
</text>
<text>
</text>
<text>	cell-row-alignment: (cell-valign entry colnum)
</text>
<text>
</text>
<text>	cell-after-column-border: (if (cell-colsep entry colnum)
</text>
<text>				      calc-table-cell-after-column-border
</text>
<text>				      #f)
</text>
<text>
</text>
<text>	cell-after-row-border: (if (cell-rowsep entry colnum)
</text>
<text>				   (if (last-sibling? (parent entry))
</text>
<text>				       calc-table-head-body-border
</text>
<text>				       calc-table-cell-after-row-border)
</text>
<text>				   #f)
</text>
<text>
</text>
<text>	cell-before-row-margin: %cals-cell-before-row-margin%
</text>
<text>	cell-after-row-margin: %cals-cell-after-row-margin%
</text>
<text>	cell-before-column-margin: %cals-cell-before-column-margin%
</text>
<text>	cell-after-column-margin: %cals-cell-after-column-margin%
</text>
<text>
</text>
<text>	;; If there is some additional indentation (because we're in a list,
</text>
<text>	;; for example) make sure that gets passed along, but don't add
</text>
<text>	;; the normal body-start-indent.
</text>
<text>	start-indent: (+ (- (inherited-start-indent) %body-start-indent%)
</text>
<text>			 %cals-cell-content-start-indent%)
</text>
<text>	end-indent: %cals-cell-content-end-indent%
</text>
<text>	(if (equal? (gi entry) (normalize &quot;entrytbl&quot;))
</text>
<text>	    (make paragraph 
</text>
<text>	      (literal &quot;ENTRYTBL not supported.&quot;))
</text>
<text>	    (make paragraph
</text>
<text>	      font-family-name: font-name
</text>
<text>	      font-weight: weight
</text>
<text>	      quadding: align
</text>
<text>	      (process-node-list (children entry))))))))
</text>
<text>
</text>
<text>(define (empty-cell-colsep colnum row)
</text>
<text>  (let* ((tgroup    (ancestor (normalize &quot;tgroup&quot;) row))
</text>
<text>	 (table     (parent tgroup))
</text>
<text>	 (calscolsep 
</text>
<text>	  (if (tgroup-colsep tgroup)
</text>
<text>	      (tgroup-colsep tgroup)
</text>
<text>	      (if (attribute-string (normalize &quot;colsep&quot;) table)
</text>
<text>		  (attribute-string (normalize &quot;colsep&quot;) table)
</text>
<text>		  (if ($cals-colsep-default$ row)
</text>
<text>		      &quot;1&quot;
</text>
<text>		      &quot;0&quot;)))))
</text>
<text>    (&gt; (string-&gt;number calscolsep) 0)))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>
</text>
<text>(define (cell-colsep cell colnum)
</text>
<text>  (let* ((entry     (ancestor-member cell (list (normalize &quot;entry&quot;) (normalize &quot;entrytbl&quot;))))
</text>
<text>	 (spanname  (attribute-string (normalize &quot;spanname&quot;) entry))
</text>
<text>	 (tgroup    (find-tgroup entry))
</text>
<text>	 (table     (parent tgroup))
</text>
<text>	 (calscolsep 
</text>
<text>	  (if (attribute-string (normalize &quot;colsep&quot;) entry)
</text>
<text>	      (attribute-string (normalize &quot;colsep&quot;) entry)
</text>
<text>	      (if (and spanname 
</text>
<text>		       (spanspec-colsep (find-spanspec spanname)))
</text>
<text>		  (spanspec-colsep (find-spanspec spanname))
</text>
<text>		  (if (colspec-colsep (find-colspec-by-number colnum))
</text>
<text>		      (colspec-colsep (find-colspec-by-number colnum))
</text>
<text>		      (if (tgroup-colsep tgroup)
</text>
<text>			  (tgroup-colsep tgroup)
</text>
<text>			  (if (attribute-string (normalize &quot;colsep&quot;) table)
</text>
<text>			      (attribute-string (normalize &quot;colsep&quot;) table)
</text>
<text>			      (if ($cals-colsep-default$ cell)
</text>
<text>				  &quot;1&quot;
</text>
<text>				  &quot;0&quot;))))))))
</text>
<text>    (&gt; (string-&gt;number calscolsep) 0)))
</text>
<text>
</text>
<text>(define (cell-rowsep cell colnum)
</text>
<text>  (let* ((entry     (ancestor-member cell (list (normalize &quot;entry&quot;) 
</text>
<text>						(normalize &quot;entrytbl&quot;))))
</text>
<text>	 (spanname  (attribute-string (normalize &quot;spanname&quot;) entry))
</text>
<text>	 (row       (ancestor (normalize &quot;row&quot;) entry))
</text>
<text>	 (tgroup    (find-tgroup entry))
</text>
<text>	 (table     (parent tgroup))
</text>
<text>	 (calsrowsep 
</text>
<text>	  (if (attribute-string (normalize &quot;rowsep&quot;) entry)
</text>
<text>	      (attribute-string (normalize &quot;rowsep&quot;) entry)
</text>
<text>	      (if (and spanname (spanspec-rowsep (find-spanspec spanname)))
</text>
<text>		  (spanspec-rowsep (find-spanspec spanname))
</text>
<text>		  (if (colspec-rowsep (find-colspec-by-number colnum))
</text>
<text>		      (colspec-rowsep (find-colspec-by-number colnum))
</text>
<text>		      (if (attribute-string (normalize &quot;rowsep&quot;) row)
</text>
<text>			  (attribute-string (normalize &quot;rowsep&quot;) row)
</text>
<text>			  (if (tgroup-rowsep tgroup)
</text>
<text>			      (tgroup-rowsep tgroup)
</text>
<text>			      (if (attribute-string (normalize &quot;rowsep&quot;) table)
</text>
<text>				  (attribute-string (normalize &quot;rowsep&quot;) table)
</text>
<text>				  (if ($cals-rowsep-default$ cell)
</text>
<text>				      &quot;1&quot;
</text>
<text>				      &quot;0&quot;)))))))))
</text>
<text>    (&gt; (string-&gt;number calsrowsep) 0)))
</text>
<text>
</text>
<text>(define (empty-cell-rowsep colnum row)
</text>
<text>  (let* ((tgroup    (ancestor (normalize &quot;tgroup&quot;) row))
</text>
<text>	 (table     (parent tgroup))
</text>
<text>	 (calsrowsep 
</text>
<text>	  (if (attribute-string (normalize &quot;rowsep&quot;) row)
</text>
<text>	      (attribute-string (normalize &quot;rowsep&quot;) row)
</text>
<text>	      (if (tgroup-rowsep tgroup)
</text>
<text>		  (tgroup-rowsep tgroup)
</text>
<text>		  (if (attribute-string (normalize &quot;rowsep&quot;) table)
</text>
<text>		      (attribute-string (normalize &quot;rowsep&quot;) table)
</text>
<text>		      (if ($cals-rowsep-default$ row)
</text>
<text>			  &quot;1&quot;
</text>
<text>			  &quot;0&quot;))))))
</text>
<text>    (&gt; (string-&gt;number calsrowsep) 0)))
</text>
<text>
</text>
<text>;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
</text>
<text>
</text>
<text>(define ($process-empty-cell$ colnum row)
</text>
<text>  (make table-cell 
</text>
<text>    column-number: colnum
</text>
<text>    n-columns-spanned: 1
</text>
<text>    n-rows-spanned: 1
</text>
<text>    cell-after-column-border: (if (empty-cell-colsep colnum row)
</text>
<text>				  calc-table-cell-after-column-border
</text>
<text>				  #f)
</text>
<text>    
</text>
<text>    cell-after-row-border: (if (empty-cell-rowsep colnum row)
</text>
<text>			       (if (last-sibling? row)
</text>
<text>				   calc-table-head-body-border
</text>
<text>				   calc-table-cell-after-row-border)
</text>
<text>			       #f)
</text>
<text>    
</text>
<text>    cell-before-row-margin: %cals-cell-before-row-margin%
</text>
<text>    cell-after-row-margin: %cals-cell-after-row-margin%
</text>
<text>    cell-before-column-margin: %cals-cell-before-column-margin%
</text>
<text>    cell-after-column-margin: %cals-cell-after-column-margin%
</text>
<text>    start-indent: %cals-cell-content-start-indent%
</text>
<text>    end-indent: %cals-cell-content-end-indent%
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>;; EOF
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbtitle.dsl,v 1.4 2003/02/17 19:42:45 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(define title-style
</text>
<text>  (style
</text>
<text>   font-family-name: %title-font-family%
</text>
<text>   font-weight: 'bold
</text>
<text>   quadding: 'start))
</text>
<text>
</text>
<text>;; So we can pass different sosofo's to this routine and get identical
</text>
<text>;; treatment (see REFNAME in dbrfntry.dsl)
</text>
<text>;;
</text>
<text>(define ($lowtitlewithsosofo$ tlevel hlevel sosofo)
</text>
<text>  (let ((hs (HSIZE (- 3 tlevel))))
</text>
<text>    (make paragraph
</text>
<text>	  font-family-name: %title-font-family%
</text>
<text>	  font-weight: 'bold
</text>
<text>	  font-size: hs
</text>
<text>	  line-spacing: (* hs %line-spacing-factor%)
</text>
<text>	  space-before: (* hs %head-before-factor%)
</text>
<text>	  space-after: (* hs %head-after-factor%)
</text>
<text>	  start-indent: %body-start-indent%
</text>
<text>	  quadding: 'start
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  heading-level: (if %generate-heading-level% hlevel 0)
</text>
<text>	  sosofo)))
</text>
<text>
</text>
<text>(define ($lowtitle$ tlevel hlevel)
</text>
<text>  ($lowtitlewithsosofo$ tlevel hlevel (process-children)))
</text>
<text>
</text>
<text>(define ($runinhead$)
</text>
<text>  (let* ((title    (data (current-node)))
</text>
<text>	 (titlelen (string-length title))
</text>
<text>	 (lastchar (string-ref title (- titlelen 1)))
</text>
<text>	 (punct    (if (member lastchar %content-title-end-punct%)
</text>
<text>		       &quot;&quot;
</text>
<text>		       %default-title-end-punct%)))
</text>
<text>    (make sequence
</text>
<text>      font-weight: 'bold
</text>
<text>      (process-children-trim)
</text>
<text>      (literal punct &quot; &quot;))))
</text>
<text>
</text>
<text>(element title ($lowtitle$ 2 4))         ;; the default TITLE format
</text>
<text>(element titleabbrev (empty-sosofo))
</text>
<text>(element subtitle (empty-sosofo))
</text>
<text>
</text>
<text>(mode title-mode
</text>
<text>  (element title
</text>
<text>    (process-children)))
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbttlpg.dsl,v 1.10 2003/02/07 13:35:40 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(define (have-sibling? sibling-gi #!optional (node (current-node)))
</text>
<text>  (let loop ((nl (children (parent node))))
</text>
<text>    (if (node-list-empty? nl) 
</text>
<text>	#f
</text>
<text>	(if (equal? (gi (node-list-first nl)) sibling-gi)
</text>
<text>	    #t
</text>
<text>	    (loop (node-list-rest nl))))))
</text>
<text>
</text>
<text>(define (titlepage-content? elements gis)
</text>
<text>  (let giloop ((gilist gis))
</text>
<text>    (if (null? gilist)
</text>
<text>	#f
</text>
<text>	(if (not (node-list-empty? (node-list-filter-by-gi 
</text>
<text>				    elements 
</text>
<text>				    (list (car gilist)))))
</text>
<text>	    #t
</text>
<text>	    (giloop (cdr gilist))))))
</text>
<text>
</text>
<text>(define (titlepage-gi-list-by-elements elements nodelist) 
</text>
<text>  ;; Elements is a list of GIs.  Nodelist is a list of nodes.
</text>
<text>  ;; This function returns all of the nodes in nodelist that
</text>
<text>  ;; are in elements in the order they occur in elements.
</text>
<text>  (let loop ((gilist elements) (rlist (empty-node-list)))
</text>
<text>    (if (null? gilist)
</text>
<text>	rlist
</text>
<text>	(loop (cdr gilist) 
</text>
<text>	      (node-list rlist (node-list-filter-by-gi 
</text>
<text>				nodelist (list (car gilist))))))))
</text>
<text>
</text>
<text>(define (titlepage-gi-list-by-nodelist elements nodelist) 
</text>
<text>  ;; Elements is a list of GIs.  Nodelist is a list of nodes.
</text>
<text>  ;; This function returns all of the nodes in nodelist that
</text>
<text>  ;; are in elements in the order they occur in nodelist.
</text>
<text>  (let loop ((nl nodelist) (rlist (empty-node-list)))
</text>
<text>    (if (node-list-empty? nl)
</text>
<text>	rlist
</text>
<text>	(if (member (gi (node-list-first nl)) elements)
</text>
<text>	    (loop (node-list-rest nl)
</text>
<text>		  (node-list rlist (node-list-first nl)))
</text>
<text>	    (loop (node-list-rest nl) rlist)))))
</text>
<text>
</text>
<text>(define (titlepage-nodelist elements nodelist)
</text>
<text>  ;; We expand BOOKBIBLIO, BIBLIOMISC, and BIBLIOSET in the element
</text>
<text>  ;; list because that level of wrapper usually isn't significant.
</text>
<text>  (let ((exp-nodelist (expand-children nodelist (list (normalize &quot;bookbiblio&quot;) 
</text>
<text>						      (normalize &quot;bibliomisc&quot;)
</text>
<text>						      (normalize &quot;biblioset&quot;)))))
</text>
<text>    (if %titlepage-in-info-order%
</text>
<text>	(titlepage-gi-list-by-nodelist elements exp-nodelist)
</text>
<text>	(titlepage-gi-list-by-elements elements exp-nodelist))))
</text>
<text>
</text>
<text>(mode titlepage-address-mode
</text>
<text>  (default (process-children)))
</text>
<text>
</text>
<text>;; == Title pages for SETs ==============================================
</text>
<text>
</text>
<text>(define (set-titlepage-recto-elements)
</text>
<text>  (list (normalize &quot;title&quot;) 
</text>
<text>	(normalize &quot;subtitle&quot;) 
</text>
<text>	(normalize &quot;graphic&quot;) 
</text>
<text>	(normalize &quot;mediaobject&quot;)
</text>
<text>	(normalize &quot;corpauthor&quot;) 
</text>
<text>	(normalize &quot;authorgroup&quot;) 
</text>
<text>	(normalize &quot;author&quot;) 
</text>
<text>	(normalize &quot;editor&quot;)))
</text>
<text>
</text>
<text>(define (set-titlepage-verso-elements)
</text>
<text>  (list (normalize &quot;title&quot;) 
</text>
<text>	(normalize &quot;subtitle&quot;) 
</text>
<text>	(normalize &quot;corpauthor&quot;) 
</text>
<text>	(normalize &quot;authorgroup&quot;) 
</text>
<text>	(normalize &quot;author&quot;) 
</text>
<text>	(normalize &quot;editor&quot;)
</text>
<text>	(normalize &quot;edition&quot;) 
</text>
<text>	(normalize &quot;pubdate&quot;) 
</text>
<text>	(normalize &quot;copyright&quot;)
</text>
<text>	(normalize &quot;legalnotice&quot;) 
</text>
<text>	(normalize &quot;revhistory&quot;)))
</text>
<text>
</text>
<text>(define (set-titlepage-content? elements side)
</text>
<text>  (titlepage-content? elements (if (equal? side 'recto)
</text>
<text>				   (set-titlepage-recto-elements)
</text>
<text>				   (set-titlepage-verso-elements))))
</text>
<text>
</text>
<text>(define (set-titlepage elements #!optional (side 'recto))
</text>
<text>  (let ((nodelist (titlepage-nodelist 
</text>
<text>		   (if (equal? side 'recto)
</text>
<text>		       (set-titlepage-recto-elements)
</text>
<text>		       (set-titlepage-verso-elements))
</text>
<text>		   elements)))
</text>
<text>;;    (make simple-page-sequence
</text>
<text>;;      page-n-columns: %titlepage-n-columns%
</text>
<text>;;      input-whitespace-treatment: 'collapse
</text>
<text>;;      use: default-text-style
</text>
<text>      (make sequence
</text>
<text>
</text>
<text>      ;; This hack is required for the RTF backend. If an external-graphic
</text>
<text>      ;; is the first thing on the page, RTF doesn't seem to do the right
</text>
<text>      ;; thing (the graphic winds up on the baseline of the first line
</text>
<text>      ;; of the page, left justified).  This &quot;one point rule&quot; fixes
</text>
<text>      ;; that problem.
</text>
<text>      (make paragraph
</text>
<text>	line-spacing: 1pt
</text>
<text>	(literal &quot;&quot;))
</text>
<text>
</text>
<text>      (let loop ((nl nodelist) (lastnode (empty-node-list)))
</text>
<text>	(if (node-list-empty? nl)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (if (or (node-list-empty? lastnode)
</text>
<text>		      (not (equal? (gi (node-list-first nl))
</text>
<text>				   (gi lastnode))))
</text>
<text>		  (set-titlepage-before (node-list-first nl) side)
</text>
<text>		  (empty-sosofo))
</text>
<text>	      (cond
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;abbrev&quot;))
</text>
<text>		 (set-titlepage-abbrev (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;abstract&quot;))
</text>
<text>		 (set-titlepage-abstract (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;address&quot;))
</text>
<text>		 (set-titlepage-address (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;affiliation&quot;))
</text>
<text>		 (set-titlepage-affiliation (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;artpagenums&quot;))
</text>
<text>		 (set-titlepage-artpagenums (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;author&quot;))
</text>
<text>		 (set-titlepage-author (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;authorblurb&quot;))
</text>
<text>		 (set-titlepage-authorblurb (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;authorgroup&quot;))
</text>
<text>		 (set-titlepage-authorgroup (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;authorinitials&quot;))
</text>
<text>		 (set-titlepage-authorinitials (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;bibliomisc&quot;))
</text>
<text>		 (set-titlepage-bibliomisc (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;biblioset&quot;))
</text>
<text>		 (set-titlepage-biblioset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;bookbiblio&quot;))
</text>
<text>		 (set-titlepage-bookbiblio (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;citetitle&quot;))
</text>
<text>		 (set-titlepage-citetitle (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;collab&quot;))
</text>
<text>		 (set-titlepage-collab (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;confgroup&quot;))
</text>
<text>		 (set-titlepage-confgroup (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;contractnum&quot;))
</text>
<text>		 (set-titlepage-contractnum (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;contractsponsor&quot;))
</text>
<text>		 (set-titlepage-contractsponsor (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;contrib&quot;))
</text>
<text>		 (set-titlepage-contrib (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;copyright&quot;))
</text>
<text>		 (set-titlepage-copyright (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;corpauthor&quot;))
</text>
<text>		 (set-titlepage-corpauthor (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;corpname&quot;))
</text>
<text>		 (set-titlepage-corpname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;date&quot;))
</text>
<text>		 (set-titlepage-date (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first </text>
<text>nl)) (normalize &quot;edition&quot;))
</text>
<text>		 (set-titlepage-edition (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;editor&quot;))
</text>
<text>		 (set-titlepage-editor (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;firstname&quot;))
</text>
<text>		 (set-titlepage-firstname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;graphic&quot;))
</text>
<text>		 (set-titlepage-graphic (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;honorific&quot;))
</text>
<text>		 (set-titlepage-honorific (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;indexterm&quot;))
</text>
<text>		 (set-titlepage-indexterm (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;invpartnumber&quot;))
</text>
<text>		 (set-titlepage-invpartnumber (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;isbn&quot;))
</text>
<text>		 (set-titlepage-isbn (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;issn&quot;))
</text>
<text>		 (set-titlepage-issn (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;issuenum&quot;))
</text>
<text>		 (set-titlepage-issuenum (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;itermset&quot;))
</text>
<text>		 (set-titlepage-itermset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;keywordset&quot;))
</text>
<text>		 (set-titlepage-keywordset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;legalnotice&quot;))
</text>
<text>		 (set-titlepage-legalnotice (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;lineage&quot;))
</text>
<text>		 (set-titlepage-lineage (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;mediaobject&quot;))
</text>
<text>		 (set-titlepage-mediaobject (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;modespec&quot;))
</text>
<text>		 (set-titlepage-modespec (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;orgname&quot;))
</text>
<text>		 (set-titlepage-orgname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;othercredit&quot;))
</text>
<text>		 (set-titlepage-othercredit (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;othername&quot;))
</text>
<text>		 (set-titlepage-othername (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;pagenums&quot;))
</text>
<text>		 (set-titlepage-pagenums (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;printhistory&quot;))
</text>
<text>		 (set-titlepage-printhistory (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;productname&quot;))
</text>
<text>		 (set-titlepage-productname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;productnumber&quot;))
</text>
<text>		 (set-titlepage-productnumber (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;pubdate&quot;))
</text>
<text>		 (set-titlepage-pubdate (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;publisher&quot;))
</text>
<text>		 (set-titlepage-publisher (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;publishername&quot;))
</text>
<text>		 (set-titlepage-publishername (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;pubsnumber&quot;))
</text>
<text>		 (set-titlepage-pubsnumber (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;releaseinfo&quot;))
</text>
<text>		 (set-titlepage-releaseinfo (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;revhistory&quot;))
</text>
<text>		 (set-titlepage-revhistory (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;seriesinfo&quot;))
</text>
<text>		 (set-titlepage-seriesinfo (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;seriesvolnums&quot;))
</text>
<text>		 (set-titlepage-seriesvolnums (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;subjectset&quot;))
</text>
<text>		 (set-titlepage-subjectset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;subtitle&quot;))
</text>
<text>		 (set-titlepage-subtitle (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;surname&quot;))
</text>
<text>		 (set-titlepage-surname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;title&quot;))
</text>
<text>		 (set-titlepage-title (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;titleabbrev&quot;))
</text>
<text>		 (set-titlepage-titleabbrev (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;volumenum&quot;))
</text>
<text>		 (set-titlepage-volumenum (node-list-first nl) side))
</text>
<text>		(else
</text>
<text>		 (set-titlepage-default (node-list-first nl) side)))
</text>
<text>	      (loop (node-list-rest nl) (node-list-first nl))))))))
</text>
<text>
</text>
<text>(define (set-titlepage-before node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (cond
</text>
<text>       ((equal? (gi node) (normalize &quot;corpauthor&quot;))
</text>
<text>	(make paragraph
</text>
<text>	  space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	  (literal &quot;\no-break-space;&quot;)))
</text>
<text>       ((equal? (gi node) (normalize &quot;authorgroup&quot;))
</text>
<text>	(if (have-sibling? (normalize &quot;corpauthor&quot;) node)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       ((equal? (gi node) (normalize &quot;author&quot;))
</text>
<text>	(if (or (have-sibling? (normalize &quot;corpauthor&quot;) node) 
</text>
<text>		(have-sibling? (normalize &quot;authorgroup&quot;) node))
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       (else (empty-sosofo)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>(define (set-titlepage-default node side)
</text>
<text>  (let ((foo (debug (string-append &quot;No set-titlepage-* for &quot; (gi node) &quot;!&quot;))))
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>(define (set-titlepage-element node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (with-mode set-titlepage-recto-mode
</text>
<text>	(process-node-list node))
</text>
<text>      (with-mode set-titlepage-verso-mode
</text>
<text>	(process-node-list node))))
</text>
<text>
</text>
<text>(define (set-titlepage-abbrev node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-abstract node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-address node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-affiliation node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-artpagenums node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-author node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-authorblurb node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-authorgroup node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-authorinitials node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-bibliomisc node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-biblioset node side)
</text>
<text>  (set-titlepage node side))
</text>
<text>(define (set-titlepage-bookbiblio node side)
</text>
<text>  (set-titlepage node side))
</text>
<text>(define (set-titlepage-citetitle node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-collab node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-confgroup node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-contractnum node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-contractsponsor node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-contrib  node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-copyright node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>
</text>
<text>(define (set-titlepage-corpauthor node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (set-titlepage-element node side)
</text>
<text>      (if (first-sibling? node)
</text>
<text>	  (make paragraph
</text>
<text>	    (with-mode set-titlepage-verso-mode
</text>
<text>	      (process-node-list
</text>
<text>	       (select-elements (children (parent node))
</text>
<text>				(normalize &quot;corpauthor&quot;)))))
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>(define (set-titlepage-corpname node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-date node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-edition node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-editor node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-firstname node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-graphic node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-honorific node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-indexterm node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-invpartnumber node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-isbn node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-issn node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-issuenum node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-itermset node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-keywordset node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-legalnotice node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-lineage node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-mediaobject node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-modespec node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-orgname node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-othercredit node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-othername node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-pagenums node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-printhistory node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-productname node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-productnumber node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-pubdate node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-publisher node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-publishername node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-pubsnumber node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-releaseinfo node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-revhistory node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-seriesinfo node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-seriesvolnums node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-subjectset node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-subtitle node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-surname node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-title node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-titleabbrev node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>(define (set-titlepage-volumenum node side)
</text>
<text>  (set-titlepage-element node side))
</text>
<text>
</text>
<text>(define set-titlepage-recto-style
</text>
<text>  (style
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: (HSIZE 1)))
</text>
<text>
</text>
<text>(define set-titlepage-verso-style
</text>
<text>  (style
</text>
<text>      font-family-name: %body-font-family%))
</text>
<text>
</text>
<text>(mode set-titlepage-recto-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (abstract para)
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    (let ((author-name  (author-string))
</text>
<text>	  (author-affil (select-elements (children (current-node)) 
</text>
<text>					 (normalize &quot;affiliation&quot;))))
</text>
<text>      (make sequence      
</text>
<text>	(make paragraph
</text>
<text>          use: set-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal author-name))
</text>
<text>	(process-node-list author-affil))))
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (authorblurb para)
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>  
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: set-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 3)
</text>
<text>	line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(process-children))
</text>
<text>      ;; This paragraph is a hack to get the spacing right.
</text>
<text>      ;; Authors always have an affiliation paragraph below them, even if
</text>
<text>      ;; it's empty, so corpauthors need one too.
</text>
<text>      (make paragraph
</text>
<text>	</text>
<text>use: set-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 1)
</text>
<text>	line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(literal &quot;\no-break-space;&quot;))))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    (let ((editor-name (author-string)))
</text>
<text>      (make sequence      
</text>
<text>	(if (first-sibling?) 
</text>
<text>	    (make paragraph
</text>
<text>	      use: set-titlepage-recto-style
</text>
<text>	      font-size: (HSIZE 1)
</text>
<text>	      line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	      space-before: (* (HSIZE 2) %head-before-factor% 6)
</text>
<text>	      quadding: %division-title-quadding%
</text>
<text>	      keep-with-next?: #t
</text>
<text>	      (literal (gentext-edited-by)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(make paragraph
</text>
<text>	  use: set-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal editor-name)))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'center)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para)
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      line-spacing: (* 0.8 (inherited-line-spacing))
</text>
<text>      font-size: (* 0.8 (inherited-font-size))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: set-titlepage-recto-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo)))))))
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle 
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 4)
</text>
<text>      line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>      quadding: %division-subtitle-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title 
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 5)
</text>
<text>      line-spacing: (* (HSIZE 5) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 5) %head-before-factor%)
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      heading-level: (if %generate-heading-level% 1 0)
</text>
<text>      (with-mode title-mode
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>(mode set-titlepage-verso-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract ($semiformal-object$))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    ;; Print the author name.  Handle the case where there's no AUTHORGROUP
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (not in-group)
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-list-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-list-string))))))  
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make paragraph
</text>
<text>      space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>      (make sequence
</text>
<text>	(literal (gentext-by))
</text>
<text>	(literal &quot;\no-break-space;&quot;)
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    ;; note: set-titlepage-corpauthor takes care of wrapping multiple
</text>
<text>    ;; corpauthors
</text>
<text>    (make sequence
</text>
<text>      (if (first-sibling?)
</text>
<text>	  (if (equal? (gi (parent (current-node))) (normalize &quot;authorgroup&quot;))
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (literal (gentext-by) &quot; &quot;))
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    ;; Print the editor name.
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (or #t (not in-group)) ; nevermind, always put out the Edited by
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-edited-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-string))))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'start)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para) 
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      font-size: (* (inherited-font-size) 0.8)
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make display-group
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: set-titlepage-verso-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: set-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo)))))))
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (literal (if (first-sibling?) &quot;: &quot; &quot;; &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (with-mode title-mode
</text>
<text>	(process-children))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: set-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>)
</text>
<text>
</text>
<text>;; == Title pages for BOOKs =============================================
</text>
<text>
</text>
<text>(define (book-titlepage-recto-elements)
</text>
<text>  (list (normalize &quot;title&quot;) 
</text>
<text>	(normalize &quot;subtitle&quot;) 
</text>
<text>	(normalize &quot;graphic&quot;) 
</text>
<text>	(normalize &quot;mediaobject&quot;)
</text>
<text>	(normalize &quot;corpauthor&quot;) 
</text>
<text>	(normalize &quot;authorgroup&quot;) 
</text>
<text>	(normalize &quot;author&quot;) 
</text>
<text>	(normalize &quot;editor&quot;)))
</text>
<text>
</text>
<text>(define (book-titlepage-verso-elements)
</text>
<text>  (list (normalize &quot;title&quot;) 
</text>
<text>	(normalize &quot;subtitle&quot;) 
</text>
<text>	(normalize &quot;corpauthor&quot;) 
</text>
<text>	(normalize &quot;authorgroup&quot;) 
</text>
<text>	(normalize &quot;author&quot;) 
</text>
<text>	(normalize &quot;editor&quot;)
</text>
<text>	(normalize &quot;edition&quot;) 
</text>
<text>	(normalize &quot;pubdate&quot;) 
</text>
<text>	(normalize &quot;copyright&quot;)
</text>
<text>	(normalize &quot;abstract&quot;) 
</text>
<text>	(normalize &quot;legalnotice&quot;) 
</text>
<text>	(normalize &quot;revhistory&quot;)))
</text>
<text>
</text>
<text>(define (book-titlepage-content? elements side)
</text>
<text>  (titlepage-content? elements (if (equal? side 'recto)
</text>
<text>				   (book-titlepage-recto-elements)
</text>
<text>				   (book-titlepage-verso-elements))))
</text>
<text>
</text>
<text>(define (book-titlepage elements #!optional (side 'recto))
</text>
<text>  (let ((nodelist (titlepage-nodelist 
</text>
<text>		   (if (equal? side 'recto)
</text>
<text>		       (book-titlepage-recto-elements)
</text>
<text>		       (book-titlepage-verso-elements))
</text>
<text>		   elements)))
</text>
<text>;;    (make simple-page-sequence
</text>
<text>;;      page-n-columns: %titlepage-n-columns%
</text>
<text>;;      input-whitespace-treatment: 'collapse
</text>
<text>;;      use: default-text-style
</text>
<text>      (make sequence
</text>
<text>
</text>
<text>      ;; This hack is required for the RTF backend. If an external-graphic
</text>
<text>      ;; is the first thing on the page, RTF doesn't seem to do the right
</text>
<text>      ;; thing (the graphic winds up on the baseline of the first line
</text>
<text>      ;; of the page, left justified).  This &quot;one point rule&quot; fixes
</text>
<text>      ;; that problem.
</text>
<text>      (make paragraph
</text>
<text>	line-spacing: 1pt
</text>
<text>	(literal &quot;&quot;))
</text>
<text>      
</text>
<text>      (let loop ((nl nodelist) (lastnode (empty-node-list)))
</text>
<text>	(if (node-list-empty? nl)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make sequence
</text>
<text>	      (if (or (node-list-empty? lastnode)
</text>
<text>		      (not (equal? (gi (node-list-first nl))
</text>
<text>				   (gi lastnode))))
</text>
<text>		  (book-titlepage-before (node-list-first nl) side)
</text>
<text>		  (empty-sosofo))
</text>
<text>	      (cond
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;abbrev&quot;))
</text>
<text>		 (book-titlepage-abbrev (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;abstract&quot;))
</text>
<text>		 (book-titlepage-abstract (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;address&quot;))
</text>
<text>		 (book-titlepage-address (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;affiliation&quot;))
</text>
<text>		 (book-titlepage-affiliation (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;artpagenums&quot;))
</text>
<text>		 (book-titlepage-artpagenums (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;author&quot;))
</text>
<text>		 (book-titlepage-author (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;authorblurb&quot;))
</text>
<text>		 (book-titlepage-authorblurb (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;authorgroup&quot;))
</text>
<text>		 (book-titlepage-authorgroup (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;authorinitials&quot;))
</text>
<text>		 (book-titlepage-authorinitials (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;bibliomisc&quot;))
</text>
<text>		 (book-titlepage-bibliomisc (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;biblioset&quot;))
</text>
<text>		 (book-titlepage-biblioset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;bookbiblio&quot;))
</text>
<text>		 (book-titlepage-bookbiblio (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;citetitle&quot;))
</text>
<text>		 (book-titlepage-citetitle (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;collab&quot;))
</text>
<text>		 (book-titlepage-collab (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;confgroup&quot;))
</text>
<text>		 (book-titlepage-confgroup (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;contractnum&quot;))
</text>
<text>		 (book-titlepage-contractnum (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;contractsponsor&quot;))
</text>
<text>		 (book-titlepage-contractsponsor (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;contrib&quot;))
</text>
<text>		 (book-titlepage-contrib (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;copyright&quot;))
</text>
<text>		 (book-titlepage-copyright (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;corpauthor&quot;))
</text>
<text>		 (book-titlepage-corpauthor (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;corpname&quot;))
</text>
<text>		 (book-titlepage-corpname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;date&quot;))
</text>
<text>		 (book-titlepage-date (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;edition&quot;))
</text>
<text>		 (book-titlepage-edition (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;editor&quot;))
</text>
<text>		 (book-titlepage-editor (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;firstname&quot;))
</text>
<text>		 (book-titlepage-firstname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;graphic&quot;))
</text>
<text>		 (book-titlepage-graphic (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;honorific&quot;))
</text>
<text>		 (book-titlepage-honorific (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;indexterm&quot;))
</text>
<text>		 (book-titlepage-indexterm (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;invpartnumber&quot;))
</text>
<text>		 (book-titlepage-invpartnumber (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;isbn&quot;))
</text>
<text>		 (book-titlepage-isbn (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;issn&quot;))
</text>
<text>		 (book-titlepage-issn (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;issuenum&quot;))
</text>
<text>		 (book-titlepage-issuenum (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;itermset&quot;))
</text>
<text>		 (book-titlepage-itermset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;keywordset&quot;))
</text>
<text>		 (book-titlepage-keywordset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;legalnotice&quot;))
</text>
<text>		 (book-titlepage-legalnotice (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;lineage&quot;))
</text>
<text>		 (book-titlepage-lineage (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;mediaobject&quot;))
</text>
<text>		 (book-titlepage-mediaobject (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;modespec&quot;))
</text>
<text>		 (book-titlepage-modespec (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;orgname&quot;))
</text>
<text>		 (book-titlepage-orgname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;othercredit&quot;))
</text>
<text>		 (book-titlepage-othercredit (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;othername&quot;))
</text>
<text>		 (book-titlepage-othername (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;pagenums&quot;))
</text>
<text>		 (book-titlepage-pagenums (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;printhistory&quot;))
</text>
<text>		 (book-titlepage-printhistory (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;productname&quot;))
</text>
<text>		 (book-titlepage-productname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;productnumber&quot;))
</text>
<text>		 (book-titlepage-productnumber (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;pubdate&quot;))
</text>
<text>		 (book-titlepage-pubdate (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;publisher&quot;))
</text>
<text>		 (book-titlepage-publisher (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;publishername&quot;))
</text>
<text>	</text>
<text>	 (book-titlepage-publishername (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;pubsnumber&quot;))
</text>
<text>		 (book-titlepage-pubsnumber (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;releaseinfo&quot;))
</text>
<text>		 (book-titlepage-releaseinfo (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;revhistory&quot;))
</text>
<text>		 (book-titlepage-revhistory (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;seriesinfo&quot;))
</text>
<text>		 (book-titlepage-seriesinfo (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;seriesvolnums&quot;))
</text>
<text>		 (book-titlepage-seriesvolnums (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;subjectset&quot;))
</text>
<text>		 (book-titlepage-subjectset (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;subtitle&quot;))
</text>
<text>		 (book-titlepage-subtitle (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;surname&quot;))
</text>
<text>		 (book-titlepage-surname (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;title&quot;))
</text>
<text>		 (book-titlepage-title (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;titleabbrev&quot;))
</text>
<text>		 (book-titlepage-titleabbrev (node-list-first nl) side))
</text>
<text>		((equal? (gi (node-list-first nl)) (normalize &quot;volumenum&quot;))
</text>
<text>		 (book-titlepage-volumenum (node-list-first nl) side))
</text>
<text>		(else
</text>
<text>		 (book-titlepage-default (node-list-first nl) side)))
</text>
<text>	      (loop (node-list-rest nl) (node-list-first nl))))))))
</text>
<text>
</text>
<text>(define (book-titlepage-before node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (cond
</text>
<text>       ((equal? (gi node) (normalize &quot;corpauthor&quot;))
</text>
<text>	(make paragraph
</text>
<text>	  space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	  (literal &quot;\no-break-space;&quot;)))
</text>
<text>       ((equal? (gi node) (normalize &quot;authorgroup&quot;))
</text>
<text>	(if (have-sibling? (normalize &quot;corpauthor&quot;) node)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       ((equal? (gi node) (normalize &quot;author&quot;))
</text>
<text>	(if (or (have-sibling? (normalize &quot;corpauthor&quot;) node) 
</text>
<text>		(have-sibling? (normalize &quot;authorgroup&quot;) node))
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       (else (empty-sosofo)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>(define (book-titlepage-default node side)
</text>
<text>  (let ((foo (debug (string-append &quot;No book-titlepage-* for &quot; (gi node) &quot;!&quot;))))
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>(define (book-titlepage-element node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (with-mode book-titlepage-recto-mode
</text>
<text>	(process-node-list node))
</text>
<text>      (with-mode book-titlepage-verso-mode
</text>
<text>	(process-node-list node))))
</text>
<text>
</text>
<text>(define (book-titlepage-abbrev node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-abstract node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-address node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-affiliation node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-artpagenums node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-author node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-authorblurb node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-authorgroup node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-authorinitials node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-bibliomisc node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-biblioset node side)
</text>
<text>  (book-titlepage node side))
</text>
<text>(define (book-titlepage-bookbiblio node side)
</text>
<text>  (book-titlepage node side))
</text>
<text>(define (book-titlepage-citetitle node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-collab node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-confgroup node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-contractnum node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-contractsponsor node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-contrib  node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-copyright node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>
</text>
<text>(define (book-titlepage-corpauthor node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (book-titlepage-element node side)
</text>
<text>      (if (first-sibling? node)
</text>
<text>	  (make paragraph
</text>
<text>	    (with-mode book-titlepage-verso-mode
</text>
<text>	      (process-node-list
</text>
<text>	       (select-elements (children (parent node)) 
</text>
<text>				(normalize &quot;corpauthor&quot;)))))
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>(define (book-titlepage-corpname node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-date node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-edition node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-editor node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-firstname node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-graphic node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-honorific node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-indexterm node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-invpartnumber node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-isbn node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-issn node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-issuenum node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-itermset node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-keywordset node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-legalnotice node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-lineage node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-mediaobject node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-modespec node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-orgname node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-othercredit node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-othername node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-pagenums node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-printhistory node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-productname node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-productnumber node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-pubdate node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-publisher node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-publishername node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-pubsnumber node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-releaseinfo node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-revhistory node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-seriesinfo node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-seriesvolnums node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-subjectset node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-subtitle node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-surname node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-title node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-titleabbrev node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>(define (book-titlepage-volumenum node side)
</text>
<text>  (book-titlepage-element node side))
</text>
<text>
</text>
<text>(define book-titlepage-recto-style
</text>
<text>  (style
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: (HSIZE 1)))
</text>
<text>
</text>
<text>(define book-titlepage-verso-style
</text>
<text>  (style
</text>
<text>      font-family-name: %body-font-family%))
</text>
<text>
</text>
<text>(mode book-titlepage-recto-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (abstract para)
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    (let ((author-name  (author-string))
</text>
<text>	  (author-affil (select-elements (children (current-node)) 
</text>
<text>					 (normalize &quot;affiliation&quot;))))
</text>
<text>      (make sequence      
</text>
<text>	(make paragraph
</text>
<text>	  use: book-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal author-name))
</text>
<text>	(process-node-list author-affil))))
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (authorblurb para)
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: book-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 3)
</text>
<text>	line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(process-children))
</text>
<text>      ;; This paragraph is a hack to get the spacing right.
</text>
<text>      ;; Authors always have an affiliation paragraph below them, even if
</text>
<text>      ;; it's empty, so corpauthors need one too.
</text>
<text>      (make paragraph
</text>
<text>	use: book-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 1)
</text>
<text>	line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(literal &quot;\no-break-space;&quot;))))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    (let ((editor-name (author-string)))
</text>
<text>      (make sequence      
</text>
<text>	(if (first-sibling?) 
</text>
<text>	    (make paragraph
</text>
<text>	      use: book-titlepage-recto-style
</text>
<text>	      font-size: (HSIZE 1)
</text>
<text>	      line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	      space-before: (* (HSIZE 2) %head-before-factor% 6)
</text>
<text>	      quadding: %division-title-quadding%
</text>
<text>	      keep-with-next?: #t
</text>
<text>	      (literal (gentext-edited-by)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(make paragraph
</text>
<text>	  use: book-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal editor-name)))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'center)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element</text>
<text> itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para)
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      line-spacing: (* 0.8 (inherited-line-spacing))
</text>
<text>      font-size: (* 0.8 (inherited-font-size))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: book-titlepage-recto-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo)))))))
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle 
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 4)
</text>
<text>      line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>      quadding: %division-subtitle-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title 
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 5)
</text>
<text>      line-spacing: (* (HSIZE 5) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 5) %head-before-factor%)
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      heading-level: (if %generate-heading-level% 1 0)
</text>
<text>      (with-mode title-mode
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>(mode book-titlepage-verso-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract ($semiformal-object$))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    ;; Print the author name.  Handle the case where there's no AUTHORGROUP
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (not in-group)
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-list-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-list-string))))))  
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (let* ((editors (select-elements (children (current-node)) (normalize &quot;editor&quot;))))
</text>
<text>      (make paragraph
</text>
<text>	space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	(make sequence
</text>
<text>	  (if (node-list-empty? editors)
</text>
<text>	      (literal (gentext-by))
</text>
<text>	      (literal (gentext-edited-by)))
</text>
<text>	  (literal &quot;\no-break-space;&quot;)
</text>
<text>	  (process-children-trim)))))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    ;; note: book-titlepage-corpauthor takes care of wrapping multiple
</text>
<text>    ;; corpauthors
</text>
<text>    (make sequence
</text>
<text>      (if (first-sibling?)
</text>
<text>	  (if (equal? (gi (parent (current-node))) (normalize &quot;authorgroup&quot;))
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (literal (gentext-by) &quot; &quot;))
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    ;; Print the editor name.
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (or #f (not in-group)) ; nevermind, always put out the Edited by
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-edited-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-string))))
</text>
<text>	  (make sequence
</text>
<text>	    (literal (author-list-string))))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'start)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para) 
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      font-size: (* (inherited-font-size) 0.8)
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make display-group
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: book-titlepage-verso-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: book-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo))))))) 
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (literal (if (first-sibling?) &quot;: &quot; &quot;; &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (with-mode title-mode
</text>
<text>	(process-children))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: book-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>;; == Title pages for PARTs =============================================
</text>
<text>
</text>
<text>(define (part-titlepage-recto-elements)
</text>
<text>  (list (normalize &quot;title&quot;)
</text>
<text>	(normalize &quot;subtitle&quot;)))
</text>
<text>
</text>
<text>(define (part-titlepage-verso-elements)
</text>
<text>  '())
</text>
<text>
</text>
<text>(define (part-titlepage-content? elements side)
</text>
<text>  (titlepage-content? elements (if (equal? side 'recto)
</text>
<text>				   (part-titlepage-recto-elements)
</text>
<text>				   (part-titlepage-verso-elements))))
</text>
<text>
</text>
<text>(define (part-titlepage elements #!optional (side 'recto))
</text>
<text>  (let ((nodelist (titlepage-nodelist 
</text>
<text>		   (if (equal? side 'recto)
</text>
<text>		       (part-titlepage-recto-elements)
</text>
<text>		       (part-titlepage-verso-elements))
</text>
<text>		   elements))
</text>
<text>        ;; partintro is a special case...
</text>
<text>	(partintro (node-list-first
</text>
<text>		    (node-list-filter-by-gi elements (list (normalize &quot;partintro&quot;))))))
</text>
<text>    (if (part-titlepage-content? elements side)
</text>
<text>;;	(make simple-page-sequence
</text>
<text>;;	  page-n-columns: %titlepage-n-columns%
</text>
<text>;;	  input-whitespace-treatment: 'collapse
</text>
<text>;;	  use: default-text-style
</text>
<text>	(make sequence
</text>
<text>  
</text>
<text>	  ;; This hack is required for the RTF backend. If an external-graphic
</text>
<text>	  ;; is the first thing on the page, RTF doesn't seem to do the right
</text>
<text>	  ;; thing (the graphic winds up on the baseline of the first line
</text>
<text>	  ;; of the page, left justified).  This &quot;one point rule&quot; fixes
</text>
<text>	  ;; that problem.
</text>
<text>	  (make paragraph
</text>
<text>	    line-spacing: 1pt
</text>
<text>	    (literal &quot;&quot;))
</text>
<text>
</text>
<text>	  (let loop ((nl nodelist) (lastnode (empty-node-list)))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (if (or (node-list-empty? lastnode)
</text>
<text>			  (not (equal? (gi (node-list-first nl))
</text>
<text>				       (gi lastnode))))
</text>
<text>		      (part-titlepage-before (node-list-first nl) side)
</text>
<text>		      (empty-sosofo))
</text>
<text>		  (cond
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;abbrev&quot;))
</text>
<text>		    (part-titlepage-abbrev (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;abstract&quot;))
</text>
<text>		    (part-titlepage-abstract (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;address&quot;))
</text>
<text>		    (part-titlepage-address (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;affiliation&quot;))
</text>
<text>		    (part-titlepage-affiliation (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;artpagenums&quot;))
</text>
<text>		    (part-titlepage-artpagenums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;author&quot;))
</text>
<text>		    (part-titlepage-author (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorblurb&quot;))
</text>
<text>		    (part-titlepage-authorblurb (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorgroup&quot;))
</text>
<text>		    (part-titlepage-authorgroup (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorinitials&quot;))
</text>
<text>		    (part-titlepage-authorinitials (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;bibliomisc&quot;))
</text>
<text>		    (part-titlepage-bibliomisc (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;biblioset&quot;))
</text>
<text>		    (part-titlepage-biblioset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;bookbiblio&quot;))
</text>
<text>		    (part-titlepage-bookbiblio (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;citetitle&quot;))
</text>
<text>		    (part-titlepage-citetitle (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;collab&quot;))
</text>
<text>		    (part-titlepage-collab (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;confgroup&quot;))
</text>
<text>		    (part-titlepage-confgroup (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contractnum&quot;))
</text>
<text>		    (part-titlepage-contractnum (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contractsponsor&quot;))
</text>
<text>		    (part-titlepage-contractsponsor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contrib&quot;))
</text>
<text>		    (part-titlepage-contrib (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;copyright&quot;))
</text>
<text>		    (part-titlepage-copyright (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;corpauthor&quot;))
</text>
<text>		    (part-titlepage-corpauthor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;corpname&quot;))
</text>
<text>		    (part-titlepage-corpname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;date&quot;))
</text>
<text>		    (part-titlepage-date (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;edition&quot;))
</text>
<text>		    (part-titlepage-edition (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;editor&quot;))
</text>
<text>		    (part-titlepage-editor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;firstname&quot;))
</text>
<text>		    (part-titlepage-firstname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;graphic&quot;))
</text>
<text>		    (part-titlepage-graphic (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;honorific&quot;))
</text>
<text>		    (part-titlepage-honorific (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;indexterm&quot;))
</text>
<text>		    (part-titlepage-indexterm (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;invpartnumber&quot;))
</text>
<text>		    (part-titlepage-invpartnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;isbn&quot;))
</text>
<text>		    (part-titlepage-isbn (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;issn&quot;))
</text>
<text>		    (part-titlepage-issn (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;issuenum&quot;))
</text>
<text>		    (part-titlepage-issuenum (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;itermset&quot;))
</text>
<text>		    (part-titlepage-itermset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;keywordset&quot;))
</text>
<text>		    (part-titlepage-keywordset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;legalnotice&quot;))
</text>
<text>		    (part-titlepage-legalnotice (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;lineage&quot;))
</text>
<text>		    (part-titlepage-lineage (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;mediaobject&quot;))
</text>
<text>		    (part-titlepage-mediaobject (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;modespec&quot;))
</text>
<text>		    (part-titlepage-modespec (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;orgname&quot;))
</text>
<text>		    (part-titlepage-orgname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;othercredit&quot;))
</text>
<text>		    (part-titlepage-othercredit (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;othername&quot;))
</text>
<text>		    (part-titlepage-othername (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pagenums&quot;))
</text>
<text>		    (part-titlepage-pagenums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;printhistory&quot;))
</text>
<text>		    (part-titlepage-printhistory (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;productname&quot;))
</text>
<text>		    (part-titlepage-productname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;productnumber&quot;))
</text>
<text>		    (part-titlepage-productnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pubdate&quot;))
</text>
<text>		    (part-titlepage-pubdate (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;publisher&quot;))
</text>
<text>		    (part-titlepage-publisher (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;publishername&quot;))
</text>
<text>		    (part-titlepage-publishername (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pubsnumber&quot;))
</text>
<text>		    (part-titlepage-pubsnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;releaseinfo&quot;))
</text>
<text>		    (part-titlepage-releaseinfo (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;revhistory&quot;))
</text>
<text>		    (part-titlepage-revhistory (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;seriesinfo&quot;))
</text>
<text>		    (part-titlepage-seriesinfo (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;seriesvolnums&quot;))
</text>
<text>		    (part-titlepage-seriesvolnums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;subjectset&quot;))
</text>
<text>		    (part-titlepage-subjectset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;subtitle&quot;))
</text>
<text>		    (part-titlepage-subtitle (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;surname&quot;))
</text>
<text>		    (part-titlepage-surname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;title&quot;))
</text>
<text>		    (part-titlepage-title (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;titleabbrev&quot;))
</text>
<text>		    (part-titlepage-titleabbrev (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;volumenum&quot;))
</text>
<text>		    (part-titlepage-volumenum (node-list-first nl) side))
</text>
<text>		   (else
</text>
<text>		    (part-titlepage-default (node-list-first nl) side)))
</text>
<text>		  (loop (node-list-rest nl) (node-list-first nl)))))
</text>
<text>
</text>
<text>	  (if (and %generate-part-toc%
</text>
<text>		   %generate-part-toc-on-titlepage%
</text>
<text>		   (equal? side 'recto))
</text>
<text>	      (make display-group
</text>
<text>		(build-toc (current-node)
</text>
<text>			   (toc-depth (current-node))))
</text>
<text>	      (empty-sosofo))
</text>
<text>
</text>
<text>	  ;; PartIntro is a special case
</text>
<text>	  (if (and (equal? side 'recto)
</text>
<text>		   (not (node-list-empty? partintro))
</text>
<text>		   %generate-partintro-on-titlepage%)
</text>
<text>	      ($process-partintro$ partintro #f)
</text>
<text>	      (empty-sosofo)))
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(define (part-titlepage-before node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (cond
</text>
<text>       ((equal? (gi node) (normalize &quot;corpauthor&quot;))
</text>
<text>	(make paragraph
</text>
<text>	  space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	  (literal &quot;\no-break-space;&quot;)))
</text>
<text>       ((equal? (gi node) (normalize &quot;authorgroup&quot;))
</text>
<text>	(if (have-sibling? (normalize &quot;corpauthor&quot;) node)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       ((equal? (gi node) (normalize &quot;author&quot;))
</text>
<text>	(if (or (have-sibling? (normalize &quot;corpauthor&quot;) node) 
</text>
<text>		(have-sibling? (normalize &quot;authorgroup&quot;) node))
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       (else (empty-sosofo)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>(define (part-titlepage-default node side)
</text>
<text>  (let ((foo (debug (string-append &quot;No part-titlepage-* for &quot; (gi node) &quot;!&quot;))))
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>(define (part-titlepage-element node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (with-mode part-titlepage-recto-mode
</text>
<text>	(process-node-list node))
</text>
<text>      (with-mode part-titlepage-verso-mode
</text>
<text>	(process-node-list node))))
</text>
<text>
</text>
<text>(define (part-titlepage-abbrev node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-abstract node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-address node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-affiliation node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-artpagenums node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-author node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-authorblurb node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-authorgroup node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-authorinitials node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-bibliomisc node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-biblioset node side)
</text>
<text>  (part-titlepage node side))
</text>
<text>(define (part-titlepage-bookbiblio node side)
</text>
<text>  (part-titlepage node side))
</text>
<text>(define (part-titlepage-citetitle node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-collab node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-confgroup node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-contractnum node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-contractsponsor node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-contrib  node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-copyright node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>
</text>
<text>(define (part-titlepage-corpauthor node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (book-titlepage-element node side)
</text>
<text>      (if (first-sibling? node)
</text>
<text>	  (make paragraph
</text>
<text>	    (with-mode book-titlepage-verso-mode
</text>
<text>	      (process-node-list
</text>
<text>	       (select-elements (children (parent node)) 
</text>
<text>				(normalize &quot;corpauthor&quot;)))))
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>(define (part-titlepage-corpname node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-date node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-edition node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-editor node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-firstname node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-graphic node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-honorific node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-indexterm node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-invpartnumber node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-isbn node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-issn node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-issuenum node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-itermset node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-keywordset node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-legalnotice node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-lineage node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-mediaobject node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-modespec node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-orgname node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-othercredit node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-othername node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-pagenums node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-printhistory node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-productname node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-productnumber node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-pubdate node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-publisher node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-publishername node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-pubsnumber node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-releaseinfo node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-revhistory node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-seriesinfo node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-seriesvolnums node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-subjectset node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-subtitle node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-surname node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-title node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-titleabbrev node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>(define (part-titlepage-volumenum node side)
</text>
<text>  (part-titlepage-element node side))
</text>
<text>
</text>
<text>(define part-titlepage-recto-style
</text>
<text>  (style
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: (HSIZE 1)))
</text>
<text>
</text>
<text>(define part-titlepage-verso-style
</text>
<text>  (style
</text>
<text>      font-family-name: %body-font-family%))
</text>
<text>
</text>
<text>(mode part-titlepage-recto-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (abstract para)
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    (let ((author-name  (author-string))
</text>
<text>	  (author-affil (select-elements (children (current-node)) 
</text>
<text>					 (normalize &quot;affiliation&quot;))))
</text>
<text>      (make sequence      
</text>
<text>	(make paragraph
</text>
<text>          use: part-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal author-name))
</text>
<text>	(process-node-list author-affil))))
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (authorblurb para)
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>        use: part-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 3)
</text>
<text>	line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(process-children))
</text>
<text>      ;; This paragraph is a hack to get the spacing right.
</text>
<text>      ;; Authors always have an affiliation paragraph below them, even if
</text>
<text>      ;; it's empty, so corpauthors need one too.
</text>
<text>      (make paragraph
</text>
<text>        use: part-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 1)
</text>
<text>	line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(literal &quot;\no-break-space;&quot;))))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    (let ((editor-name (author-string)))
</text>
<text>      (make sequence      
</text>
<text>	(if (first-sibling?) 
</text>
<text>	    (make paragraph
</text>
<text>              use: part-titlepage-recto-style
</text>
<text>	      font-size: (HSIZE 1)
</text>
<text>	      line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	      space-before: (* (HSIZE 2) %head-before-factor% 6)
</text>
<text>	      quadding: %division-title-quadding%
</text>
<text>	      keep-with-next?: #t
</text>
<text>	      (literal (gentext-edited-by)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(make paragraph
</text>
<text>          use: part-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal editor-name)))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'center)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para)
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      line-spacing: (* 0.8 (inherited-line-spacing))
</text>
<text>      font-size: (* 0.8 (inherited-font-size))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: </text>
<text>%division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: part-titlepage-recto-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo))))))) 
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle 
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 4)
</text>
<text>      line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>      quadding: %division-subtitle-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (let ((division (ancestor-member (current-node) (division-element-list))))
</text>
<text>      (make paragraph
</text>
<text>        use: part-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 5)
</text>
<text>	line-spacing: (* (HSIZE 5) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 5) %head-before-factor%)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	heading-level: (if %generate-heading-level% 1 0)
</text>
<text>	(if (string=? (element-label division) &quot;&quot;)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal (element-label division) 
</text>
<text>		     (gentext-label-title-sep (gi division))))
</text>
<text>	(with-mode title-mode
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>(mode part-titlepage-verso-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract ($semiformal-object$))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    ;; Print the author name.  Handle the case where there's no AUTHORGROUP
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (not in-group)
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-list-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-list-string))))))  
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make paragraph
</text>
<text>      space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>      (make sequence
</text>
<text>	(literal (gentext-by))
</text>
<text>	(literal &quot;\no-break-space;&quot;)
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    ;; note: part-titlepage-corpauthor takes care of wrapping multiple
</text>
<text>    ;; corpauthors
</text>
<text>    (make sequence
</text>
<text>      (if (first-sibling?)
</text>
<text>	  (if (equal? (gi (parent (current-node))) (normalize &quot;authorgroup&quot;))
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (literal (gentext-by) &quot; &quot;))
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    ;; Print the editor name.
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (or #t (not in-group)) ; nevermind, always put out the Edited by
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-edited-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-string))))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'start)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para) 
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      font-size: (* (inherited-font-size) 0.8)
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make display-group
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: part-titlepage-verso-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list</text>
<text>-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: part-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo))))))) 
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (literal (if (first-sibling?) &quot;: &quot; &quot;; &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (let ((division (ancestor-member (current-node) (division-element-list))))
</text>
<text>      (make sequence
</text>
<text>        font-family-name: %title-font-family%
</text>
<text>	font-weight: 'bold
</text>
<text>	(if (string=? (element-label division) &quot;&quot;)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (literal (element-label division) 
</text>
<text>		     (gentext-label-title-sep (gi division))))
</text>
<text>	(with-mode title-mode
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: part-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>;; == Title pages for ARTICLEs ==========================================
</text>
<text>;;
</text>
<text>;; Note: Article title pages are a little different in that they do not
</text>
<text>;; create their own simple-page-sequence.
</text>
<text>;;
</text>
<text>
</text>
<text>(define (article-titlepage-recto-elements)
</text>
<text>  (list (normalize &quot;title&quot;) 
</text>
<text>	(normalize &quot;subtitle&quot;) 
</text>
<text>	(normalize &quot;corpauthor&quot;) 
</text>
<text>	(normalize &quot;authorgroup&quot;) 
</text>
<text>	(normalize &quot;author&quot;) 
</text>
<text>	(normalize &quot;abstract&quot;)))
</text>
<text>
</text>
<text>(define (article-titlepage-verso-elements)
</text>
<text>  '())
</text>
<text>
</text>
<text>(define (article-titlepage-content? elements side)
</text>
<text>  (titlepage-content? elements (if (equal? side 'recto)
</text>
<text>				   (article-titlepage-recto-elements)
</text>
<text>				   (article-titlepage-verso-elements))))
</text>
<text>
</text>
<text>(define (article-titlepage elements #!optional (side 'recto))
</text>
<text>  (let* ((nodelist (titlepage-nodelist 
</text>
<text>		    (if (equal? side 'recto)
</text>
<text>			(article-titlepage-recto-elements)
</text>
<text>			(article-titlepage-verso-elements))
</text>
<text>		    elements)))
</text>
<text>    (if (article-titlepage-content? elements side)
</text>
<text>	(make sequence
</text>
<text>	  (let loop ((nl nodelist) (lastnode (empty-node-list)))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (if (or (node-list-empty? lastnode)
</text>
<text>			  (not (equal? (gi (node-list-first nl))
</text>
<text>				       (gi lastnode))))
</text>
<text>		      (article-titlepage-before (node-list-first nl) side)
</text>
<text>		      (empty-sosofo))
</text>
<text>		  (cond
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;abbrev&quot;))
</text>
<text>		    (article-titlepage-abbrev (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;abstract&quot;))
</text>
<text>		    (article-titlepage-abstract (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;address&quot;))
</text>
<text>		    (article-titlepage-address (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;affiliation&quot;))
</text>
<text>		    (article-titlepage-affiliation (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;artpagenums&quot;))
</text>
<text>		    (article-titlepage-artpagenums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;author&quot;))
</text>
<text>		    (article-titlepage-author (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorblurb&quot;))
</text>
<text>		    (article-titlepage-authorblurb (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorgroup&quot;))
</text>
<text>		    (article-titlepage-authorgroup (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorinitials&quot;))
</text>
<text>		    (article-titlepage-authorinitials (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;bibliomisc&quot;))
</text>
<text>		    (article-titlepage-bibliomisc (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;biblioset&quot;))
</text>
<text>		    (article-titlepage-biblioset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;bookbiblio&quot;))
</text>
<text>		    (article-titlepage-bookbiblio (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;citetitle&quot;))
</text>
<text>		    (article-titlepage-citetitle (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;collab&quot;))
</text>
<text>		    (article-titlepage-collab (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;confgroup&quot;))
</text>
<text>		    (article-titlepage-confgroup (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contractnum&quot;))
</text>
<text>		    (article-titlepage-contractnum (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contractsponsor&quot;))
</text>
<text>		    (article-titlepage-contractsponsor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contrib&quot;))
</text>
<text>		    (article-titlepage-contrib (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;copyright&quot;))
</text>
<text>		    (article-titlepage-copyright (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;corpauthor&quot;))
</text>
<text>		    (article-titlepage-corpauthor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;corpname&quot;))
</text>
<text>		    (article-titlepage-corpname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;date&quot;))
</text>
<text>		    (article-titlepage-date (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;edition&quot;))
</text>
<text>		    (article-titlepage-edition (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;editor&quot;))
</text>
<text>		    (article-titlepage-editor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;firstname&quot;))
</text>
<text>		    (article-titlepage-firstname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;graphic&quot;))
</text>
<text>		    (article-titlepage-graphic (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;honorific&quot;))
</text>
<text>		    (article-titlepage-honorific (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;indexterm&quot;))
</text>
<text>		    (article-titlepage-indexterm (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;invpartnumber&quot;))
</text>
<text>		    (article-titlepage-invpartnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;isbn&quot;))
</text>
<text>		    (article-titlepage-isbn (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;issn&quot;))
</text>
<text>		    (article-titlepage-issn (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;issuenum&quot;))
</text>
<text>		    (article-titlepage-issuenum (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;itermset&quot;))
</text>
<text>		    (article-titlepage-itermset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;keywordset&quot;))
</text>
<text>		    (article-titlepage-keywordset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;legalnotice&quot;))
</text>
<text>		    (article-titlepage-legalnotice (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;lineage&quot;))
</text>
<text>		    (article-titlepage-lineage (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;mediaobject&quot;))
</text>
<text>		    (article-titlepage-mediaobject (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;modespec&quot;))
</text>
<text>		    (article-titlepage-modespec (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;orgname&quot;))
</text>
<text>		    (article-titlepage-orgname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;othercredit&quot;))
</text>
<text>		    (article-titlepage-othercredit (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;othername&quot;))
</text>
<text>		    (article-titlepage-othername (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pagenums&quot;))
</text>
<text>		    (article-titlepage-pagenums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;printhistory&quot;))
</text>
<text>		    (article-titlepage-printhistory (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;productname&quot;))
</text>
<text>		    (article-titlepage-productname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;productnumber&quot;))
</text>
<text>		    (article-titlepage-productnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pubdate&quot;))
</text>
<text>		    (article-titlepage-pubdate (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;publisher&quot;))
</text>
<text>		    (article-titlepage-publisher (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;publishername&quot;))
</text>
<text>		    (article-titlepage-publishername (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pubsnumber&quot;))
</text>
<text>		    (article-titlepage-pubsnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;releaseinfo&quot;))
</text>
<text>		    (article-titlepage-releaseinfo (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;revhistory&quot;))
</text>
<text>		    (article-titlepage-revhistory (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;seriesinfo&quot;))
</text>
<text>		    (article-titlepage-seriesinfo (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;seriesvolnums&quot;))
</text>
<text>		    (article-titlepage-seriesvolnums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;subjectset&quot;))
</text>
<text>		    (article-titlepage-subjectset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;subtitle&quot;))
</text>
<text>		    (article-titlepage-subtitle (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;surname&quot;))
</text>
<text>		    (article-titlepage-surname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;title&quot;))
</text>
<text>		    (article-titlepage-title (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;titleabbrev&quot;))
</text>
<text>		    (article-titlepage-titleabbrev (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;volumenum&quot;))
</text>
<text>		    (article-titlepage-volumenum (node-list-first nl) side))
</text>
<text>		   (else
</text>
<text>		    (article-titlepage-default (node-list-first nl) side)))
</text>
<text>		  (loop (node-list-rest nl) (node-list-first nl)))))
</text>
<text>
</text>
<text>	  (if (and %generate-article-toc%
</text>
<text>		   %generate-article-toc-on-titlepage%
</text>
<text>		   (equal? side 'recto))
</text>
<text>	      (make display-group
</text>
<text>		(build-toc (current-node)
</text>
<text>			   (toc-depth (current-node))))
</text>
<text>	      (empty-sosofo)))
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(define (article-titlepage-before node side)
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(define (article-titlepage-default node side)
</text>
<text>  (let ((foo (debug (string-append &quot;No article-titlepage-* for &quot; (gi node) &quot;!&quot;))))
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>(define (article-titlepage-element node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (with-mode article-titlepage-recto-mode
</text>
<text>	(process-node-list node))
</text>
<text>      (with-mode article-titlepage-verso-mode
</text>
<text>	(process-node-list node))))
</text>
<text>
</text>
<text>(define (article-titlepage-abbrev node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-abstract node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-address node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-affiliation node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-artpagenums node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-author node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-authorblurb node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-authorgroup node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-authorinitials node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-bibliomisc node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-biblioset node side)
</text>
<text>  (article-titlepage node side))
</text>
<text>(define (article-titlepage-bookbiblio node side)
</text>
<text>  (article-titlepage node side))
</text>
<text>(define (article-titlepage-citetitle node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-collab node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-confgroup node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-contractnum node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-contractsponsor node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-contrib  node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-copyright node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>
</text>
<text>(define (article-titlepage-corpauthor node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (book-titlepage-element node side)
</text>
<text>      (if (first-sibling? node)
</text>
<text>	  (make paragraph
</text>
<text>	    (with-mode book-titlepage-verso-mode
</text>
<text>	      (process-node-list
</text>
<text>	       (select-elements (children (parent node)) 
</text>
<text>				(normalize &quot;corpauthor&quot;)))))
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>(define (article-titlepage-corpname node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-date node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-edition node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-editor node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-firstname node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-graphic node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-honorific node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-indexterm node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-invpartnumber node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-isbn node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-issn node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-issuenum node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-itermset node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-keywordset node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-legalnotice node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-lineage node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-mediaobject node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-modespec node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-orgname node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-othercredit node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-othername node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-pagenums node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-printhistory node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-productname node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-productnumber node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-pubdate node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-publisher node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-publishername node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-pubsnumber node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-releaseinfo node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-revhistory node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-seriesinfo node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-seriesvolnums node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-subjectset node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-subtitle node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-surname node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-title node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-titleabbrev node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>(define (article-titlepage-volumenum node side)
</text>
<text>  (article-titlepage-element node side))
</text>
<text>
</text>
<text>(define article-titlepage-recto-style
</text>
<text>  (style
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: (HSIZE 1)))
</text>
<text>
</text>
<text>(define article-titlepage-verso-style
</text>
<text>  (style
</text>
<text>      font-family-name: %body-font-family%))
</text>
<text>
</text>
<text>(mode article-titlepage-recto-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-verso-style ;; EVEN THOUGH IT'S RECTO!
</text>
<text>      quadding: 'start
</text>
<text>      start-indent: (+ (inherited-start-indent) (/ %body-width% 24))
</text>
<text>      end-indent: (+ (inherited-end-indent) (/ %body-width% 24))
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    (let ((author-name  (author-string))
</text>
<text>	  (author-affil (select-elements (children (current-node)) 
</text>
<text>					 (normalize &quot;affiliation&quot;))))
</text>
<text>      (make sequence      
</text>
<text>	(make paragraph
</text>
<text>          use: article-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	  quadding: %article-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal author-name))
</text>
<text>	(process-node-list author-affil))))
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (authorblurb para)
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>        use: article-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 3)
</text>
<text>	line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	quadding: %article-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(process-children))
</text>
<text>      ;; This paragraph is a hack to get the spacing right.
</text>
<text>      ;; Authors always have an affiliation paragraph below them, even if
</text>
<text>      ;; it's empty, so corpauthors need one too.
</text>
<text>      (make paragraph
</text>
<text>        use: article-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 1)
</text>
<text>	line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	quadding: %article-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(literal &quot;\no-break-space;&quot;))))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    (let ((editor-name (author-string)))
</text>
<text>      (make sequence      
</text>
<text>	(if (first-sibling?) 
</text>
<text>	    (make paragraph
</text>
<text>              use: article-titlepage-recto-style
</text>
<text>	      font-size: (HSIZE 1)
</text>
<text>	      line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	      space-before: (* (HSIZE 2) %head-before-factor% 6)
</text>
<text>	      quadding: %article-title-quadding%
</text>
<text>	      keep-with-next?: #t
</text>
<text>	      (literal (gentext-edited-by)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(make paragraph
</text>
<text>          use: article-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	  quadding: %article-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal editor-name)))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'center)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keyword
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para)
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      line-spacing: (* 0.8 (inherited-line-spacing))
</text>
<text>      font-size: (* 0.8 (inherited-font-size))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: article-titlepage-recto-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo)))))))
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle 
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 4)
</text>
<text>      line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>      quadding: %article-subtitle-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title 
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 5)
</text>
<text>      line-spacing: (* (HSIZE 5) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 5) %head-before-factor%)
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (with-mode title-mode
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-recto-style
</text>
<text>      quadding: %article-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>(mode article-titlepage-verso-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract ($semiformal-object$))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    ;; Print the author name.  Handle the case where there's no AUTHORGROUP
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (not in-group)
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-list-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-list-string))))))  
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make paragraph
</text>
<text>      space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>      (make sequence
</text>
<text>	(literal (gentext-by))
</text>
<text>	(literal &quot;\no-break-space;&quot;)
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    ;; note: article-titlepage-corpauthor takes care of wrapping multiple
</text>
<text>    ;; corpauthors
</text>
<text>    (make sequence
</text>
<text>      (if (first-sibling?)
</text>
<text>	  (if (equal? (gi (parent (current-node))) (normalize &quot;authorgroup&quot;))
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (literal (gentext-by) &quot; &quot;))
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    ;; Print the editor name.
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (or #t (not in-group)) ; nevermind, always put out the Edited by
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-edited-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-string))))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'start)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para) 
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      font-size: (* (inherited-font-size) 0.8)
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make display-group
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: article-titlepage-verso-style
</text>
<text>	font-family-name: %title-font-family%
</text>
<text>	font-weight: 'bold
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (node-list-empty? revnumber)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (node-list-empty? revdate)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (node-list-empty? revauthor)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor)))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: article-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo))))))) 
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (literal (if (first-sibling?) &quot;: &quot; &quot;; &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (with-mode title-mode
</text>
<text>	(process</text>
<text>-children))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: article-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>)
</text>
<text>
</text>
<text>;; == Title pages for REFERENCEs ========================================
</text>
<text>
</text>
<text>(define (reference-titlepage-recto-elements)
</text>
<text>  (list (normalize &quot;title&quot;) 
</text>
<text>	(normalize &quot;subtitle&quot;)
</text>
<text>	(normalize &quot;corpauthor&quot;) 
</text>
<text>	(normalize &quot;authorgroup&quot;) 
</text>
<text>	(normalize &quot;author&quot;) 
</text>
<text>	(normalize &quot;editor&quot;)))
</text>
<text>
</text>
<text>(define (reference-titlepage-verso-elements)
</text>
<text>  '())
</text>
<text>
</text>
<text>(define (reference-titlepage-content? elements side)
</text>
<text>  (titlepage-content? elements (if (equal? side 'recto)
</text>
<text>				   (reference-titlepage-recto-elements)
</text>
<text>				   (reference-titlepage-verso-elements))))
</text>
<text>
</text>
<text>(define (reference-titlepage elements #!optional (side 'recto))
</text>
<text>  (let ((nodelist (titlepage-nodelist 
</text>
<text>		   (if (equal? side 'recto)
</text>
<text>		       (reference-titlepage-recto-elements)
</text>
<text>		       (reference-titlepage-verso-elements))
</text>
<text>		   elements))
</text>
<text>        ;; partintro is a special case...
</text>
<text>	(partintro (node-list-first
</text>
<text>		    (node-list-filter-by-gi elements (list (normalize &quot;partintro&quot;))))))
</text>
<text>    (if (reference-titlepage-content? elements side)
</text>
<text>	(make simple-page-sequence
</text>
<text>	  page-n-columns: %titlepage-n-columns%
</text>
<text>	  input-whitespace-treatment: 'collapse
</text>
<text>	  use: default-text-style
</text>
<text>	  
</text>
<text>	  ;; This hack is required for the RTF backend. If an external-graphic
</text>
<text>	  ;; is the first thing on the page, RTF doesn't seem to do the right
</text>
<text>	  ;; thing (the graphic winds up on the baseline of the first line
</text>
<text>	  ;; of the page, left justified).  This &quot;one point rule&quot; fixes
</text>
<text>	  ;; that problem.
</text>
<text>	  (make paragraph
</text>
<text>	    line-spacing: 1pt
</text>
<text>	    (literal &quot;&quot;))
</text>
<text>      
</text>
<text>	  (let loop ((nl nodelist) (lastnode (empty-node-list)))
</text>
<text>	    (if (node-list-empty? nl)
</text>
<text>		(empty-sosofo)
</text>
<text>		(make sequence
</text>
<text>		  (if (or (node-list-empty? lastnode)
</text>
<text>			  (not (equal? (gi (node-list-first nl))
</text>
<text>				       (gi lastnode))))
</text>
<text>		      (reference-titlepage-before (node-list-first nl) side)
</text>
<text>		      (empty-sosofo))
</text>
<text>		  (cond
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;abbrev&quot;))
</text>
<text>		    (reference-titlepage-abbrev (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;abstract&quot;))
</text>
<text>		    (reference-titlepage-abstract (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;address&quot;))
</text>
<text>		    (reference-titlepage-address (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;affiliation&quot;))
</text>
<text>		    (reference-titlepage-affiliation (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;artpagenums&quot;))
</text>
<text>		    (reference-titlepage-artpagenums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;author&quot;))
</text>
<text>		    (reference-titlepage-author (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorblurb&quot;))
</text>
<text>		    (reference-titlepage-authorblurb (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorgroup&quot;))
</text>
<text>		    (reference-titlepage-authorgroup (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;authorinitials&quot;))
</text>
<text>		    (reference-titlepage-authorinitials (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;bibliomisc&quot;))
</text>
<text>		    (reference-titlepage-bibliomisc (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;biblioset&quot;))
</text>
<text>		    (reference-titlepage-biblioset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;bookbiblio&quot;))
</text>
<text>		    (reference-titlepage-bookbiblio (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;citetitle&quot;))
</text>
<text>		    (reference-titlepage-citetitle (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;collab&quot;))
</text>
<text>		    (reference-titlepage-collab (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;confgroup&quot;))
</text>
<text>		    (reference-titlepage-confgroup (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contractnum&quot;))
</text>
<text>		    (reference-titlepage-contractnum (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contractsponsor&quot;))
</text>
<text>		    (reference-titlepage-contractsponsor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;contrib&quot;))
</text>
<text>		    (reference-titlepage-contrib (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;copyright&quot;))
</text>
<text>		    (reference-titlepage-copyright (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;corpauthor&quot;))
</text>
<text>		    (reference-titlepage-corpauthor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;corpname&quot;))
</text>
<text>		    (reference-titlepage-corpname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;date&quot;))
</text>
<text>		    (reference-titlepage-date (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;edition&quot;))
</text>
<text>		    (reference-titlepage-edition (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;editor&quot;))
</text>
<text>		    (reference-titlepage-editor (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;firstname&quot;))
</text>
<text>		    (reference-titlepage-firstname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;graphic&quot;))
</text>
<text>		    (reference-titlepage-graphic (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;honorific&quot;))
</text>
<text>		    (reference-titlepage-honorific (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;indexterm&quot;))
</text>
<text>		    (reference-titlepage-indexterm (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;invpartnumber&quot;))
</text>
<text>		    (reference-titlepage-invpartnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;isbn&quot;))
</text>
<text>		    (reference-titlepage-isbn (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;issn&quot;))
</text>
<text>		    (reference-titlepage-issn (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;issuenum&quot;))
</text>
<text>		    (reference-titlepage-issuenum (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;itermset&quot;))
</text>
<text>		    (reference-titlepage-itermset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;keywordset&quot;))
</text>
<text>		    (reference-titlepage-keywordset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;legalnotice&quot;))
</text>
<text>		    (reference-titlepage-legalnotice (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;lineage&quot;))
</text>
<text>		    (reference-titlepage-lineage (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;mediaobject&quot;))
</text>
<text>		    (reference-titlepage-mediaobject (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;modespec&quot;))
</text>
<text>		    (reference-titlepage-modespec (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;orgname&quot;))
</text>
<text>		    (reference-titlepage-orgname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;othercredit&quot;))
</text>
<text>		    (reference-titlepage-othercredit (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;othername&quot;))
</text>
<text>		    (reference-titlepage-othername (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pagenums&quot;))
</text>
<text>		    (reference-titlepage-pagenums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;printhistory&quot;))
</text>
<text>		    (reference-titlepage-printhistory (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;productname&quot;))
</text>
<text>		    (reference-titlepage-productname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;productnumber&quot;))
</text>
<text>		    (reference-titlepage-productnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pubdate&quot;))
</text>
<text>		    (reference-titlepage-pubdate (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;publisher&quot;))
</text>
<text>		    (reference-titlepage-publisher (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;publishername&quot;))
</text>
<text>		    (reference-titlepage-publishername (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;pubsnumber&quot;))
</text>
<text>		    (reference-titlepage-pubsnumber (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;releaseinfo&quot;))
</text>
<text>		    (reference-titlepage-releaseinfo (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;revhistory&quot;))
</text>
<text>		    (reference-titlepage-revhistory (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;seriesinfo&quot;))
</text>
<text>		    (reference-titlepage-seriesinfo (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;seriesvolnums&quot;))
</text>
<text>		    (reference-titlepage-seriesvolnums (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;subjectset&quot;))
</text>
<text>		    (reference-titlepage-subjectset (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;subtitle&quot;))
</text>
<text>		    (reference-titlepage-subtitle (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;surname&quot;))
</text>
<text>		    (reference-titlepage-surname (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;title&quot;))
</text>
<text>		    (reference-titlepage-title (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;titleabbrev&quot;))
</text>
<text>		    (reference-titlepage-titleabbrev (node-list-first nl) side))
</text>
<text>		   ((equal? (gi (node-list-first nl)) (normalize &quot;volumenum&quot;))
</text>
<text>		    (reference-titlepage-volumenum (node-list-first nl) side))
</text>
<text>		   (else
</text>
<text>		    (reference-titlepage-default (node-list-first nl) side)))
</text>
<text>		  (loop (node-list-rest nl) (node-list-first nl)))))
</text>
<text>
</text>
<text>	  (if (and %generate-reference-toc%
</text>
<text>		   %generate-reference-toc-on-titlepage%
</text>
<text>		   (equal? side 'recto))
</text>
<text>	      (make display-group
</text>
<text>		(build-toc (current-node)
</text>
<text>			   (toc-depth (current-node))))
</text>
<text>	      (empty-sosofo))
</text>
<text>
</text>
<text>	  ;; PartIntro is a special case
</text>
<text>	  (if (and (equal? side 'recto)
</text>
<text>		   (not (node-list-empty? partintro))
</text>
<text>		   %generate-partintro-on-titlepage%)
</text>
<text>	      ($process-partintro$ partintro #f)
</text>
<text>	      (empty-sosofo)))
</text>
<text>
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(define (reference-titlepage-before node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (cond
</text>
<text>       ((equal? (gi node) (normalize &quot;corpauthor&quot;))
</text>
<text>	(make paragraph
</text>
<text>	  space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	  (literal &quot;\no-break-space;&quot;)))
</text>
<text>       ((equal? (gi node) (normalize &quot;authorgroup&quot;))
</text>
<text>	(if (have-sibling? (normalize &quot;corpauthor&quot;) node)
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       ((equal? (gi node) (normalize &quot;author&quot;))
</text>
<text>	(if (or (have-sibling? (normalize &quot;corpauthor&quot;) node) 
</text>
<text>		(have-sibling? (normalize &quot;authorgroup&quot;) node))
</text>
<text>	    (empty-sosofo)
</text>
<text>	    (make paragraph
</text>
<text>	      space-after: (* (HSIZE 5) %head-after-factor% 8)
</text>
<text>	      (literal &quot;\no-break-space;&quot;))))
</text>
<text>       (else (empty-sosofo)))
</text>
<text>      (empty-sosofo)))
</text>
<text>
</text>
<text>(define (reference-titlepage-default node side)
</text>
<text>  (let ((foo (debug (string-append &quot;No reference-titlepage-* for &quot; (gi node) &quot;!&quot;))))
</text>
<text>    (empty-sosofo)))
</text>
<text>
</text>
<text>(define (reference-titlepage-element node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (with-mode reference-titlepage-recto-mode
</text>
<text>	(process-node-list node))
</text>
<text>      (with-mode reference-titlepage-verso-mode
</text>
<text>	(process-node-list node))))
</text>
<text>
</text>
<text>(define (reference-titlepage-abbrev node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-abstract node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-address node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-affiliation node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-artpagenums node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-author node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-authorblurb node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-authorgroup node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-authorinitials node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-bibliomisc node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-biblioset node side)
</text>
<text>  (reference-titlepage node side))
</text>
<text>(define (reference-titlepage-bookbiblio node side)
</text>
<text>  (reference-titlepage node side))
</text>
<text>(define (reference-titlepage-citetitle node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-collab node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-confgroup node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-contractnum node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-contractsponsor node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-contrib  node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-copyright node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>
</text>
<text>(define (reference-titlepage-corpauthor node side)
</text>
<text>  (if (equal? side 'recto)
</text>
<text>      (book-titlepage-element node side)
</text>
<text>      (if (first-sibling? node)
</text>
<text>	  (make paragraph
</text>
<text>	    (with-mode book-titlepage-verso-mode
</text>
<text>	      (process-node-list
</text>
<text>	       (select-elements (children (parent node)) 
</text>
<text>				(normalize &quot;corpauthor&quot;)))))
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>(define (reference-titlepage-corpname node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-date node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-edition node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-editor node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-firstname node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-graphic node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-honorific node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-indexterm node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-invpartnumber node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-isbn node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-issn node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-issuenum node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-itermset node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-keywordset node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-legalnotice node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-lineage node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-mediaobject node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-modespec node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-orgname node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-othercredit node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-othername node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-pagenums node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-printhistory node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-productname node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-productnumber node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-pubdate node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-publisher node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-publishername node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-pubsnumber node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-releaseinfo node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-revhistory node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-seriesinfo node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-seriesvolnums node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-subjectset node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-subtitle node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-surname node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-title node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-titleabbrev node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>(define (reference-titlepage-volumenum node side)
</text>
<text>  (reference-titlepage-element node side))
</text>
<text>
</text>
<text>(define reference-titlepage-recto-style
</text>
<text>  (style
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      font-size: (HSIZE 1)))
</text>
<text>
</text>
<text>(define reference-titlepage-verso-style
</text>
<text>  (style
</text>
<text>      font-family-name: %body-font-family%))
</text>
<text>
</text>
<text>(mode reference-titlepage-recto-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (abstract para)
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    (let ((author-name  (author-string))
</text>
<text>	  (author-affil (select-elements (children (current-node)) 
</text>
<text>					 (normalize &quot;affiliation&quot;))))
</text>
<text>      (make sequence      
</text>
<text>	(make paragraph
</text>
<text>	  use: reference-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal author-name))
</text>
<text>	(process-node-list author-affil))))
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (authorblurb para)
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make display-group
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>        use: reference-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 3)
</text>
<text>	line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 2) %head-before-factor%)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(process-children))
</text>
<text>      ;; This paragraph is a hack to get the spacing right.
</text>
<text>      ;; Authors always have an affiliation paragraph below them, even if
</text>
<text>      ;; it's empty, so corpauthors need one too.
</text>
<text>      (make paragraph
</text>
<text>        use: reference-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 1)
</text>
<text>	line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	(literal &quot;\no-break-space;&quot;))))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    (let ((editor-name (author-string)))
</text>
<text>      (make sequence      
</text>
<text>	(if (first-sibling?) 
</text>
<text>	    (make paragraph
</text>
<text>              use: reference-titlepage-recto-style
</text>
<text>	      font-size: (HSIZE 1)
</text>
<text>	      line-spacing: (* (HSIZE 1) %line-spacing-factor%)
</text>
<text>	      space-before: (* (HSIZE 2) %head-before-factor% 6)
</text>
<text>	      quadding: %division-title-quadding%
</text>
<text>	      keep-with-next?: #t
</text>
<text>	      (literal (gentext-edited-by)))
</text>
<text>	    (empty-sosofo))
</text>
<text>	(make paragraph
</text>
<text>          use: reference-titlepage-recto-style
</text>
<text>	  font-size: (HSIZE 3)
</text>
<text>	  line-spacing: (* (HSIZE 3) %line-spacing-factor%)
</text>
<text>	  space-after: (* (HSIZE 2) %head-after-factor% 4)
</text>
<text>	  quadding: %division-title-quadding%
</text>
<text>	  keep-with-next?: #t
</text>
<text>	  (literal editor-name)))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'center)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para)
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: 'start
</text>
<text>      line-spacing: (* 0.8 (inherited-line-spacing))
</text>
<text>      font-size: (* 0.8 (inherited-font-size))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: reference-titlepage-recto-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not</text>
<text> (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-recto-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo))))))) 
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle 
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      font-size: (HSIZE 4)
</text>
<text>      line-spacing: (* (HSIZE 4) %line-spacing-factor%)
</text>
<text>      space-before: (* (HSIZE 4) %head-before-factor%)
</text>
<text>      quadding: %division-subtitle-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (let ((ref (ancestor-member (current-node)
</text>
<text>				(list (normalize &quot;reference&quot;)))))
</text>
<text>      (make paragraph
</text>
<text>        use: reference-titlepage-recto-style
</text>
<text>	font-size: (HSIZE 5)
</text>
<text>	line-spacing: (* (HSIZE 5) %line-spacing-factor%)
</text>
<text>	space-before: (* (HSIZE 5) %head-before-factor%)
</text>
<text>	quadding: %division-title-quadding%
</text>
<text>	keep-with-next?: #t
</text>
<text>	heading-level: (if %generate-heading-level% 1 0)
</text>
<text>	(literal (element-label ref)
</text>
<text>		 (gentext-label-title-sep (gi ref)))
</text>
<text>	(with-mode title-mode
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-recto-style
</text>
<text>      quadding: %division-title-quadding%
</text>
<text>      (process-children)))
</text>
<text>)
</text>
<text>
</text>
<text>(mode reference-titlepage-verso-mode
</text>
<text>  (element abbrev
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element abstract ($semiformal-object$))
</text>
<text>
</text>
<text>  (element (abstract title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element address 
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (with-mode titlepage-address-mode 
</text>
<text>	($linespecific-display$ %indent-address-lines% %number-address-lines%))))
</text>
<text>
</text>
<text>  (element affiliation
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element artpagenums
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element author
</text>
<text>    ;; Print the author name.  Handle the case where there's no AUTHORGROUP
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (not in-group)
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-list-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-list-string))))))  
</text>
<text>
</text>
<text>  (element authorblurb
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element authorgroup
</text>
<text>    (make paragraph
</text>
<text>      space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>      (make sequence
</text>
<text>	(literal (gentext-by))
</text>
<text>	(literal &quot;\no-break-space;&quot;)
</text>
<text>	(process-children-trim))))
</text>
<text>
</text>
<text>  (element authorinitials
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element bibliomisc (process-children))
</text>
<text>
</text>
<text>  (element bibliomset (process-children))
</text>
<text>
</text>
<text>  (element collab
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element confgroup
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractnum
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contractsponsor
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element contrib
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element copyright
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (literal (gentext-element-name (current-node)))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (dingbat &quot;copyright&quot;))
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (copyright year)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling? (current-node)))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot; &quot;))))
</text>
<text>
</text>
<text>  (element (copyright holder) ($charseq$))
</text>
<text>
</text>
<text>  (element corpauthor
</text>
<text>    ;; note: reference-titlepage-corpauthor takes care of wrapping multiple
</text>
<text>    ;; corpauthors
</text>
<text>    (make sequence
</text>
<text>      (if (first-sibling?)
</text>
<text>	  (if (equal? (gi (parent (current-node))) (normalize &quot;authorgroup&quot;))
</text>
<text>	      (empty-sosofo)
</text>
<text>	      (literal (gentext-by) &quot; &quot;))
</text>
<text>	  (literal &quot;, &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element corpname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element date
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element edition
</text>
<text>    (make paragraph
</text>
<text>      (process-children)
</text>
<text>      (literal &quot;\no-break-space;&quot;)
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))))
</text>
<text>
</text>
<text>  (element editor
</text>
<text>    ;; Print the editor name.
</text>
<text>    (let ((in-group (have-ancestor? (normalize &quot;authorgroup&quot;) (current-node))))
</text>
<text>      (if (or #t (not in-group)) ; nevermind, always put out the Edited by
</text>
<text>	  (make paragraph
</text>
<text>	    ;; Hack to get the spacing right below the author name line...
</text>
<text>	    space-after: (* %bf-size% %line-spacing-factor%)
</text>
<text>	    (make sequence
</text>
<text>	      (literal (gentext-edited-by))
</text>
<text>	      (literal &quot;\no-break-space;&quot;)
</text>
<text>	      (literal (author-string))))
</text>
<text>	  (make sequence 
</text>
<text>	    (literal (author-string))))))
</text>
<text>
</text>
<text>  (element firstname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element graphic
</text>
<text>    (let* ((nd (current-node))
</text>
<text>	   (fileref (attribute-string &quot;fileref&quot; nd))
</text>
<text>	   (entityref (attribute-string &quot;entityref&quot; nd))
</text>
<text>	   (format (attribute-string &quot;format&quot; nd))
</text>
<text>	   (align (attribute-string &quot;align&quot; nd)))
</text>
<text>      (if (or fileref entityref) 
</text>
<text>	  (make external-graphic
</text>
<text>	    notation-system-id: (if format format &quot;&quot;)
</text>
<text>	    entity-system-id: (if fileref 
</text>
<text>				  (graphic-file fileref)
</text>
<text>				  (if entityref 
</text>
<text>				      (entity-generated-system-id entityref)
</text>
<text>				      &quot;&quot;))
</text>
<text>	    display?: #t
</text>
<text>	    display-alignment: 'start)
</text>
<text>	  (empty-sosofo))))
</text>
<text>
</text>
<text>  (element honorific
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element isbn
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issn
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element itermset (empty-sosofo))
</text>
<text>
</text>
<text>  (element invpartnumber
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element issuenum
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element jobtitle
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element keywordset
</text>
<text>    (make paragraph
</text>
<text>      quadding: 'start
</text>
<text>      (make sequence
</text>
<text>	font-weight: 'bold
</text>
<text>	(literal &quot;Keywords: &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element (keyword)
</text>
<text>    (make sequence
</text>
<text>      (process-children)
</text>
<text>      (if (not (last-sibling?))
</text>
<text>	  (literal &quot;, &quot;)
</text>
<text>	  (literal &quot;&quot;))))
</text>
<text>
</text>
<text>  (element legalnotice
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      ($semiformal-object$)))
</text>
<text>
</text>
<text>  (element (legalnotice title) (empty-sosofo))
</text>
<text>
</text>
<text>  (element (legalnotice para) 
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      font-size: (* (inherited-font-size) 0.8)
</text>
<text>      (process-children-trim)))
</text>
<text>
</text>
<text>  (element lineage
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element modespec (empty-sosofo))
</text>
<text>
</text>
<text>  (element orgdiv
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element orgname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othercredit
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element othername
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pagenums
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element printhistory
</text>
<text>    (make display-group
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element productnumber
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubdate
</text>
<text>    (make paragraph
</text>
<text>      (literal (gentext-element-name-space (gi (current-node))))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publisher
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element publishername
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element pubsnumber
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element releaseinfo
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element revhistory
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	use: reference-titlepage-verso-style
</text>
<text>	space-before: (* (HSIZE 3) %head-before-factor%)
</text>
<text>	space-after: (/ (* (HSIZE 1) %head-before-factor%) 2)
</text>
<text>	(literal (gentext-element-name (current-node))))
</text>
<text>      (make table
</text>
<text>	before-row-border: #f
</text>
<text>	(process-children))))
</text>
<text>  
</text>
<text>  (element (revhistory revision)
</text>
<text>    (let ((revnumber (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;revnumber&quot;)))
</text>
<text>	  (revdate   (select-elements (descendants (current-node)) 
</text>
<text>				      (normalize &quot;date&quot;)))
</text>
<text>	  (revauthor (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;authorinitials&quot;)))
</text>
<text>	  (revremark (select-elements (descendants (current-node))
</text>
<text>				      (normalize &quot;revremark&quot;))))
</text>
<text>      (make sequence
</text>
<text>	(make table-row
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revnumber))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-element-name-space (current-node)))
</text>
<text>		  (process-node-list revnumber))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 2
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revdate))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (process-node-list revdate))
</text>
<text>		(empty-sosofo)))
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 3
</text>
<text>	    n-columns-spanned: 1
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    cell-before-column-margin: (if (equal? (print-backend) 'tex)
</text>
<text>					   6pt
</text>
<text>					   0pt)
</text>
<text>	    (if (not (node-list-empty? revauthor))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  (literal (gentext-revised-by))
</text>
<text>		  (process-node-list revauthor))
</text>
<text>		(empty-sosofo))))
</text>
<text>	(make table-row
</text>
<text>	  cell-after-row-border: #f
</text>
<text>	  (make table-cell
</text>
<text>	    column-number: 1
</text>
<text>	    n-columns-spanned: 3
</text>
<text>	    n-rows-spanned: 1
</text>
<text>	    start-indent: 0pt
</text>
<text>	    (if (not (node-list-empty? revremark))
</text>
<text>		(make paragraph
</text>
<text>		  use: reference-titlepage-verso-style
</text>
<text>		  font-size: %bf-size%
</text>
<text>		  font-weight: 'medium
</text>
<text>		  space-after: (if (last-sibling?) 
</text>
<text>				   0pt
</text>
<text>				   (/ %block-sep% 2))
</text>
<text>		  (process-node-list revremark))
</text>
<text>		(empty-sosofo))))))) 
</text>
<text>  
</text>
<text>  (element (revision revnumber) (process-children-trim))
</text>
<text>  (element (revision date) (process-children-trim))
</text>
<text>  (element (revision authorinitials) (process-children-trim))
</text>
<text>  (element (revision revremark) (process-children-trim))
</text>
<text>
</text>
<text>  (element seriesvolnums
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element shortaffil
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element subjectset (empty-sosofo))
</text>
<text>
</text>
<text>  (element subtitle
</text>
<text>    (make sequence
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight: 'bold
</text>
<text>      (literal (if (first-sibling?) &quot;: &quot; &quot;; &quot;))
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element surname
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>  (element title
</text>
<text>    (let ((ref (ancestor-member (current-node)
</text>
<text>				(list (normalize &quot;reference&quot;)))))
</text>
<text>      (make sequence
</text>
<text>        font-family-name: %title-font-family%
</text>
<text>        font-weight: 'bold
</text>
<text>	(literal (element-label ref)
</text>
<text>		 (gentext-label-title-sep (gi ref)))
</text>
<text>	(with-mode title-mode
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>  (element formalpara ($para-container$))
</text>
<text>  (element (formalpara title) ($runinhead$))
</text>
<text>  (element (formalpara para) (make sequence (process-children)))
</text>
<text>
</text>
<text>  (element titleabbrev (empty-sosofo))
</text>
<text>
</text>
<text>  (element volumenum
</text>
<text>    (make paragraph
</text>
<text>      use: reference-titlepage-verso-style
</text>
<text>      (process-children)))
</text>
<text>
</text>
<text>)
</text>
<text>   </text>
<text>
</text>
<text>;; $Id: dbverb.dsl,v 1.5 2003/01/15 08:24:23 adicarlo Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://docbook.sourceforge.net/projects/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>(define verbatim-style
</text>
<text>  (style
</text>
<text>      font-family-name: %mono-font-family%
</text>
<text>      font-size:        (* (inherited-font-size) 
</text>
<text>			   (if %verbatim-size-factor%
</text>
<text>			       %verbatim-size-factor%
</text>
<text>			       1.0))
</text>
<text>      font-weight:      'medium
</text>
<text>      font-posture:     'upright
</text>
<text>      line-spacing:     (* (* (inherited-font-size) 
</text>
<text>			      (if %verbatim-size-factor%
</text>
<text>				  %verbatim-size-factor%
</text>
<text>				  1.0))
</text>
<text>			   %line-spacing-factor%)
</text>
<text>      first-line-start-indent: 0pt
</text>
<text>      lines: 'asis
</text>
<text>      input-whitespace-treatment: 'preserve))
</text>
<text>
</text>
<text>(define inline-verbatim-style
</text>
<text>  (style
</text>
<text>      font-family-name: %mono-font-family%
</text>
<text>      font-size:        (* (inherited-font-size) 
</text>
<text>			   (if %verbatim-size-factor%
</text>
<text>			       %verbatim-size-factor%
</text>
<text>			       1.0))
</text>
<text>      font-weight:      'medium
</text>
<text>      font-posture:     'upright
</text>
<text>      lines: 'asis
</text>
<text>      input-whitespace-treatment: 'preserve))
</text>
<text>
</text>
<text>(define linespecific-style
</text>
<text>  (style
</text>
<text>      first-line-start-indent: 0pt
</text>
<text>      lines: 'asis
</text>
<text>      input-whitespace-treatment: 'preserve))
</text>
<text>
</text>
<text>(define ($format-indent$ indent)
</text>
<text>  (literal indent))
</text>
<text>
</text>
<text>(define ($format-linenumber$ linenumber)
</text>
<text>  ;; A line-field would make more sense here, and allow proportional
</text>
<text>  ;; fonts, but you can't put line-fields in the middle of a paragraph
</text>
<text>  ;; in the current RTF backend of Jade
</text>
<text>  (let ((%factor% (if %verbatim-size-factor%
</text>
<text>		      %verbatim-size-factor%
</text>
<text>		      1.0)))
</text>
<text>    (if (equal? (remainder linenumber %linenumber-mod%) 0)
</text>
<text>	(make sequence
</text>
<text>	  use: verbatim-style
</text>
<text>	  (literal (pad-string (format-number linenumber &quot;1&quot;) 
</text>
<text>			       %linenumber-length% %linenumber-padchar%))
</text>
<text>	  ($linenumber-space$))
</text>
<text>	(make sequence
</text>
<text>	  use: verbatim-style
</text>
<text>	  (literal (pad-string &quot;&quot; %linenumber-length% &quot; &quot;))
</text>
<text>	  ($linenumber-space$)))))
</text>
<text>
</text>
<text>(define ($line-start$ indent line-numbers? #!optional (line-number 1))
</text>
<text>  (make sequence
</text>
<text>    (if indent
</text>
<text>	($format-indent$ indent)
</text>
<text>	(empty-sosofo))
</text>
<text>    (if line-numbers?
</text>
<text>	($format-linenumber$ line-number)
</text>
<text>	(empty-sosofo))))
</text>
<text>
</text>
<text>(define ($linespecific-display$ indent line-numbers?)
</text>
<text>  (let ((vspace (if (INBLOCK?)
</text>
<text>		   0pt
</text>
<text>		   (if (INLIST?) 
</text>
<text>		       %para-sep% 
</text>
<text>		       %block-sep%))))
</text>
<text>    (make paragraph
</text>
<text>      use: linespecific-style
</text>
<text>      space-before: (if (and (string=? (gi (parent)) (normalize &quot;entry&quot;))
</text>
<text> 			     (absolute-first-sibling?))
</text>
<text>			0pt
</text>
<text>			vspace)
</text>
<text>      space-after:  (if (and (string=? (gi (parent)) (normalize &quot;entry&quot;))
</text>
<text> 			     (absolute-last-sibling?))
</text>
<text>			0pt
</text>
<text>			vspace)
</text>
<text>      start-indent: (if (INBLOCK?)
</text>
<text>			(inherited-start-indent)
</text>
<text>			(+ %block-start-indent% (inherited-start-indent)))
</text>
<text>      (if (or indent line-numbers?)
</text>
<text>	  ($linespecific-line-by-line$ indent line-numbers?)
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>(define ($linespecific-line-by-line$ indent line-numbers?)
</text>
<text>  (let ((expanded-content
</text>
<text>	 ;; this is the content with
</text>
<text>	 ;; inlinemediaobject/imageobject[@format='linespecific']
</text>
<text>	 ;; expanded
</text>
<text>	 (let loop ((kl (children (current-node))) (rl (empty-node-list)))
</text>
<text>	   (if (node-list-empty? kl)
</text>
<text>	       rl
</text>
<text>	       (if (equal? (gi (node-list-first kl))
</text>
<text>			   (normalize &quot;inlinemediaobject&quot;))
</text>
<text>		   (let* ((imgobj (node-list-filter-by-gi
</text>
<text>				   (children (node-list-first kl))
</text>
<text>				   (list (normalize &quot;imageobject&quot;))))
</text>
<text>			  (datobj (node-list-filter-by-gi
</text>
<text>				   (children imgobj)
</text>
<text>				   (list (normalize &quot;imagedata&quot;)))))
</text>
<text>		     (if (and (not (node-list-empty? imgobj))
</text>
<text>			      (not (node-list-empty? datobj))
</text>
<text>			      (equal? (attribute-string (normalize &quot;format&quot;) datobj)
</text>
<text>				      (normalize &quot;linespecific&quot;)))
</text>
<text>			 (loop (node-list-rest kl)
</text>
<text>			       (node-list rl (string-&gt;nodes (include-characters
</text>
<text>							     (if (attribute-string (normalize &quot;fileref&quot;) datobj)
</text>
<text>								 (attribute-string (normalize &quot;fileref&quot;) datobj)
</text>
<text>								 (entity-generated-system-id (attribute-string (normalize &quot;entityref&quot;) datobj)))))))
</text>
<text>			 (loop (node-list-rest kl)
</text>
<text>			       (node-list rl (node-list-first kl)))))
</text>
<text>		   (loop (node-list-rest kl) (node-list rl (node-list-first kl))))))))
</text>
<text>  (make sequence
</text>
<text>    ($line-start$ indent line-numbers? 1)
</text>
<text>    (let loop ((kl expanded-content)
</text>
<text>	       (linecount 1)
</text>
<text>	       (res (empty-sosofo)))
</text>
<text>      (if (node-list-empty? kl)
</text>
<text>	  res
</text>
<text>	  (loop
</text>
<text>	   (node-list-rest kl)
</text>
<text>	   (if (char=? (node-property 'char (node-list-first kl)
</text>
<text>				      default: #\U-0000) #\U-000D)
</text>
<text>	       (+ linecount 1)
</text>
<text>	       linecount)
</text>
<text>	   (let ((c (node-list-first kl)))
</text>
<text>	     (if (char=? (node-property 'char c default: #\U-0000) 
</text>
<text>			 #\U-000D)
</text>
<text>		 (sosofo-append res
</text>
<text>				(process-node-list c)
</text>
<text>				($line-start$ indent line-numbers?
</text>
<text>					      (+ linecount 1)))
</text>
<text>		 (sosofo-append res (process-node-list c))))))))))
</text>
<text>
</text>
<text>(define ($verbatim-display$ indent line-numbers?)
</text>
<text>  (let* ((width-in-chars (if (attribute-string (normalize &quot;width&quot;))
</text>
<text>			     (string-&gt;number (attribute-string (normalize &quot;width&quot;)))
</text>
<text>			     %verbatim-default-width%))
</text>
<text>	 (fsize (lambda () (if (or (attribute-string (normalize &quot;width&quot;))
</text>
<text>				   (not %verbatim-size-factor%))
</text>
<text>			       (/ (/ (- %text-width% (inherited-start-indent))
</text>
<text>				     width-in-chars) 
</text>
<text>				  0.7)
</text>
<text>			       (* (inherited-font-size) 
</text>
<text>				  %verbatim-size-factor%))))
</text>
<text>	 (vspace (if (INBLOCK?)
</text>
<text>		     0pt
</text>
<text>		     (if (INLIST?)
</text>
<text>			 %para-sep% 
</text>
<text>			 %block-sep%))))
</text>
<text>    (make paragraph
</text>
<text>      use: verbatim-style
</text>
<text>      space-before: (if (and (string=? (gi (parent)) (normalize &quot;entry&quot;))
</text>
<text> 			     (absolute-first-sibling?))
</text>
<text>			0pt
</text>
<text>			vspace)
</text>
<text>      space-after:  (if (and (string=? (gi (parent)) (normalize &quot;entry&quot;))
</text>
<text> 			     (absolute-last-sibling?))
</text>
<text>			0pt
</text>
<text>			vspace)
</text>
<text>      font-size: (fsize)
</text>
<text>      line-spacing: (* (fsize) %line-spacing-factor%)
</text>
<text>      start-indent: (if (INBLOCK?)
</text>
<text>			(inherited-start-indent)
</text>
<text>			(+ %block-start-indent% (inherited-start-indent)))
</text>
<text>      (if (or indent line-numbers?)
</text>
<text>	  ($linespecific-line-by-line$ indent line-numbers?)
</text>
<text>	  (process-children)))))
</text>
<text>
</text>
<text>(element literallayout
</text>
<text>  (if (equal? (attribute-string &quot;class&quot;) (normalize &quot;monospaced&quot;))
</text>
<text>      ($verbatim-display$
</text>
<text>       %indent-literallayout-lines%
</text>
<text>       (or %number-literallayout-lines%
</text>
<text>	   (equal? (attribute-string (normalize &quot;linenumbering&quot;))
</text>
<text>		   (normalize &quot;numbered&quot;))))
</text>
<text>      ($linespecific-display$
</text>
<text>       %indent-literallayout-lines%
</text>
<text>       (or %number-literallayout-lines%
</text>
<text>	   (equal? (attribute-string (normalize &quot;linenumbering&quot;))
</text>
<text>		   (normalize &quot;numbered&quot;))))))
</text>
<text>
</text>
<text>(element address
</text>
<text>  ($linespecific-display$
</text>
<text>   %indent-address-lines%
</text>
<text>   (or %number-address-lines%
</text>
<text>       (equal? (attribute-string (normalize &quot;linenumbering&quot;))
</text>
<text>	       (normalize &quot;numbered&quot;)))))
</text>
<text>
</text>
<text>(element programlisting
</text>
<text>  ($verbatim-display$
</text>
<text>   %indent-programlisting-lines%
</text>
<text>   (or %number-programlisting-lines%
</text>
<text>       (equal? (attribute-string (normalize &quot;linenumbering&quot;))
</text>
<text>	       (normalize &quot;numbered&quot;)))))
</text>
<text>
</text>
<text>(element screen
</text>
<text>  ($verbatim-display$
</text>
<text>   %indent-screen-lines%
</text>
<text>   (or %number-screen-lines%
</text>
<text>       (equal? (attribute-string (normalize &quot;linenumbering&quot;))
</text>
<text>	       (normalize &quot;numbered&quot;)))))
</text>
<text>
</text>
<text>(element screenshot (process-children))
</text>
<text>(element screeninfo (empty-sosofo))
</text>
<text>
</text>
<text>    </text>
<text>
</text>
<text>;; $Id: version.dsl,v 1.1 2001/04/02 21:40:28 nwalsh Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://www.nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; If **ANY** change is made to this file, you _MUST_ alter the
</text>
<text>;; following definition:
</text>
<text>
</text>
<text>(define (stylesheet-version)
</text>
<text>  (let* ((version &quot;</text>
<text>1.78</text>
<text>&quot;)
</text>
<text>	 (verslen (string-length version)))
</text>
<text>    (string-append
</text>
<text>     &quot;Modular DocBook Print Stylesheet Version &quot;
</text>
<text>     ;; trim off the trailing newline
</text>
<text>     (substring version 0 (- verslen 1)))))
</text>
<text>
</text>
<text>;; $Id: db31.dsl,v 1.6 2001/08/30 12:07:15 nwalsh Exp $
</text>
<text>;;
</text>
<text>;; This file is part of the Modular DocBook Stylesheet distribution.
</text>
<text>;; See ../README or http://nwalsh.com/docbook/dsssl/
</text>
<text>;;
</text>
<text>
</text>
<text>;; This module implements support for elements introduced in DocBook 3.1.
</text>
<text>;; When DocBook 3.1 is officially released, these rules will get folded
</text>
<text>;; into more appropriate modules.
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; MediaObject and friends...
</text>
<text>
</text>
<text>(define preferred-mediaobject-notations
</text>
<text>  (list &quot;EPS&quot; &quot;PS&quot; &quot;JPG&quot; &quot;JPEG&quot; &quot;PNG&quot; &quot;linespecific&quot;))
</text>
<text>
</text>
<text>(define preferred-mediaobject-extensions
</text>
<text>  (list &quot;eps&quot; &quot;ps&quot; &quot;jpg&quot; &quot;jpeg&quot; &quot;png&quot;))
</text>
<text>
</text>
<text>(define acceptable-mediaobject-notations
</text>
<text>  (list &quot;GIF&quot; &quot;GIF87a&quot; &quot;GIF89a&quot; &quot;BMP&quot; &quot;WMF&quot;))
</text>
<text>
</text>
<text>(define acceptable-mediaobject-extensions
</text>
<text>  (list &quot;gif&quot; &quot;bmp&quot; &quot;wmf&quot;))
</text>
<text>
</text>
<text>(element mediaobject
</text>
<text>  (make paragraph
</text>
<text>    ($mediaobject$)))
</text>
<text>
</text>
<text>(element inlinemediaobject
</text>
<text>  (make sequence
</text>
<text>    ($mediaobject$)))
</text>
<text>
</text>
<text>(element mediaobjectco
</text>
<text>  (error &quot;MediaObjectCO is not supported yet.&quot;))
</text>
<text>
</text>
<text>(element imageobjectco
</text>
<text>  (error &quot;ImageObjectCO is not supported yet.&quot;))
</text>
<text>
</text>
<text>(element objectinfo
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element videoobject
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element videodata
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element audioobject
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element audiodata
</text>
<text>  (empty-sosofo))
</text>
<text>
</text>
<text>(element imageobject
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>(element imagedata
</text>
<text>  (if (have-ancestor? (normalize &quot;mediaobject&quot;))
</text>
<text>      ($img$ (current-node) #t)
</text>
<text>      ($img$ (current-node) #f)))
</text>
<text>
</text>
<text>(element textobject
</text>
<text>  (make display-group
</text>
<text>    (process-children)))
</text>
<text>
</text>
<text>(element caption
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; InformalFigure
</text>
<text>
</text>
<text>(element informalfigure
</text>
<text>  ($informal-object$ %informalfigure-rules% %informalfigure-rules%))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; Colophon
</text>
<text>
</text>
<text>(element colophon
</text>
<text>  ($component$))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; section
</text>
<text>;; sectioninfo
</text>
<text>
</text>
<text>(element section ($section$))
</text>
<text>(element (section title) (empty-sosofo))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; QandASet and friends
</text>
<text>
</text>
<text>(define (qanda-defaultlabel)
</text>
<text>  (normalize &quot;number&quot;))
</text>
<text>
</text>
<text>(element qandaset
</text>
<text>  (let ((title (select-elements (children (current-node)) 
</text>
<text>				(normalize &quot;title&quot;))))
</text>
<text>    (make display-group
</text>
<text>      (process-node-list title)
</text>
<text>      (process-qanda))))
</text>
<text>
</text>
<text>(element (qandaset title)
</text>
<text>  (let* ((enclsect (ancestor-member (current-node)
</text>
<text>				    (list (normalize &quot;section&quot;)
</text>
<text>					  (normalize &quot;simplesect&quot;)
</text>
<text>					  (normalize &quot;sect5&quot;)
</text>
<text>					  (normalize &quot;sect4&quot;)
</text>
<text>					  (normalize &quot;sect3&quot;)
</text>
<text>					  (normalize &quot;sect2&quot;)
</text>
<text>					  (normalize &quot;sect1&quot;)
</text>
<text>					  (normalize &quot;refsect3&quot;)
</text>
<text>					  (normalize &quot;refsect2&quot;)
</text>
<text>					  (normalize &quot;refsect1&quot;))))
</text>
<text>	 (sectlvl (SECTLEVEL enclsect))
</text>
<text>	 (hs      (HSIZE (- 4 (+ sectlvl 1)))))
</text>
<text>    (make paragraph
</text>
<text>      font-family-name: %title-font-family%
</text>
<text>      font-weight:  (if (&lt; sectlvl 5) 'bold 'medium)
</text>
<text>      font-posture: (if (&lt; sectlvl 5) 'upright 'italic)
</text>
<text>      font-size: hs
</text>
<text>      line-spacing: (* hs %line-spacing-factor%)
</text>
<text>      space-before: (* hs %head-before-factor%)
</text>
<text>      space-after: (* hs %head-after-factor%)
</text>
<text>      start-indent: %body-start-indent%
</text>
<text>      first-line-start-indent: 0pt
</text>
<text>      quadding: %section-title-quadding%
</text>
<text>      keep-with-next?: #t
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(element qandadiv
</text>
<text>  (let ((title (select-elements (children (current-node)) 
</text>
<text>				(normalize &quot;title&quot;))))
</text>
<text>    (make sequence
</text>
<text>      (process-node-list title)
</text>
<text>      (make display-group
</text>
<text>	start-indent: (+ (inherited-start-indent) 2pi)
</text>
<text>	(process-qanda)))))
</text>
<text>
</text>
<text>(element (qandadiv title)
</text>
<text>  (let* ((hnr     (hierarchical-number-recursive (normalize &quot;qandadiv&quot;)
</text>
<text>						 (current-node)))
</text>
<text>	 (number  (let loop ((numlist hnr) (number &quot;&quot;) (sep &quot;&quot;))
</text>
<text>		    (if (null? numlist)
</text>
<text>			number
</text>
<text>			(loop (cdr numlist) 
</text>
<text>			      (string-append number
</text>
<text>					     sep
</text>
<text>					     (number-&gt;string (car numlist)))
</text>
<text>			      &quot;.&quot;)))))
</text>
<text>    (make paragraph
</text>
<text>      font-weight: 'bold
</text>
<text>      space-after: %block-sep%
</text>
<text>      (literal number &quot;. &quot;)
</text>
<text>      (process-children))))
</text>
<text>
</text>
<text>(define (process-qanda #!optional (node (current-node)))
</text>
<text>  (let* ((preamble (node-list-filter-by-not-gi 
</text>
<text>		    (children node)
</text>
<text>		    (list (normalize &quot;title&quot;)
</text>
<text>			  (normalize &quot;qandadiv&quot;) 
</text>
<text>			  (normalize &quot;qandaentry&quot;))))
</text>
<text>	 (divs     (node-list-filter-by-gi (children node)
</text>
<text>					   (list (normalize &quot;qandadiv&quot;))))
</text>
<text>	 (entries  (node-list-filter-by-gi (children node)
</text>
<text>					   (list (normalize &quot;qandaentry&quot;))))
</text>
<text>	 (inhlabel (inherited-attribute-string (normalize &quot;defaultlabel&quot;)))
</text>
<text>	 (deflabel (if inhlabel inhlabel (qanda-defaultlabel))))
</text>
<text>    (make sequence
</text>
<text>      (process-node-list preamble)
</text>
<text>      (process-node-list divs)
</text>
<text>      (process-node-list entries))))
</text>
<text>
</text>
<text>(element qandaentry
</text>
<text>  (process-children))
</text>
<text>
</text>
<text>;; space-after on quanda answer is excessive; keep with next should be
</text>
<text>;; upstream
</text>
<text>;; Adam Di Carlo, adam@onshore.com
</text>
<text>(element question
</text>
<text>  (let* ((chlist   (children (current-node)))
</text>
<text>         (firstch  (node-list-first chlist))
</text>
<text>         (restch   (node-list-rest chlist))
</text>
<text>	 (label    (question-answer-label (current-node))))
</text>
<text>    (make sequence
</text>
<text>      (make paragraph
</text>
<text>	space-after: (/ %para-sep% 2)
</text>
<text>	keep-with-next?: #t
</text>
<text>	(make sequence
</text>
<text>	  (make sequence
</text>
<text>	    font-weight: 'bold
</text>
<text>	    (if (string=? label &quot;&quot;)
</text>
<text>		(empty-sosofo)
</text>
<text>		(literal label &quot; &quot;)))
</text>
<text>	  (process-node-list (children firstch)))
</text>
<text>      (process-node-list restch)))))
</text>
<text>
</text>
<text>(element answer
</text>
<text>  (let* ((chlist   (children (current-node)))
</text>
<text>	 (firstch  (node-list-first chlist))
</text>
<text>	 (restch   (node-list-rest chlist))
</text>
<text>	 (label    (question-answer-label (current-node))))
</text>
<text>    (make display-group
</text>
<text>      space-after: %block-sep%
</text>
<text>      (make paragraph
</text>
<text>	(make sequence
</text>
<text>	  (make sequence
</text>
<text>	    font-weight: 'bold
</text>
<text>	    (if (string=? label &quot;&quot;)
</text>
<text>		(empty-sosofo)
</text>
<text>		(literal label &quot; &quot;)))
</text>
<text>	  (process-node-list (children firstch))))
</text>
<text>      (process-node-list restch))))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; constant
</text>
<text>
</text>
<text>(element constant 
</text>
<text>  ($mono-seq$))
</text>
<text>
</text>
<text>;; ======================================================================
</text>
<text>;; varname
</text>
<text>
</text>
<text>(element varname
</text>
<text>  ($mono-seq$))
</text>
<text>      </text>
<text>
</text>
</fot>
